---
title: "INC10288: DNA contamination"
author: "Joe Shaw"
format: pdf
editor: visual
---

```{r}
#| label: contamination-samples
#| include: FALSE
#| eval: FALSE

source(here::here("scripts/connect_to_dna_db.R"))
source(here::here("functions/dna_db_functions.R"))

INC10288_folder <- paste0(config::get("data_folderpath"),
                          "live_service/INC10288_contamination/")

contamination_samples <- read_csv(file = paste0(INC10288_folder,
                                  "contamination_dna_labnos.csv"),
                                  col_types = list(
                                    "labno" = col_character()
                                  ))

contamination_labnos <- contamination_samples$labno

# Sample details ----------------------------------------------------------

sample_df <- sample_tbl |> 
  filter(labno %in% contamination_labnos) |> 
  select(labno, nhsno, firstname, surname, i_gene_r_no,
         date_in, consultant_address, comments) |> 
  collect()

contamination_nhsnos <- sample_df$nhsno

all_sample_df <- sample_tbl |> 
  filter(nhsno %in% contamination_nhsnos) |> 
  select(labno, nhsno, firstname, surname, i_gene_r_no,
         date_in, consultant_address, comments) |> 
  collect()

impacted_patient_labnos <- all_sample_df$labno

extraction_df <- get_extraction_method(sample_vector = contamination_labnos)

worksheet_df <- dna_db_pcr_records |> 
  filter(sample %in% impacted_patient_labnos) |> 
  select(sample, pcrid) |> 
  collect() |> 
  distinct()

impacted_worksheets <- unique(worksheet_df$pcrid)

worksheet_details <- dna_db_worksheets |> 
  filter(pcrid %in% impacted_worksheets) |> 
  select(pcrid, description, date) |> 
  collect()

worksheet_df_mod <- worksheet_df |> 
  left_join(worksheet_details, by = "pcrid")

# Export results ----------------------------------------------------------

export_folder <- paste0(INC10288_folder, "dna_db_exports/")

write_csv(all_sample_df, paste0(export_folder, "all_sample_df.csv"))

write_csv(extraction_df, paste0(export_folder, "extraction_df.csv"))

write_csv(worksheet_df_mod, paste0(export_folder, "worksheet_df_mod.csv"))

```

```{r}
#| label: snp-frequencies
#| include: FALSE

library(tidyverse)
library(readxl)

source(here::here("functions/filename_functions.R"))

snp_data_folder <- "S:/central shared/Genetics/NGS/Bioinformatics/1_Pan-solid-Cancer/Contamination/AF_Frequency_data/"

snp_data_files <- list.files(snp_data_folder,
                             full.names = TRUE,
                             recursive = TRUE,
                             pattern = ".*.xlsx")

snp_filename_regex <- ".*(GIAB_filter|variants_annotated)_(WS\\d{6})_(\\d{8}).*"

read_snp_data <- function(filepath) {
  
  df <- read_excel(path = filepath,
                   range = cell_cols("A:L"),
                   col_types = c(
                     "text", "text", "text", "text", "text", 
                     "text", "numeric", "text", "text",
                     "numeric", "numeric", "numeric"
                   )) |> 
    janitor::clean_names() 
  
  output <- add_identifiers(filepath, df)
  
  return(output)
  
}

all_snp_data <- snp_data_files |> 
  map(\(snp_data_files) read_snp_data(snp_data_files)) |> 
  list_rbind()

make_snp_plot <- function(sample1_ws, sample1_labno,
                          sample2_ws, sample2_labno) {
  
  sample1_df <- all_snp_data |> 
    filter(worksheet == sample1_ws &
             labno_suffix == sample1_labno)
  
  sample2_df <- all_snp_data |> 
    filter(worksheet == sample2_ws &
             labno_suffix == sample2_labno)
                                        
  comparison_df <- sample1_df |> 
    filter(type == "SNV") |> 
    select(chromosome, region, type, reference, reference_allele, allele, frequency) |> 
    left_join(sample2_df |> 
                filter(type == "SNV") |> 
                select(chromosome, region, type, reference, reference_allele,
                       allele, frequency) |> 
                rename(sample2_frequency = frequency),
              join_by(chromosome, region, type, reference, reference_allele,
                      allele)) |> 
    mutate(sample2_frequency_category = case_when(
      sample2_frequency > 90 ~"Above 90%",
      sample2_frequency < 60 &
        sample2_frequency > 40 ~"Between 40-60%",
      sample2_frequency < 10 ~"Lower than 10%",
      TRUE ~"Not present")) |> 
      rename(sample1_frequency = frequency)
  
  comparison_df_no_na <- comparison_df |> 
    filter(!is.na(sample2_frequency))
  
  comparison_plot <- comparison_df |> 
    ggplot(aes(x = region, y = sample1_frequency)) +
    geom_point(shape = 21, aes(fill = sample2_frequency_category),
               alpha = 0.8) +
    scale_fill_manual(values = c("#56B4E9", "#D55E00", "#999999", "white")) +
    theme_bw() +
    theme(axis.text.x = element_blank(),
          panel.grid = element_blank()) +
    scale_y_continuous(breaks = seq(0, 100, by = 10)) +
    labs(x = "SNPs", y = "SNP Allele Frequency",
         fill = paste0("Percentage in ", sample2_labno),
         title = paste0("SNP data from ", sample1_labno),
         subtitle = paste0("SNPs coloured by frequency in ", sample2_labno),
         caption = paste0(nrow(comparison_df_no_na), " SNPs match"))
  
  return(list(comparison_plot, comparison_df))
  
}

```

## Identifying contamination

One way to identify contamination is to plot the SNP frequencies within a sample (sample 1) and then colour the data by the genotypes of the SNPs in the sample which is suspected of being the contaminant (sample 2).

If sample 1 is not contaminated with sample 2, then there should be no pattern to the colouring. Here is an example from the limit of detection experiment: sample 24026628 was analysed on it's own as "24026628a". Here are the results coloured by a random sample from the same worksheet (25008651).

```{r}
#| label: plot-24026628b-no-cont
#| echo: FALSE

plot_24026628b_no_cont <- make_snp_plot("WS150465", "24026628b",
              "WS150465", "25008651")[1]

plot_24026628b_no_cont

```

Now here's what the plot looks like if the SNP data is coloured by the genotypes in sample 24053299, which was deliberately mixed into 24026628b.

```{r}
#| label: plot-24026628b-cont
#| echo: FALSE

plot_24026628b_cont <- make_snp_plot("WS150465", "24026628b",
              "WS150529", "24053299")[1]

plot_24026628b_cont

```

## 25009458

When we compare the genotypes of the sample directly after 25009458 on worksheet WS150808 (25009459), we find that they line up with the contamination pattern seen in 25009458.

```{r}
#| label: fig-25009458
#| echo: FALSE
#| fig-width: 6
#| fig-height: 6

fig_25009458 <- make_snp_plot("WS150808", "25009458",
              "WS150808", "25009459")[1]

fig_25009458



```

{{< pagebreak >}}

## 25006349

I've checked all samples on WS150302. None seem to match the allelic pattern.

## 25003615

I've checked all samples on WS149784. None seem to match the allelic pattern.

## 24054291

I've checked all samples WS146642. None seem to match the allelic pattern.
One sample 24057199 does not have any SNP data because it failed on low
coverage, so I wasn't able to check it.

