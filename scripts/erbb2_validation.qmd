---
title: "*ERBB2* Amplifications"
author: "Joe Shaw"
date: today
date-format: "DD/MM/YYYY"
format: html
editor: visual
---

# Introduction

This Quarto document performs the analysis for the validation of somatic *ERBB2* gene amplifications.

Exported tables and plots have the prefix "plot" or "table" and are named exactly as they appear in the validation document ("ERBB2 Somatic Amplifications Validation Document.docx") for ease of reference.

Plots do not have titles to avoid confusion with the figure titles in the Word document.

The script should run with the files in the associated data folders, without requiring a connection to the DNA Database. 

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(readxl)
library(here)
library(ggpubr)
library(patchwork)
library(ggvenn)

source(here::here("functions/cnv_functions.R"))

```

## QiaSeq Primers

The overlap of primers between the PanSolid and Core enrichment panels is too great to allow Core panel results to be used for the validation of the PanSolid enrichment.

```{r}
#| label: qiaseq-primers
#| echo: FALSE

pan_solid_only <- read_excel(here::here("data/primers/Primer and Gene Comparison.xlsx"),
                             sheet = "Primer Overlap",
                             range = "A2:D11024",
                             col_names = c("chromosome", "coordinates", "sequence",
                                           "gene"),
                             col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 44038Z-11379",
         text = "PanSolid only")

core_only <- read_excel(here::here("data/primers/Primer and Gene Comparison.xlsx"),
                        sheet = "Primer Overlap",
                        range = "G2:J595",
                        col_names = c("chromosome", "coordinates", "sequence",
                                      "gene"),
                        col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 17500Z-950",
         text = "Core only")

both_panels <- read_excel(here::here("data/primers/Primer and Gene Comparison.xlsx"),
                          sheet = "Primer Overlap",
                          range = "L2:O357",
                          col_names = c("chromosome", "coordinates", "sequence",
                                        "gene"),
                          col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "common to both 44038Z-11379 and 17500Z-950",
         text = "Both")

stopifnot(intersect(pan_solid_only$sequence, core_only$sequence) == 0)

all_primers <- rbind(pan_solid_only, core_only, both_panels) |> 
  mutate(gene_clean = case_when(
    
    gene == "ERBB2, MIR4728" ~"ERBB2",
    gene == "EGFR, EGFR-AS1" ~"EGFR",
    TRUE ~gene)) 

primer_table <- all_primers |> 
  filter(gene_clean == "ERBB2") |>
  filter(text != "Core only") |> 
  group_by(gene_clean, text) |> 
  summarise(total = n(), .groups = "drop_last") |> 
  mutate(prop = round(total/sum(total) * 100, 1)) |> 
  ungroup() |> 
  pivot_wider(names_from = c(text),
              values_from = c(total, prop)) |> 
  arrange(desc(total_Both))

table_ERBB2_Qiaseq_Primers <- primer_table |> 
  rename(Gene = gene_clean,
         "Primers shared with Core panel" = total_Both,
         "Primers shared with Core panel (%)" = prop_Both,
         "Primers unique to PanSolid" = "total_PanSolid only",
         "Primers unique to PanSolid (%)" = "prop_PanSolid only") |> 
  select(Gene, "Primers shared with Core panel",
         "Primers shared with Core panel (%)",
         "Primers unique to PanSolid",
         "Primers unique to PanSolid (%)")

knitr::kable(table_ERBB2_Qiaseq_Primers) 

csv_timestamp(table_ERBB2_Qiaseq_Primers)

```

```{r}
#| label: primer-panel-venn-diagram
#| echo: FALSE

# Design file sent by Qiagen
pansolid_v2 <- read_table(here::here("data/primers/QIAseq.CDHS-48608z-11752.primers3.txt"),
           col_names = c("chromosome", "coordinate", "strand", "sequence"))

# Design file from PanSolid validation document (DOC6024)
pansolid_v1 <- read_table(here::here("data/primers/407C7BF1.txt"),
           col_names = c("chromosome", "coordinate", "strand", "sequence"))

core_panel <- read_table(here::here("data/primers/CDHS-17500Z-950.primer3.txt"),
           col_names = c("chromosome", "coordinate", "strand", "sequence"))

primer_comparison <- list("PanSolidv1.2" = pansolid_v1$sequence, 
                   "PanSolidv2" = pansolid_v2$sequence,
                   "Core" = core_panel$sequence)

plot_primer_venn <- ggvenn(primer_comparison,
                           fill_color = c("#0073C2FF", "#3399FF", "#3366CC"),
                           text_size = 4,
                           set_name_size = 4,
                           show_percentage = FALSE,
                           stroke_size = 0.5)

plot_timestamp(plot_primer_venn)

```

## Fold Change Threshold

The theoretical limit of detection of the PanSolid pipeline varies with the neoplastic cell content of the sample and the number of copies of the target gene within the tumour cells.

```{r}
#| label: fold-change-threshold-plot
#| echo: FALSE

fold_change_threshold <- 2.9

fc_vs_ncc <- data.frame(ncc = seq(0, 100, by = 0.1)) |> 
  mutate(target_copies = calculate_target_copies(fold_change = fold_change_threshold,
                                                 ncc_percent = ncc))

lod_exp <- data.frame(
  target_copies = c(14, 8, 5, 0, 14, 14, 14, 14),
  ncc = c(100, 100, 100, 100, 25, 12.5, 6.25, 0))

plot_fold_change_detection_limit <- fc_vs_ncc |> 
  filter(target_copies <= 100) |> 
  ggplot(aes(x = target_copies, y = ncc)) +
  geom_line(linewidth = 1) +
  theme_bw() +
  labs(x = "Target copies per cell", y = "Neoplastic cell content (%)",
       caption = str_c("Line shows detection limit using a fold change threshold of ",
                        fold_change_threshold)) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0,100,10),
                     minor_breaks = FALSE) +
  scale_x_continuous(limits = c(0, 100), breaks = seq(0,100,10),
                     minor_breaks = FALSE) +
  geom_text(aes(x = 30, y = 30), size = 4, label = "Detected") +
  geom_text(aes(x = 25, y = 5), size = 4, label = "Not detected") +
  geom_point(data = lod_exp, pch = 21, fill = safe_red)

plot_fold_change_detection_limit

plot_timestamp(plot_fold_change_detection_limit)

```

## Methods

### Load PanSolid Results

PanSolid results are taken from the formatted Excel (.xlsx) files which are exported from the PanSolid 1.6dev pipeline.

```{r}
#| label: load-processed-clc-results
#| include: FALSE

clc_processed_data_path <- here::here("data/clc_processed_outputs")

processed_files <- list.files(path = clc_processed_data_path, full.names = TRUE,
                              pattern = ".xlsx")

pos_cnv_results_collated <-  processed_files |> 
  map(\(processed_files) read_pos_cnv_results(file = processed_files)) |> 
  list_rbind()

all_amp_gene_results_collated <- processed_files |> 
  map(\(processed_files) read_all_amp_genes_results(file = processed_files)) |> 
  list_rbind() |> 
  mutate(pansolid_call = case_when(
    max_region_fold_change >= fold_change_threshold ~"amplification",
    max_region_fold_change < fold_change_threshold ~"normal result"))
  
stdev_results_collated <-  processed_files |> 
  map(\(processed_files) read_stdev_results(file = processed_files)) |> 
  list_rbind() 

```

```{r}
#| label: check-data-loading
#| include: FALSE

# Check all files have been read

stopifnot(unique(pos_cnv_results_collated$file) == processed_files)

stopifnot(stdev_results_collated$file == processed_files)

stopifnot(unique(all_amp_gene_results_collated$file) == processed_files)

# Check full gene table has been read
stopifnot(nrow(all_amp_gene_results_collated) / 9 == length(processed_files))

```

```{r}
#| label: check-fold-change-threshold-application
#| include: FALSE

pos_cnv_table_amps <- pos_cnv_results_collated |> 
  filter(gene != "no positive calls") |> 
  select(labno_suffix_worksheet, gene) |> 
  arrange(labno_suffix_worksheet, gene) |> 
  mutate(id_gene = str_c(labno_suffix_worksheet, "_", gene))

all_amp_gene_results_table_amps <- all_amp_gene_results_collated |> 
  filter(pansolid_call == "amplification") |> 
  select(labno_suffix_worksheet, gene) |> 
  arrange(labno_suffix_worksheet, gene) |> 
  mutate(id_gene = str_c(labno_suffix_worksheet, "_", gene))

setdiff(pos_cnv_table_amps$id_gene, all_amp_gene_results_table_amps$id_gene)

```

```{r}
#| label: identify-unnecessary-cases
#| include: FALSE

# 23034646: sample excluded because sample type is fresh frozen tissue
# 23000087: not sure why included - has no ddPCR data

excluded_cases <- c("23034646", "23000087")

```

### Load Control Information

To make sure I am identifying the correct samples as "controls" I have exported the coverage files for the controls from the CLC pipeline.

```{r}
#| label: load-clc-controls
#| include: FALSE

cobas_control_files <- list.files(here::here("data/controls/cobas_control_data/"),
                            full.names = TRUE, pattern = ".csv")

cobas_control_info <- cobas_control_files |> 
  map(\(cobas_control_files) filename_to_df(file = cobas_control_files)) |> 
  list_rbind() |> 
  mutate(sample_group = "cobas control",
         sample_subgroup = case_when(
           
           patient_name %in% grep(pattern = "biobank", x = patient_name,
                                  ignore.case = TRUE, value = TRUE) ~"MCRC control",
           
           TRUE ~"MSI-normal control"))

qiasymphony_control_files <- list.files(here::here("data/controls/qiasymphony_control_data/"),
                                       full.names = TRUE, pattern = ".csv")

qiasymphony_control_info <- qiasymphony_control_files |> 
  map(\(qiasymphony_control_files) filename_to_df(file = qiasymphony_control_files)) |> 
  list_rbind() |> 
  mutate(sample_group = "QIAsymphony control",
         sample_subgroup = "QIAsymphony control")

```

```{r}
#| label: qs-control-sample-types
#| eval: FALSE

table_qs_tissue_sources <- qs_tissue_sources |> 
  count(tissue_source) |> 
  arrange(desc(n)) |> 
  rename("Tissue source" = tissue_source,
         "Number of control samples" =n)

csv_timestamp(table_qs_tissue_sources)

```

### Load Sample Information

The sample information from the DNA Database was extracted using the erbb2_validation_dna_db_queries.R script which uses an ODBC connection. The information was exported as csv files so that this Quarto document should render without the user needing an ODBC connection to the DNA Database.

I have used the following convention to describe different kinds of data:

 - **Sample**: generic term for any DNA that was tested during this validation. Samples can be cases, controls or reference materials.
 - **Case**: an FFPE sample from a patient with cancer
 - **Control**: any sample used as a normal reference for CNV calling. This includes samples with normal microsatellite instability results, samples from the Manchester Cancer Research Centre biobank and samples of normal tissue.
 - **Reference material**: artificial samples of mixed cell-line and plasmid vector DNA purchased from the company SeraCare.
 

```{r}
#| label: extraction-types
#| echo: FALSE

sample_extraction_details <- read_csv(here::here("data/dna_db_queries/sample_extraction_details.csv"),
                                    col_types = "cc") |> 
  # Change format to be consistent with validation document
  mutate(extraction_method = case_when(
    
    extraction_method == "COBAS" ~"cobas®",
    
    extraction_method == "QIAsymphony_DNA_FFPE" ~"QIAsymphony",
    
    # "FFPE" means EZ1 extraction - see DOC907
    extraction_method == "FFPE" ~"EZ1",
    
    TRUE ~extraction_method))

```

```{r}
#| label: sample-genders
#| include: FALSE

sample_gender <- read_csv(here::here("data/dna_db_queries/sample_gender.csv"),
                          col_types = "cc")

```


```{r}
#| label: worksheets
#| include: FALSE

pansolid_ws_details <- read_csv(here::here("data/dna_db_queries/pansolid_ws_details.csv"),
                             show_col_types = FALSE) |> 
  mutate(pansolid_version = ifelse(pcrid == 139890, "2", "1"),
         worksheet = str_c("WS", pcrid))

```

```{r}
#| label: sample-types
#| echo: FALSE

sample_types <- read_csv(here::here("data/dna_db_queries/sample_types.csv"),
                                    col_types = "cc")

```

```{r}
#| label: ncc
#| echo: FALSE

sample_ncc <- read_csv(here::here("data/dna_db_queries/sample_ncc.csv"),
                                    col_types = "ccc")

manual_ncc_check <- read_excel(here::here("data/manual_ncc_check.xlsx"),
                               col_types = c("text", "text"))

over_20_variants <- c(">30%", ">20%", "20-30%")

ncc_collated <- sample_ncc |> 
  left_join(manual_ncc_check, by = "labno") |> 
  mutate(ncc = case_when(
    
    ncc_db %in% over_20_variants |
      manual_ncc %in% over_20_variants ~">20%",
    
    ncc_db == "10-20%" |
      manual_ncc == "10-20%" ~"10-20%",
    
    TRUE ~"No NCC provided"))

```

Initially I attempted to use the DISCODE field in DNA Database to identify the different tumour sources but this wasn't ideal (often multiple tumour sources map to the same disease code). Then I manually checked the scanned referral forms for each sample on DNA Database and collated the results in the cnv_validation_labnos_and_tissue_sources.csv file.

```{r}
#| label: tumour-sources
#| echo: FALSE

sample_tissue_sources <- read_csv(here::here("data/cnv_validation_labnos_and_tissue_sources.csv"),
                                    col_types = "cc")

cns <- c("glioma", "brain", "central nervous system", "meningioma", "glioblastoma",
         "atsrocytoma")

crc <- c("colon", "rectum", "gastrointestinal", "bowel", "adenocarcinoma", 
         "liver - gastrointestinal primary")

uterus <- c("fallopian tube", "uterine serous carcinoma", "uterus")

sample_tissue_sources_coded <- sample_tissue_sources |> 
  mutate(tissue_code = case_when(
    
    tissue_source %in% cns ~"central nervous system",
    
    tissue_source %in% crc ~"colorectal",
    
    tissue_source %in% uterus ~"uterus/fallopian tube",
    
    TRUE ~tissue_source)) 

```

Samples were tested across `r nrow(pansolid_ws_details)` between `r min(pansolid_ws_details$date)` and `r max(pansolid_ws_details$date)`.

```{r}
#| label: sample-dna-concentrations
#| echo: FALSE

pansolid_submissions <- join_pansolid_submission_sheets()

sample_dna_concentrations <- pansolid_submissions |> 
  filter(labno %in% sample_tissue_sources$labno) |> 
  filter(!duplicated(labno))

```

```{r}
#| label: path-block-numbers
#| include: FALSE

sample_pathnos <- read_csv(here::here("data/dna_db_queries/sample_pathnos.csv"),
                           col_types = "cc")

```

```{r}
#| label: nhs-numbers
#| include: FALSE

sample_nhs_no <- read_csv(here::here("data/dna_db_queries/sample_nhs_no.csv"),
                          col_types = "cc")

```

### Add DNA Database Information

```{r}
#| label: add-dna-db-information
#| include: FALSE

add_case_group <- function(df) {
  
  stopifnot("patient_name" %in% colnames(df))
  
  output <- df |> 
    mutate(sample_group = "case",
         sample_subgroup = case_when(
           
           patient_name %in% grep(pattern = "seraseq", x = patient_name,
                                  ignore.case = TRUE, value = TRUE) ~"SeraCare reference material",
           
           TRUE ~"Patient FFPE sample"))
  
  return(output)
  
}

pos_cnv_results <- pos_cnv_results_collated |>  
  filter(!labno %in% excluded_cases) |> 
  add_dna_db_info() |> 
  add_case_group()

all_amp_gene_results <- all_amp_gene_results_collated |>  
  filter(!labno %in% excluded_cases) |> 
  add_dna_db_info() |> 
  add_case_group()

stdev_results <- stdev_results_collated |>  
  filter(!labno %in% excluded_cases) |> 
  add_dna_db_info() |> 
  add_case_group()

cobas_controls <- cobas_control_info |> 
  add_dna_db_info()

qiasymphony_controls <- qiasymphony_control_info |> 
  add_dna_db_info()

```

### Make Sample Tables for Validation Document

```{r}
#| label: sample-info-tables-export
#| eval: FALSE

table_sample_extractions <- sample_extraction_details |> 
  filter(labno %in% stdev_results$labno) |> 
  count(extraction_method) |> 
  arrange(desc(n)) |> 
  rename("Extraction method" = extraction_method,
         "Samples" = n)

knitr::kable(table_sample_extractions)

csv_timestamp(table_sample_extractions)

```

```{r}
#| label: sample-tumour-type-table
#| echo: FALSE

table_tumour_sources <- stdev_results |> 
  filter(sample_subgroup == "Patient FFPE sample") |>
  filter(extraction_method == "cobas®" & pansolid_version == "1") |> 
  filter(!duplicated(labno)) |> 
  count(tissue_code) |> 
  rename("Samples" = n,
         "Tumour" = tissue_code) |> 
  arrange(desc(Samples))

total_line <- data.frame("Tumour" = c("Total"),
                         "Samples" = sum(table_tumour_sources$Samples))

table_tumour_sources_total <- rbind(table_tumour_sources, total_line)

knitr::kable(table_tumour_sources_total)

csv_timestamp(table_tumour_sources_total)

```

```{r}
#| label: dna-extraction-concentrations
#| echo: FALSE

stdev_results |> 
  filter(!is.na(extraction_method)) |> 
  group_by(extraction_method) |> 
  summarise(min_dna = min(stock_qubit, na.rm = TRUE),
            max_dna = max(stock_qubit, na.rm = TRUE),
            median_dna = median(stock_qubit, na.rm = TRUE))

```


```{r}
#| label: sample-ncc-table
#| echo: FALSE

table_neoplastic_cell_content <- stdev_results |> 
  filter(sample_subgroup == "Patient FFPE sample") |>
  filter(!duplicated(labno)) |> 
  filter(extraction_method == "cobas®" & pansolid_version == "1") |> 
  mutate(ncc = factor(x = ncc, levels = c(">20%", "10-20%", "No NCC provided"))) |> 
  count(ncc) |> 
  arrange(ncc) |> 
  rename("NCC" = ncc,
         "Samples" = n)

total_line <- data.frame("NCC" = c("Total"),
                         "Samples" = sum(table_neoplastic_cell_content$Samples))

table_neoplastic_cell_content_total <- rbind(table_neoplastic_cell_content, total_line)

knitr::kable(table_neoplastic_cell_content_total)

csv_timestamp(table_neoplastic_cell_content_total)

```

```{r}
#| label: sample-type-table
#| echo: FALSE

table_sample_types <- stdev_results |> 
  filter(sample_subgroup == "Patient FFPE sample") |>
  filter(!duplicated(labno)) |> 
  filter(extraction_method == "cobas®" & pansolid_version == "1") |> 
  count(tissue_type) |> 
  arrange(desc(n)) |> 
  rename("Type" = tissue_type,
         "Samples" = n)

total_line <- data.frame("Type" = c("Total"),
                         "Samples" = sum(table_sample_types$Samples))


table_sample_types_total <- rbind(table_sample_types, total_line)

knitr::kable(table_sample_types_total)

csv_timestamp(table_sample_types_total)

```

These sample numbers should match the numbers given in the flow diagram in the validation document.

```{r}
#| label: sample-numbers
#| echo: FALSE

table_cases_tested <- stdev_results |>
  group_by(sample_subgroup, extraction_method, pansolid_version) |> 
  summarise(Samples = length(unique(labno)),
            Replicates = n()) |> 
  arrange(sample_subgroup, extraction_method, desc(Replicates))

cases_total_line <- data.frame(sample_subgroup = "Total",
                         extraction_method = "",
                         pansolid_version = "0",
                         Samples = sum(table_cases_tested$Samples),
                         Replicates = sum(table_cases_tested$Replicates))

table_cases_tested_totals <- rbind(table_cases_tested, cases_total_line)

knitr::kable(table_cases_tested_totals)

table_controls_tested <- rbind(cobas_controls, qiasymphony_controls) |>
  group_by(sample_subgroup, extraction_method, pansolid_version) |> 
  summarise(Samples = length(unique(labno))) |> 
  arrange(sample_subgroup, extraction_method)

total_control_line <- data.frame(sample_subgroup = "Total",
                         extraction_method = "",
                         pansolid_version = 0,
                         Samples = sum(table_controls_tested$Samples))

table_controls_tested_totals <- rbind(table_controls_tested, total_control_line)

knitr::kable(table_controls_tested_totals)

```

```{r}
#| label: qiasymphony-control-sources
#| echo: FALSE

table_qs_control_sources <- qiasymphony_controls |> 
  count(tissue_source) |> 
  arrange(desc(n)) |> 
  rename("Source" = tissue_source,
         "Samples" = n)
  
total_line <- data.frame("Source" = "Total",
                         "Samples" = sum(table_qs_control_sources$Samples))

table_qs_control_sources_total <- rbind(table_qs_control_sources, total_line)

knitr::kable(table_qs_control_sources_total)

csv_timestamp(table_qs_control_sources_total)

```

### Load Droplet Digital PCR (ddPCR) Data

ddPCR data was analysed on Quantasoft and the results for each plate were exported as a single csv file.

```{r}
#| label: load-ddpcr
#| include: FALSE

ws138419 <- read_biorad_csv("WS138419_analysed.csv")

ws138579 <- read_biorad_csv("WS138579_analysed.csv")

ws138765 <- read_biorad_csv("WS138765_analysed.csv")

ddpcr_erbb2 <- rbind(ws138579, ws138765) |> 
  filter(target_type == "Ch1Unknown")

```

ERBB2 concentrations measured via ddPCR ranged from `r min(ddpcr_erbb2$copies_per20u_l_well)` to `r max(ddpcr_erbb2$copies_per20u_l_well)` copies per ul.

```{r}
#| label: impact-of-enzyme
#| echo: FALSE

dual_tested_samples <- c(21011525, 21039327, 22000209)

table_impact_of_hindiii_digestion <- rbind(ws138419, ws138579) |> 
  filter(experiment == "ERBB2 Ex13_1" & sample %in% dual_tested_samples) |> 
  select(sample, worksheet, target, copies_per20u_l_well, cnv) |> 
  pivot_wider(id_cols = c(sample),
              names_from = c(worksheet, target),
              values_from = c(copies_per20u_l_well, cnv)) |> 
  rename(ERBB2_molecules = copies_per20u_l_well_WS138419_analysed.csv_ch1_target,
         AP3B1_molecules = copies_per20u_l_well_WS138419_analysed.csv_AP3B1,
         ERBB2_molecules_HindIII = copies_per20u_l_well_WS138579_analysed.csv_ch1_target,
         AP3B1_molecules_HindIII = copies_per20u_l_well_WS138579_analysed.csv_AP3B1,
         ERBB2_copies = cnv_WS138419_analysed.csv_ch1_target,
         ERBB2_copies_HindIII = cnv_WS138579_analysed.csv_ch1_target) |> 
  select(sample, ERBB2_molecules, ERBB2_molecules_HindIII,
         AP3B1_molecules, AP3B1_molecules_HindIII,
         ERBB2_copies, ERBB2_copies_HindIII)

knitr::kable(table_impact_of_hindiii_digestion)

csv_timestamp(table_impact_of_hindiii_digestion)

```

# Results

## ERBB2 NGS Results

Because of the new processed Excel format, ERBB2 results can be viewed in two ways:

- 1) At the level of the gene region, with maximum and minimum fold changes

```{r}
#| label: erbb2-gene-region-results
#| include: TRUE

head(all_amp_gene_results)

```

- 2) At the level of the CNV call, which includes the CNV coordinates

```{r}
#| label: erbb2-call-details
#| include: TRUE

head(pos_cnv_results)

```

```{r}
#| label: erbb2-calls-per-sample
#| echo: FALSE

erbb2_cases_per_sample <- pos_cnv_results |> 
  filter(gene == "ERBB2") |> 
  group_by(labno_suffix_worksheet) |> 
  count(gene)

```

Out of `r length(all_cases)` samples, there were `r length(unique(erbb2_pansolid_call_details$labno))` with ERBB2 amplifications detected, with fold changes ranging from `r round(min(erbb2_pansolid_call_details$fold_change), 1)` to `r round(max(erbb2_pansolid_call_details$fold_change), 1)`.

In the cases where an ERBB2 amplification was called, the number of CNV calls in ERBB2 ranged from `r max(erbb2_cases_per_sample$n)` to `r min(erbb2_cases_per_sample$n)`.

```{r}
#| label: calls-by-tumour-type
#| eval: FALSE
#| include: FALSE

table_cobas_results_by_tumour_type <- all_amp_gene_results |> 
  filter(gene == "ERBB2") |> 
  filter(!duplicated(labno) &
           extraction_method == "COBAS") |> 
  count(tissue_code, pansolid_call) |> 
  arrange(desc(n)) |> 
  pivot_wider(id_cols = tissue_code,
              names_from = pansolid_call,
              values_from = n,
              values_fill = 0) |> 
  rename("Tumour type" = tissue_code, 
         "ERBB2 normal" = "normal result",
         "ERBB2 amplification" = amplification) |> 
  select("Tumour type", "ERBB2 normal", "ERBB2 amplification")

table_qiasymphony_results_by_tumour_type <- all_amp_gene_results |> 
  filter(gene == "ERBB2") |> 
  filter(!duplicated(labno) & 
           extraction_method == "QIAsymphony_DNA_FFPE") |> 
  count(tissue_code, pansolid_call) |> 
  arrange(desc(n)) |> 
  pivot_wider(id_cols = tissue_code,
              names_from = pansolid_call,
              values_from = n,
              values_fill = 0) |> 
  rename("Tumour type" = tissue_code, 
         "ERBB2 normal" = "normal result",
         "ERBB2 amplification" = amplification) |> 
  select("Tumour type", "ERBB2 normal", "ERBB2 amplification")

knitr::kable(table_qiasymphony_results_by_tumour_type)

csv_timestamp(table_results_by_tumour_type)

```

## ERBB2 NGS vs ddPCR

```{r}
#| label: ddpcr-vs-pansolid
#| echo: FALSE

ddpcr_threshold <- 6

pansolid_cobas_v1_ddpcr <- all_amp_gene_results |> 
  filter(gene == "ERBB2" & 
           extraction_method == "COBAS" &
           pansolid_version == 1) |> 
  left_join(ddpcr_erbb2 |> 
              filter(!duplicated(labno)), by = "labno") |> 
  mutate(outcome = case_when(
    
        pansolid_call == "amplification" & cnv > ddpcr_threshold ~true_pos,
        
        pansolid_call == "normal result" & cnv <= ddpcr_threshold ~true_neg,
        
        pansolid_call == "amplification" & cnv <= ddpcr_threshold ~false_pos,
        
        pansolid_call == "normal result" & cnv > ddpcr_threshold ~false_neg))

if (anyNA(pansolid_cobas_v1_ddpcr$cnv)) { stop("Not all NGS results have a ddPCR result")}

pansolid_cobas_v2_ddpcr <- all_amp_gene_results |> 
  filter(gene == "ERBB2" &
           extraction_method == "COBAS" &
           pansolid_version == 2) |> 
  left_join(ddpcr_erbb2 |> 
              filter(!duplicated(labno)), by = "labno")

if (anyNA(pansolid_cobas_v2_ddpcr$cnv)) { stop("Not all NGS results have a ddPCR result")}

# Currently doesn't work because 21015264 and 24008372 don't have NHS numbers
pansolid_qiasymphony_v2_ddpcr <- all_amp_gene_results |> 
  filter(gene == "ERBB2" &
           extraction_method == "QIAsymphony_DNA_FFPE" &
           pansolid_version == 2) |> 
  left_join(ddpcr_erbb2 |> 
              filter(!duplicated(labno)), by = "nhsno")

```

```{r}
#| label: cobas-controls-ddpcr-normal-range
#| include: FALSE

cobas_controls_ddpcr <- cobas_controls |> 
  left_join(ddpcr_erbb2 |> 
              filter(!duplicated(labno)), by = "labno")

if (anyNA(cobas_controls_ddpcr$cnv)) { stop("Not all cobas controls have a ddPCR result")}

```

ddPCR ERBB2 copy number in normal controls ranged from `r min(cobas_controls_ddpcr$cnv)` to `r max(cobas_controls_ddpcr$cnv)` (median: `r median(cobas_controls_ddpcr$cnv)`).

```{r}
#| label: ngs-ddpcr-confusion-matrix
#| echo: FALSE

table_erbb2_results_psv1_vs_ddpcr <- make_confusion_matrix(df = pansolid_cobas_v1_ddpcr |> 
                                                             filter(!duplicated(labno)),
                                                          initial_test = "PanSolid",
                                                          comparison_test = "ddPCR",
                                                          positive_state = "Amplification",
                                                          negative_state = "Normal")

knitr::kable(table_erbb2_results_psv1_vs_ddpcr[[1]])

csv_timestamp(table_erbb2_results_psv1_vs_ddpcr[[1]])

```

```{r}

table_erbb2_ddpcr_opa <- data.frame(
  "Metric" = c("Overall percentage agreement", "Positive percentage agreement",
               "Negative percentage agreement"),
  "Percentage (%)" = c(table_erbb2_results_psv1_vs_ddpcr[[2]],
                       table_erbb2_results_psv1_vs_ddpcr[[3]],
                       table_erbb2_results_psv1_vs_ddpcr[[4]]))

knitr::kable(table_erbb2_ddpcr_opa)

csv_timestamp(table_erbb2_ddpcr_opa)

```

```{r}
#| label: ddpcr-vs-pansolid-plot
#| eval: FALSE

rbind(pansolid_v1_ddpcr |> 
        select(labno, cnv, sample_group, sample_subgroup),
  cobas_controls_ddpcr|> 
    select(labno, cnv, sample_group, sample_subgroup)) |> 
  ggplot(aes(x = sample_subgroup, y = cnv)) +
  geom_jitter(size = 2, pch = 21, alpha = 0.6) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.position = "none") +
  labs(x = "", y = "ddPCR ERBB2 Exon 13 Copy Number",
       subtitle = "Highest normal control ddPCR copy number is 6") +
  geom_hline(yintercept = 6, linetype = "dashed") +
  scale_y_continuous(limits = c(0, 80), breaks = c(0, 6, 20, 40, 60, 80)) 

ddpcr_cn_plot

```

```{r}
#| label: fold-change-vs-ddpcr
#| echo: FALSE

discrepant_samples <- c(23001095, 23002258, 23008380)

pansolidv1_ddpcr_for_plot <- pansolid_cobas_v1_ddpcr |> 
  filter(!duplicated(labno))

plot_fold_change_vs_ddpcr_copy_number <- pansolidv1_ddpcr_for_plot |> 
  ggplot(aes(x = max_region_fold_change, y = cnv)) +
  geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
  geom_point(size = 3, fill = safe_blue, alpha = 0.5, pch = 21) +
  theme_bw() +
  theme(plot.caption = element_text(hjust = 0.5)) +
  geom_hline(yintercept = 6, linetype = "dashed") +
  geom_vline(xintercept = fold_change_threshold, linetype = "dashed") +
  labs(x = "PanSolid Fold Change", y = "ddPCR Copy Number",
         caption = str_c("Samples 23001095, 23002258 and 23008380 in red. Data for ",
                         nrow(pansolidv1_ddpcr_for_plot), " samples displayed.")) +
  scale_y_continuous(limits = c(0, 85), breaks = c(0, 20, 40, 60, 80))  +
  scale_x_continuous(limits = c(-20, 60), breaks = c(-20, 0, 20, 40, 60)) +
  geom_point(data = pansolidv1_ddpcr_for_plot |> 
               filter(sample %in% discrepant_samples), size = 3, fill = safe_red,
             pch = 21, alpha = 0.5) +
  ggpubr::stat_cor(method = "pearson", label.x = 35, label.y = 20) 

plot_fold_change_vs_ddpcr_copy_number

plot_timestamp(plot_fold_change_vs_ddpcr_copy_number)

```

```{r}
#| label: discrepant-results-and-sd
#| echo: FALSE

plot_discrepant_results_sd <- ggplot(gene_results_with_sd |> 
         filter(gene == "ERBB2"), aes(x = st_dev_signal_adjusted_log2_ratios,
                                          y = fold_change)) +
    geom_point(size = 3, pch = 21, alpha = 0.4) +
    theme_bw() +
    geom_hline(yintercept = fold_change_threshold, linetype = "dashed") +
    xlim(sd_min_limit, sd_max_limit) +
    ylim(fc_min_limit, fc_max_limit) +
  geom_point(data = gene_results_with_sd |> 
               filter(labno %in% discrepant_samples & 
                        gene == "ERBB2"), size = 3,
             colour = safe_red, alpha = 0.6) +
  labs(title = "Discrepant results with ddPCR (in red) are not poor quality")

plot_discrepant_results_sd

```

## ERBB2 Copy Number Variant Coordinates

```{r}
#| label: erbb2-calls
#| echo: FALSE

erbb2_calls_factorised <- erbb2_pansolid_call_details  |> 
  mutate(labno = factor(x = labno,
                                   levels = c(
                                     "23044755", "23002258", 
                                     "21039327", "23008380",
                                     "24002064", "24002067", "24002071", "23030974",
                                     "21011525", "21015264", "23011210", "23006590",
                                     "23022389", "23001095", "23055093", "21019092", 
                                     "22034556")))

erbb2_labno <- make_labno_plot(df = erbb2_calls_factorised, 
                      gene = "ERBB2",
                      interval = 10000, 
                      buffer = 5000)

plot_all_erbb2_amplification_coordinates <- make_cnv_triptych(erbb2_labno)

plot_all_erbb2_amplification_coordinates

plot_timestamp(plot_all_erbb2_amplification_coordinates, input_height = 16)

```

```{r}
#| label: erbb2-calls-zoom
#| echo: FALSE

short_erbb2_calls <- erbb2_calls_factorised |> 
                                 filter(cnv_length < 100000)

erbb2_labno_zoom <- make_labno_plot(df = short_erbb2_calls, 
                      gene = "ERBB2",
                      interval = 10000, 
                      buffer = 5000)

plot_erbb2_amplification_accuracy <- make_cnv_triptych(erbb2_labno_zoom)

plot_erbb2_amplification_accuracy

plot_timestamp(plot_erbb2_amplification_accuracy)

```

```{r}
#| label: long-erbb2-calls
#| echo: FALSE

erbb2_long_calls <- erbb2_calls_factorised |> 
  filter(cnv_length > 50000) |> 
  select(labno, cnv_length) |> 
  arrange(desc(cnv_length))

knitr::kable(erbb2_long_calls)

```

The long calls varied from `r min(erbb2_long_calls$cnv_length)` to `r max(erbb2_long_calls$cnv_length)`.

## Limit of Detection

```{r}
#| label: seracare-results
#| echo: FALSE

copies_3 <- make_fold_change_plot(df = pos_cnv_results |> 
                                     filter(labno == "24002064"),
                      ymax = 15)

copies_3_plot <- copies_3[[4]] +
  labs(title = "+3 copies")

copies_3_primer <- make_primer_plot(plot_xmin = copies_3[[1]],
                  plot_xmax = copies_3[[2]],
                  interval = copies_3[[3]],
                  chromosome = copies_3[[5]])

copies_3_exon <- make_exon_plot(plot_xmin = copies_3[[1]],
                  plot_xmax = copies_3[[2]],
                  interval = copies_3[[3]],
                  chromosome = copies_3[[5]]) +
  labs(x = "")

copies_6 <- make_fold_change_plot(df = erbb2_pansolid_call_details |> 
                                     filter(labno == "24002067"),
                      ymax = 15)

copies_6_plot <- copies_6[[4]] +
  labs(title = "+6 copies")

copies_6_primer <- make_primer_plot(plot_xmin = copies_6[[1]],
                  plot_xmax = copies_6[[2]],
                  interval = copies_6[[3]],
                  chromosome = copies_6[[5]])

copies_6_exon <- make_exon_plot(plot_xmin = copies_6[[1]],
                  plot_xmax = copies_6[[2]],
                  interval = copies_6[[3]],
                  chromosome = copies_6[[5]]) +
  labs(x = "Genome coordinate")

copies_12 <- make_fold_change_plot(df = erbb2_pansolid_call_details |> 
                                     filter(labno == "24002071"),
                      ymax = 15)

copies_12_plot <- copies_12[[4]] +
  labs(title = "+12 copies")

copies_12_primer <- make_primer_plot(plot_xmin = copies_12[[1]],
                  plot_xmax = copies_12[[2]],
                  interval = copies_12[[3]],
                  chromosome = copies_12[[5]])

copies_12_exon <- make_exon_plot(plot_xmin = copies_12[[1]],
                  plot_xmax = copies_12[[2]],
                  interval = copies_12[[3]],
                  chromosome = copies_12[[5]]) +
  labs(x = "")

plot_seracare_controls_erbb2_results <- copies_3_plot + copies_6_plot + copies_12_plot +
  copies_3_primer + copies_6_primer + copies_12_primer +
  copies_3_exon + copies_6_exon + copies_12_exon +
  plot_layout(nrow = 3, 
              ncol = 3,
              heights = c(6, 1, 2))

plot_seracare_controls_erbb2_results

plot_timestamp(plot_seracare_controls_erbb2_results, input_width = 16)

```

```{r}
#| label: seracare-fold-change-ddpcr
#| echo: FALSE

ddpcr_pansolid_seracare_plot <- ddpcr_pansolid |> 
  mutate(pansolid_copy_number = max_region_fold_change * 2) |> 
  filter(patient_name %in% seracare_names) |> 
  filter(!is.na(pansolid_copy_number)) |> 
  ggplot(aes(x = pansolid_copy_number, y = cnv)) +
  geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
  geom_point(size = 3, fill = safe_blue, alpha = 0.8, pch = 21) +
  theme_bw() +
  labs(x = "PanSolid Copy Number", y = "ddPCR Copy Number") +
  scale_y_continuous(limits = c(0, 30), breaks = c(0, 10, 20, 30)) +
  scale_x_continuous(limits = c(0, 30), breaks = c(0, 10, 20, 30)) +
  ggpubr::stat_cor(method = "pearson", label.x = 22, label.y = 5) 

ddpcr_pansolid_seracare_plot

plot_timestamp(ddpcr_pansolid_seracare_plot)

```

```{r}
#| label: manchester-vs-seracare
#| echo: FALSE

# Values taken from technical product reports
seracare_erbb2_copies <- read_excel(path = here::here("data/seracare_erbb2_copies.xlsx"),
                                    col_types = c("text", "numeric", "numeric",
                                                  "text"))

man_v_seracare <- ddpcr_pansolid |> 
  filter(patient_name %in% seracare_names & labno != "24002060") |> 
  left_join(seracare_erbb2_copies, by = "labno") |> 
  mutate(`Additional ERBB2 copies (Manchester NGS)` = round((max_region_fold_change*2)-2, 2),
         `Additional ERBB2 copies (Manchester ddPCR)` = round(cnv - 2, 2),
         ratio_ngs = round(`Additional ERBB2 copies (Manchester NGS)` / seracare_erbb2_additional_copies_ngs, 2),
         ratio_ddpcr = round(`Additional ERBB2 copies (Manchester ddPCR)` / seracare_erbb2_additional_copies_ddpcr, 2))
  
table_comparison_with_seracare_results_ngs <- man_v_seracare |> 
  select(labno, product, seracare_erbb2_additional_copies_ngs,
         `Additional ERBB2 copies (Manchester NGS)`,
         ratio_ngs) |> 
  arrange(labno) |> 
  rename("Sample" = labno,
         "Product" = product,
         `Additional ERBB2 copies (SeraCare NGS)` = seracare_erbb2_additional_copies_ngs,
         `Ratio (Manchester: SeraCare result)` = ratio_ngs)

table_comparison_with_seracare_results_ddpcr <- man_v_seracare |> 
  select(labno, product, seracare_erbb2_additional_copies_ddpcr,
         `Additional ERBB2 copies (Manchester ddPCR)`,
         ratio_ddpcr) |> 
  arrange(labno) |> 
  rename("Sample" = labno,
         "Product" = product,
         `Additional ERBB2 copies (SeraCare ddPCR)` = seracare_erbb2_additional_copies_ddpcr,
         `Ratio (Manchester: SeraCare result)` = ratio_ddpcr)

knitr::kable(table_comparison_with_seracare_results_ngs)

knitr::kable(table_comparison_with_seracare_results_ddpcr)

csv_timestamp(table_comparison_with_seracare_results_ngs)

csv_timestamp(table_comparison_with_seracare_results_ddpcr)

```

## Repeatability

```{r}
#| label: repeat-results
#| echo: FALSE

std_dev_threshold <- 1

repeats <- stdev_results |> 
  filter(duplicated(labno, fromLast = TRUE) | 
           duplicated(labno, fromLast = FALSE)) |> 
  arrange(labno)

repeat_samples <- unique(repeats$labno)

repeat_results <- all_amp_gene_results |> 
  filter(gene == "ERBB2" & labno %in% repeat_samples) |> 
  left_join(stdev_results |> 
              select(labno_suffix_worksheet, st_dev_signal_adjusted_log2_ratios,
                     st_dev_signal_adjusted_fold_change), by = "labno_suffix_worksheet") |> 
  # Remove NCC limit of detection replicates
  filter(!labno_suffix_worksheet %in% c("24002060a_WS139681", 
                                        "24002060b_WS139681", 
                                        "24002060c_WS139681")) |> 
  mutate(qc_check = case_when(
    
    st_dev_signal_adjusted_log2_ratios < std_dev_threshold ~"pass",
    
    st_dev_signal_adjusted_log2_ratios >= std_dev_threshold ~"fail"

  ))

```

```{r}
#| label: repeat-results-summary
#| echo: FALSE

repeat_summary_table <- repeat_results |> 
  group_by(labno) |> 
  summarise(min_fc = min(min_region_fold_change),
            max_fc = max(max_region_fold_change),
            min_sd = min(st_dev_signal_adjusted_log2_ratios),
            max_sd = max(st_dev_signal_adjusted_log2_ratios)) |> 
  mutate(range_fc = round(max_fc - min_fc, 1),
         range_sd = round(max_sd - min_sd, 3)) |> 
  arrange(desc(range_fc))

repeat_summary_table

```

```{r}
#| label: repeat-tables-and-pooled-sd
#| echo: FALSE

table_inter_run_repeat_results <- repeat_results |> 
  filter(!suffix %in% c("b", "c")) |> 
  filter(duplicated(labno, fromLast = TRUE) | duplicated(labno, 
                                                             fromLast = FALSE)) |> 
  format_repeat_table()

table_intra_run_repeat_results <- repeat_results |> 
  filter(suffix %in% c("a", "b", "c")) |> 
  filter(duplicated(labno, fromLast = TRUE) | duplicated(labno, 
                                                             fromLast = FALSE)) |> 
  format_repeat_table()

calculate_pooled_sd(df = repeat_results, 
                    target_col = st_dev_signal_adjusted_log2_ratios,
                    round_places = 3)


calculate_pooled_sd(df = repeat_results, 
                    target_col = max_region_fold_change,
                    round_places = 2)

knitr::kable(table_inter_run_repeat_results)

knitr::kable(table_intra_run_repeat_results)

csv_timestamp(table_inter_run_repeat_results)

csv_timestamp(table_intra_run_repeat_results)

```

```{r}
#| label: repeat-plots
#| echo: FALSE

sample_21011525_results <- pos_cnv_results |> 
  filter(gene == "ERBB2" & labno == "21011525")

sample_21011525_plot <- make_labno_plot(df = sample_21011525_results, 
                yaxis = labno_suffix_worksheet)

plot_variation_in_21011525 <- make_cnv_triptych(sample_21011525_plot)

plot_variation_in_21011525

plot_timestamp(plot_variation_in_21011525)

```

## Other genes

The aim of the triptych plot functions was to allow me to create flexible plots for different genes, not just ERBB2.

```{r}
#| label: egfr
#| echo: FALSE

egfr_plot <- make_labno_plot(df = pos_cnv_results |> 
                               filter(labno != "23038464"),
                             gene = "EGFR", interval = 200000)

egfr_triptych <- make_cnv_triptych(egfr_plot)

egfr_triptych

egfr_fc_plot <- make_fold_change_plot(ymax = 70, gene = "EGFR",
                                      interval = 200000)

egfr_triptych_fc <- make_cnv_triptych(egfr_fc_plot)

egfr_triptych_fc

egfr_fc_plot_zoom <- make_fold_change_plot(
  df = pos_cnv_results |> 
    filter(cnv_length < 500000),
  ymax = 70, 
  gene = "EGFR",
  interval = 50000)
  
egfr_triptych_fc_zoom <- make_cnv_triptych(egfr_fc_plot_zoom)

egfr_triptych_fc_zoom

```

```{r}
#| label: braf
#| echo: FALSE

braf_plot <- make_labno_plot(gene = "BRAF", interval = 500000)

braf_triptych <- make_cnv_triptych(braf_plot)

braf_triptych

```

```{r}
#| label: met
#| echo: FALSE

met_plot <- make_labno_plot(gene = "MET", interval = 200000)

met_triptych <- make_cnv_triptych(met_plot)

met_triptych

```

```{r}
#| label: myc
#| echo: FALSE

myc_plot <- make_labno_plot(gene = "MYC", interval = 5000000)

myc_triptych <- make_cnv_triptych(myc_plot)

myc_triptych

```

## Comparison to Core Panel

```{r}
#| label: comparison-to-core
#| echo: FALSE

core_result_info <- read_csv(here::here("data/dna_db_queries/core_result_info.csv"),
                             col_types = "ccdccc")
  
core_erbb2_calls <- extract_cnv_calls(df = core_result_info, input_gene = "ERBB2")

pansolid_vs_core <- ddpcr_pansolid |> 
  filter(!labno %in% seracare_ids) |> 
  left_join(core_erbb2_calls,
            by = "labno") |> 
  mutate(outcome = case_when(
           
           pansolid_result == "pansolid amplification" &
             core_result  == "Amplification" ~true_pos,
           
           pansolid_result == "pansolid normal result" & 
             core_result  == "No call" ~true_neg,
           
           pansolid_result == "pansolid amplification"  & 
             core_result  == "No call" ~false_pos,
           
           pansolid_result == "pansolid normal result" & 
             core_result  == "Amplification" ~false_neg,

           TRUE ~"no match")) |> 
  filter(outcome != "no match")

table_pansolid_vs_core_panel_erbb2_results <- make_confusion_matrix(
  df = pansolid_vs_core,
  initial_test = "PanSolid",
  comparison_test = "Core",
  positive_state = "Amplification",
  negative_state = "Normal")

knitr::kable(table_pansolid_vs_core_panel_erbb2_results[[1]])

csv_timestamp(table_pansolid_vs_core_panel_erbb2_results[[1]])

```

## cobas®-EZ1 workflow vs QIAsymphony workflow

I prefer not to use NHS number for the joining of these samples, but the pathology number is manually entered into DNA database and so there are lots of inconsistent formatting issues.

```{r}
#| label: samples-dual-extracted
#| echo: FALSE

# Use pathology block for this - not NHS number

pansolid_qiasymphony_v2 <- all_amp_gene_results |> 
  filter(gene == "ERBB2") |> 
  filter(extraction_method == "QIAsymphony" &
           pansolid_version == "2") |> 
  filter(!is.na(nhsno))

plot_cobas_qs_fold_change <- all_amp_gene_results |> 
  filter(gene == "ERBB2") |> 
  filter(nhsno %in% pansolid_qiasymphony_v2$nhsno) |> 
  ggplot(aes(x = nhsno,
             y = max_region_fold_change)) +
  geom_jitter(pch = 21, size = 3, alpha = 0.5, aes(fill = extraction_method),
              width = 0.2) +
  scale_fill_manual(values = c(safe_blue, safe_red)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  geom_hline(yintercept = fold_change_threshold, linetype = "dashed") +
  labs(y = "ERBB2 region fold change", x = "",
       fill = "Extraction method") +
  scale_y_continuous(limits = c(-20, 120),
                     breaks = c(-20, 0, 20, 40, 60, 80, 100, 120))

plot_cobas_qs_noise <- stdev_results |> 
  filter(nhsno %in% pansolid_qiasymphony_v2$nhsno) |> 
  ggplot(aes(x = nhsno,
             y = st_dev_signal_adjusted_log2_ratios)) +
  geom_jitter(pch = 21, size = 3, alpha = 0.5, aes(fill = extraction_method),
              width = 0.2) +
  scale_fill_manual(values = c(safe_blue, safe_red)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  geom_hline(yintercept = 1, linetype = "dashed") +
  labs(y = "Signal-adjusted noise", x = "NHS number",
       fill = "Extraction method")

plot_fc_noise_joined <- plot_cobas_qs_fold_change + plot_cobas_qs_noise +
  plot_layout(ncol = 1, guides = "collect")

plot_timestamp(plot_fc_noise_joined, input_height = 16)

```

```{r}
#| label: samples-dual-tested
#| echo: FALSE

pansolid_cobas_v2 <- all_amp_gene_results |> 
  filter(gene == "ERBB2") |> 
  filter(extraction_method == "cobas®" &
           pansolid_version == "2")

plot_cobas_v1_2_fold_change <- all_amp_gene_results |> 
  filter(gene == "ERBB2") |> 
  filter(labno %in% pansolid_cobas_v2$labno) |> 
  ggplot(aes(x = labno,
             y = max_region_fold_change)) +
  geom_jitter(pch = 21, size = 3, alpha = 0.5, aes(fill = pansolid_version),
              width = 0.2) +
  scale_fill_manual(values = c(safe_blue, safe_red)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  geom_hline(yintercept = fold_change_threshold, linetype = "dashed") +
  labs(y = "ERBB2 region fold change", x = "",
       fill = "PanSolid version") +
  scale_y_continuous(limits = c(-10, 25),
                     breaks = c(-10, -5, 0, 2.9, 5, 10, 15, 20, 25))

plot_cobas_v1_v2_noise <- stdev_results |> 
  filter(labno %in% pansolid_cobas_v2$labno) |> 
  ggplot(aes(x = labno,
             y = st_dev_signal_adjusted_log2_ratios)) +
  geom_jitter(pch = 21, size = 3, alpha = 0.5, aes(fill = pansolid_version),
              width = 0.2) +
  scale_fill_manual(values = c(safe_blue, safe_red)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(y = "Signal-adjusted noise", x = "",
       fill = "PanSolid version") +
  scale_y_continuous(limits = c(0, 1))

plot_cobas_v1_2 <- plot_cobas_v1_2_fold_change +
  plot_cobas_v1_v2_noise +
  plot_layout(ncol = 1, guides = "collect")

plot_timestamp(plot_cobas_v1_2, input_height = 16)

```

## Quality Control

The signal-adjusted noise for log2 ratios in the cobas-extracted sample cohort ranged from to `r round(min(stdev_results$st_dev_signal_adjusted_log2_ratios), 2)` to `r round(max(stdev_results$st_dev_signal_adjusted_log2_ratios), 2)` (median: `r round(median(stdev_results$st_dev_signal_adjusted_log2_ratios), 2)`).

```{r}
#| label: control-coverage
#| eval: FALSE
#| message: FALSE
#| include: FALSE

control_coverage <- cobas_control_files |> 
  map(\(cobas_control_files) get_control_coverage(
    file = cobas_control_files)) |> 
  list_rbind()

```

```{r}
#| label: all-sample-qc
#| eval: FALSE
#| message: FALSE
#| include: FALSE

qc_data <- all_patient_files |>
  map(\(all_files) read_summary_tab(
    file = all_files)) |>
  list_rbind()

```

```{r}
#| label: coverage-plot
#| eval: FALSE
#| message: FALSE
#| include: FALSE

for_plot <- rbind(
  
  qc_data |> 
    select(labno_suffix_worksheet, median_coverage) |>
    mutate(type = "patients"),
  
  control_coverage |> 
    select(labno_suffix_worksheet, median_coverage) |> 
    mutate(type = "controls")
)

plot_coverage_in_patients_and_controls <- ggplot(for_plot, aes(x = type, 
                    y = median_coverage)) +
  geom_jitter() +
  theme_bw() +
  labs(x = "", y = "Median coverage (X)") +
  ylim(0, 1600) +
  geom_hline(yintercept = 60, linetype = "dashed")

plot_coverage_in_patients_and_controls

plot_timestamp(plot_coverage_in_patients_and_controls)

```

```{r}
#| label: coverage-fold-change-plot
#| eval: FALSE
#| message: FALSE
#| include: FALSE

calls_and_coverage <- ddpcr_pansolid |> 
  left_join(qc_data, 
            by  = "labno_suffix_worksheet")

ggplot(calls_and_coverage, aes(x = percent_target_region_pos_cov_greaterorequal_138, 
                               y = median_coverage)) +
  geom_point(size = 3, alpha = 0.5, aes(colour = pansolid_result)) +
  theme_bw()
  
```

```{r}
#| label: errors
#| eval: FALSE
#| message: FALSE
#| include: FALSE

erbb2_coarse_pansolid |> 
  group_by(labno) |> 
  count(comments)

```

```{r}
#| label: read-targeted-region-overview
#| eval: FALSE
#| message: FALSE
#| include: FALSE 

chromosome_qc_all_samples <- all_patient_files |>
  map(\(all_files) read_targeted_region_overview(
    file = all_files)) |>
  list_rbind()

```

```{r}
#| label: cov-vs-fold-change
#| eval: FALSE
#| message: FALSE
#| include: FALSE

fold_change_vs_138 <- coarse_calls |> 
  filter(gene == "ERBB2") |> 
  left_join(qc_data, by = "labno_suffix_worksheet") |> 
  ggplot(aes(x = fold_change_adjusted, 
                    y = percent_target_region_pos_cov_greaterorequal_138)) +
  geom_point()

cov_vs_138 <- ggplot(qc_data, aes(x = median_coverage,
                    y = percent_target_region_pos_cov_greaterorequal_138)) +
  geom_point(pch = 21, alpha = 0.6, size = 2) +
  theme_bw() +
  ylim(0, 100) +
  geom_vline(xintercept = 60, linetype = "dashed")

```

```{r}
#| label: chr17-coverage
#| eval: FALSE
#| message: FALSE
#| include: FALSE

chrom17_coverage <- chromosome_qc_all_samples |> 
  filter(chromosome == "17") 

erbb2_calls_with_chr17_coverage <- erbb2_coarse_pansolid |> 
  left_join(chrom17_coverage, by = "labno_suffix_worksheet")

foldchange_vs_chr17_reads <- ggplot(erbb2_calls_with_chr17_coverage, 
       aes(x = fold_change_adjusted, y = total_mapped_reads)) +
  geom_point(pch = 21, size = 3, alpha = 0.8) +
  theme_bw() +
  xlim(0, 45) +
  ylim(0, 5000000) +
  labs(x = "Pansolid fold change of ERBB2", y = "Total reads mapped to chromosome 17",
       title = "Samples with higher fold change have higher chr17 reads")

```

```{r}
#| label: chr17-full-cohort
#| eval: FALSE
#| message: FALSE
#| include: FALSE

chr17_reads_sample_cohort <- ggplot(chrom17_coverage, 
                                    aes(x = reorder(labno_suffix_worksheet, total_mapped_reads),
                             y = total_mapped_reads)) +
  geom_point(pch = 21, size = 2) +
  theme_bw() +
  geom_point(data = erbb2_calls_with_chr17_coverage,
             pch = 21, size = 2, fill = safe_red) +
  theme(axis.text.x = element_blank()) +
  labs(x = "Samples", y = "Total reads mapped to chromosome 17",
       title = "ERBB2 amplification samples in red")

random_samples <- c("21019755a_WS128767", "21011525c_WS132125", "23034077_WS133488")

chromosome_qc_all_samples |> 
  filter(labno_suffix_worksheet %in% random_samples) |> 
  ggplot(aes(x = chromosome, y = total_mapped_reads)) +
  geom_col() +
  facet_wrap(~labno)

coarse_calls |> 
  left_join(chromosome_qc_all_samples, by = "labno_suffix_worksheet") |> 
  filter(chromosome.y == "17") |> 
  filter(gene == "ERBB2" & labno.x == "21011525") |> 
  ggplot(aes(x = labno_suffix_worksheet, 
             y = total_mapped_reads)) +
  geom_boxplot(aes(group = labno_suffix_worksheet)) +
  theme(axis.text.x = element_text(angle = 45))

```

```{r}
#| label: coverage-all-chromosomes
#| eval: FALSE
#| message: FALSE
#| include: FALSE

chromosome_qc_all_samples |> 
  ggplot(aes(x = chromosome, y = mapped_reads_in_targeted_region_excl_ignored,
             group = chromosome)) +
  geom_boxplot() 

```

### Tumour Content Limit of Detection Experiment

```{r}
#| label: limit-of-detection
#| echo: FALSE

target_data_files <- list.files(here::here("data/clc_target_level_outputs/"), 
                                full.names = TRUE, 
                                pattern = ".xlsx")

lod_files <- target_data_files[89:92]

lod_percents <- data.frame(
  "labno_suffix" = c("24002060a", "24002060b", "24002060c", "24002060d"),
  "ncc" = c("25% tumour content mimic", "12.5% tumour content mimic",
            "6.25% tumour content mimic", "0% tumour content mimic")) |> 
  mutate(ncc = factor(ncc, levels = c("25% tumour content mimic", "12.5% tumour content mimic",
            "6.25% tumour content mimic", "0% tumour content mimic")))

lod_target_results <- lod_files |>
  map(\(lod_files) read_clc_target_calls(
    file = lod_files
  )) |>
  list_rbind() |> 
  left_join(lod_percents, by = "labno_suffix")

lod_erbb2 <- draw_lod_gene_plot(df = lod_target_results, chromosome = "17.0", gene = "ERBB2")

lod_erbb2

plot_timestamp(lod_erbb2)

lod_braf <- draw_lod_gene_plot(df = lod_target_results, chromosome = "7.0", gene = "BRAF")

lod_braf

lod_egfr <- draw_lod_gene_plot(df = lod_target_results, chromosome = "7.0", gene = "EGFR")

lod_egfr

lod_met <- draw_lod_gene_plot(df = lod_target_results, chromosome = "7.0", gene = "MET")

lod_met

lod_myc <- draw_lod_gene_plot(df = lod_target_results, chromosome = "8.0", gene = "MYC")

lod_myc

```

