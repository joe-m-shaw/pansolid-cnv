---
title: "PanSolid CNV Analysis"
author: "Joe Shaw"
format: html
editor: visual
---

## Introduction

This Quarto document is a notebook for organising analysis of somatic CNVs from a CLC Genomics Workbench pipeline (Qiagen).

The sections and analysis in this document should correspond to the Word document "Pan Solid CLC Somatic Amplifications Validation Document.docx" saved on the S drive.

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(readxl)
library(here)
library(odbc)
library(DBI)
library(dbplyr)

source(here::here("functions/cnv_functions.R"))

```

```{r}
#| label: dlms-connection
#| include: FALSE

dbi_con <- DBI::dbConnect(
  drv = odbc::odbc(),
  dsn = "moldb")

```

## Primer Orthogonality

```{r}
#| label: primers
#| echo: FALSE

pan_solid_only <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                             sheet = "Primer Overlap",
                             range = "A2:D11024",
                             col_names = c("chromosome", "coordinates", "sequence",
                                           "gene"),
                             col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 44038Z-11379",
         text = "PanSolid only")

core_only <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                        sheet = "Primer Overlap",
                        range = "G2:J595",
                        col_names = c("chromosome", "coordinates", "sequence",
                                      "gene"),
                        col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 17500Z-950",
         text = "Core only")

intersect(pan_solid_only$sequence, core_only$sequence)

both_panels <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                          sheet = "Primer Overlap",
                          range = "L2:O357",
                          col_names = c("chromosome", "coordinates", "sequence",
                                        "gene"),
                          col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "common to both 44038Z-11379 and 17500Z-950",
         text = "Both")

all_primers <- rbind(pan_solid_only, core_only, both_panels) |> 
  mutate(gene_clean = case_when(
    
    gene == "ERBB2, MIR4728" ~"ERBB2",
    gene == "EGFR, EGFR-AS1" ~"EGFR",
    TRUE ~gene)) 

primer_plot <- all_primers |> 
  filter(gene_clean %in% c("ERBB2", "EGFR", 
                           "MYC", "MET", "ARID1A", "SUFU")) |> 
  ggplot(aes(x = text, y = , fill = text)) +
  geom_bar() +
  theme(legend.title = element_blank()) +
  facet_wrap(~gene_clean) +
  labs(x = "", y = "Number of primers", 
       title = "EGFR, ERBB2 and MET share primers between Pan Solid and Core")

primer_plot

primer_table <- all_primers |> 
  filter(gene %in% c("ERBB2", "EGFR", "MET")) |>
  filter(text != "Core only") |> 
  group_by(gene_clean, text) |> 
  summarise(total = n()) |> 
  mutate(prop = round(total/sum(total) * 100, 1)) |> 
  ungroup() |> 
  pivot_wider(names_from = c(text),
              values_from = c(total, prop)) |> 
  arrange(desc(total_Both))

primer_table_formatted <- primer_table |> 
  rename(Gene = gene_clean,
         "Primers shared with Core panel" = total_Both,
         "Primers shared with Core panel (%)" = prop_Both,
         "Primers unique to PanSolid" = "total_PanSolid only",
         "Primers unique to PanSolid (%)" = "prop_PanSolid only") |> 
  select(Gene, "Primers shared with Core panel",
         "Primers shared with Core panel (%)",
         "Primers unique to PanSolid",
         "Primers unique to PanSolid (%)")

knitr::kable(primer_table_formatted)

export_timestamp(primer_table_formatted)

```

## Results

I've taken the PanSolid CLCL results from the output of the CLC pipeline on the "coarse" setting. If an output Excel had a CNV call for a particular gene, I classified that as an amplification, without any filtering on coordinates or fold change.

```{r}
#| label: load-results
#| include: FALSE

coarse_tab <- "Oncogenes (Amplified) Coars..."
fine_tab <- "Oncogenes (Amplified) Fine-..."

datapath <- "S:/central shared/Genetics/NGS/Bioinformatics/1_Pan-solid-Cancer/CNV/00_Amplifications_Fine_vs_Coarse/"
negatives_path <- str_c(datapath, "Negatives/")

all_files <- flatten(list(
  
  list.files(str_c(datapath, "CNS_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M1_CRC_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M3_BREAST_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M4_LUNG_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "CNS_PS/"), full.names = TRUE),

  list.files(str_c(negatives_path, "M1_CRC_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "M3_BREAST_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "M4_LUNG_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "SchwannCNS_PS/"), full.names = TRUE)))

filename_regex <- regex(
  r"[
  (WS\d{6})             # Worksheet number
  _
  (\d{8})               # Sample number
  (a_|b_|c_|_)
  ([A-z]+)              # Patient name
  (.xlsx|_.+)
  ]",
  comments = TRUE
)

get_gene_result <- function(df, gene_name) {
  
  if (ncol(df) == 0) {
    
    output <- "No call"
    
  }
  
  if (ncol(df) > 1) {
    
    x <- df |> 
    filter(gene == gene_name)
    
    output <- case_when(
      nrow(x) < 1 ~"No call",
      nrow(x) >= 1 ~"Amplification")
    
  }
  
  return(output)
  
}

summarise_results <- function(file, input_sheet) {
  
  results <- read_excel(path = file,
                        sheet = input_sheet) |> 
    janitor::clean_names()
  
  sample_id <- str_extract(file, filename_regex,
                           group = 2)
  
  qualifier <- str_extract(file, filename_regex,
                           group = 3)
  
  patient_name <- str_extract(file, filename_regex,
                           group = 4)
  
  egfr_result <- get_gene_result(df = results, gene_name = "EGFR")
  
  erbb2_result <- get_gene_result(df = results, gene_name = "ERBB2")

  met_result <- get_gene_result(df = results, gene_name = "MET")

  summary <- tribble(
  
    ~gene, ~result,
    "EGFR", egfr_result,
    "ERBB2", erbb2_result,
    "MET", met_result
  ) |> 
    mutate(suffix = qualifier,
           sample = sample_id,
           name = patient_name)
  
  return(summary)
  
}

collated_coarse <- all_files |>
  map(\(all_files) summarise_results(
    file = all_files,
    input_sheet = coarse_tab
  )) |>
  list_rbind() |> 
  filter(suffix == "_")

```

```{r}
#| label: sample-extractions
#| echo: FALSE

extraction_methods <- tbl(dbi_con, dbplyr::in_catalog(catalog = "MolecularDB",
                    schema = "dbo",
                    table = "MOL_ExtractionMethods")) |> 
  # Have to remove large columns to avoid Invalid Descriptor Index error
  select(-c(Checks, Reagents)) |> 
  collect()

extraction_tbl <- tbl(dbi_con, dbplyr::in_catalog(catalog = "MolecularDB",
                    schema = "dbo",
                    table = "MOL_Extractions"))

extraction_batch_tbl <- tbl(dbi_con, dbplyr::in_catalog(catalog = "MolecularDB",
                    schema = "dbo",
                    table = "MOL_ExtractionBatches"))

samples_tested <- unique(collated_coarse$sample)

extraction_batches <- extraction_tbl |> 
  filter(LabNo %in% samples_tested) |> 
  collect()

batches <- unique(extraction_batches$ExtractionBatchFK)

extraction_batch_info <- extraction_batch_tbl |> 
  filter(ExtractionBatchId %in% batches) |> 
  # Remove DNA dilutions
  filter(ExtractionMethodFK != 11) |> 
  collect() |> 
  left_join(extraction_methods, join_by(ExtractionMethodFK == ExtractionMethodId))

extraction_batch_table <- extraction_batch_info |> 
  count(MethodName)

knitr::kable(extraction_batch_table)

```

```{r}
#| label: sample-types
#| echo: FALSE

sample_tbl <- tbl(dbi_con, dbplyr::in_catalog(catalog = "MolecularDB",
                    schema = "dbo",
                    table = "Samples"))

tissue_types <- tbl(dbi_con, dbplyr::in_catalog(catalog = "MolecularDB",
                    schema = "dbo",
                    table = "TissueTypes")) |> 
  collect() |> 
  janitor::clean_names()

sample_info <- sample_tbl |> 
  select(-c(StatusComment, COMMENTS, ConsultantAddress, ADDRESS1)) |> 
  filter(LABNO %in% samples_tested) |> 
  collect() |> 
  janitor::clean_names() |> 
  mutate(tissue = as.numeric(tissue)) |> 
  left_join(tissue_types, join_by(tissue == tissue_type_id))

sample_type_summary <- sample_info |> 
  count(tissue_type) |> 
  arrange(desc(n))

knitr::kable(sample_type_summary)

```

In total there are **`r length(all_files)`** CLC outputs for **`r length(unique(collated_coarse$sample))`** samples tested. I have excluded replicates of samples demarcated with a, b and c suffixes.

Every CNV call has a fold-change of at least 2.5, which is a copy number of at least 5. So treating every call as an amplification seems to be a fair assumption.

```{r}
#| label: load-calls
#| include: FALSE

read_clc_excel <- function(file, input_sheet) {
  
  sample_id <- str_extract(file, filename_regex,
                           group = 2)
  
  patient_name <- str_extract(file, filename_regex,
                           group = 4)
  
  results <- read_excel(path = file,
                        sheet = input_sheet) |> 
    janitor::clean_names() |> 
    mutate(sample = sample_id,
           patient = patient_name)
  
  return(results)
  
}

coarse_calls <- all_files |>
  map(\(all_files) read_clc_excel(
    file = all_files,
    input_sheet = coarse_tab
  )) |>
  list_rbind() |> 
  mutate(setting = "coarse")  

fine_calls <- all_files |>
  map(\(all_files) read_clc_excel(
    file = all_files,
    input_sheet = fine_tab
  )) |>
  list_rbind() |> 
  mutate(setting = "fine")

all_calls <- rbind(coarse_calls, fine_calls)

```

```{r}
#| include: FALSE
all_calls |> 
  filter(setting == "coarse") |> 
  ggplot(aes(x = reorder(sample, fold_change_adjusted), y = fold_change_adjusted)) +
  geom_jitter(aes(colour = gene))

```

For the Core panel, I've directly queried DLMS and extracted the CNV results from the free-type "Genotype" field.

```{r}
#| label: core-results
#| include: FALSE

dbi_con <- DBI::dbConnect(
  drv = odbc::odbc(),
  dsn = "moldb")

results_tbl <- tbl(dbi_con, 
                   dbplyr::in_catalog(
                     catalog = "MolecularDB",
                     schema = "dbo",
                     table = "ResultsAccess"))

sample_ids <- unique(collated_coarse$sample)

core_result_info <- results_tbl |> 
  select(LABNO, TEST, TESTTYPE, Genotype, Genotype2, GENOCOMM) |> 
  filter(LABNO %in% sample_ids) |> 
  collect() |> 
  filter(TEST %in% grep(pattern = "Q.{2,4}seq.+core", x = TEST, ignore.case = TRUE,
                        value = TRUE)) |> 
  extract_cnv_calls() |> 
  mutate(core_result = ifelse(!is.na(target_gene_dq), "Amplification", "")) |> 
  filter(!duplicated(LABNO))

joined <- collated_coarse |> 
  filter(sample %in% core_result_info$LABNO) |> 
  left_join(core_result_info |> 
              select(LABNO, target_gene, core_result),
            join_by(sample == LABNO, gene == target_gene)) |> 
  mutate(core_result = ifelse(is.na(core_result), "No call", core_result),
         
         outcome = case_when(
           
           result == "Amplification" & core_result  == "Amplification" ~"true positive",
           
           result == "No call" & core_result  == "No call" ~"true negative",
           
           result == "Amplification" & core_result  == "No call" ~"false positive",
           
           result == "No call" & core_result  == "Amplification" ~"false negative",

           TRUE ~"no match"
           
         ))

draw_confusion_matrix <- function(input_gene) {
  
  x <- joined |> 
    filter(gene == input_gene)
  
  true_positives <- nrow(x[x$outcome == "true positive", ])
  
  true_negatives <- nrow(x[x$outcome == "true negative", ])
  
  false_positives <- nrow(x[x$outcome == "false positive", ])
  
  false_negatives <- nrow(x[x$outcome == "false negative", ])
  
  confusion_matrix <- tribble(
      ~"",      ~"PanSolid CLC +",      ~"PanSolid CLC -", 
      "Core+",  true_positives,         false_negatives,  
      "Core-",  false_positives,        true_negatives
      )
  
  return(confusion_matrix)
  
}

egfr_conf <- draw_confusion_matrix("EGFR")

erbb2_conf <- draw_confusion_matrix("ERBB2")

met_conf <- draw_confusion_matrix("MET")

```

## EGFR Results

```{r}
#| echo: FALSE
knitr::kable(egfr_conf)

```

## ERBB2 Results

```{r}
#| echo: FALSE
knitr::kable(erbb2_conf)

```

## MET Results

```{r}
#| echo: FALSE
knitr::kable(met_conf)

```

```{r}

all_calls |> 
  filter(name %in% c("EGFR", "ERBB2", "MET")) |> 
  ggplot(aes(x = reorder(sample, cnv_region_length), y = cnv_region_length)) +
  geom_point() +
  theme(axis.text.x = element_text(angle = 90)) +
  facet_wrap(~setting)
  
```



