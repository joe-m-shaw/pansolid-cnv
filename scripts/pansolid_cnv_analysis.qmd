---
title: "PanSolid CNV Analysis"
author: "Joe Shaw"
date: "`r Sys.Date()`"
format: pdf
editor: visual
---

## Introduction

This Quarto document is a notebook for organising analysis of somatic CNVs from a CLC Genomics Workbench pipeline (Qiagen).

The code to generate this document is publicly available on [my Github](https://github.com/joeshaw824/pansolid_cnv_validation).

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(readxl)
library(here)
library(odbc)
library(DBI)
library(dbplyr)
library(ggpubr)

source(here::here("functions/cnv_functions.R"))

```

## Primer Overlap Between Core and PanSolid

Primer spreadsheets were provided by Qiagen. There is an overlap between the primers used for each panel, which means that using Core panel as an orthogonal method for validating the PanSolid panel is not ideal.

```{r}
#| label: primers
#| echo: FALSE

pan_solid_only <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                             sheet = "Primer Overlap",
                             range = "A2:D11024",
                             col_names = c("chromosome", "coordinates", "sequence",
                                           "gene"),
                             col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 44038Z-11379",
         text = "PanSolid only")

core_only <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                        sheet = "Primer Overlap",
                        range = "G2:J595",
                        col_names = c("chromosome", "coordinates", "sequence",
                                      "gene"),
                        col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 17500Z-950",
         text = "Core only")

stopifnot(intersect(pan_solid_only$sequence, core_only$sequence) == 0)

both_panels <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                          sheet = "Primer Overlap",
                          range = "L2:O357",
                          col_names = c("chromosome", "coordinates", "sequence",
                                        "gene"),
                          col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "common to both 44038Z-11379 and 17500Z-950",
         text = "Both")

all_primers <- rbind(pan_solid_only, core_only, both_panels) |> 
  mutate(gene_clean = case_when(
    
    gene == "ERBB2, MIR4728" ~"ERBB2",
    gene == "EGFR, EGFR-AS1" ~"EGFR",
    TRUE ~gene)) 

primer_plot <- all_primers |> 
  filter(gene_clean %in% c("ERBB2", "EGFR", 
                           "MYC", "MET", "ARID1A", "SUFU")) |> 
  ggplot(aes(x = text, y = , fill = text)) +
  geom_bar() +
  theme_bw() +
  theme(legend.title = element_blank()) +
  facet_wrap(~gene_clean) +
  labs(x = "", y = "Number of primers")

primer_plot

primer_table <- all_primers |> 
  filter(gene %in% c("ERBB2", "EGFR", "MET")) |>
  filter(text != "Core only") |> 
  group_by(gene_clean, text) |> 
  summarise(total = n(), .groups = "drop_last") |> 
  mutate(prop = round(total/sum(total) * 100, 1)) |> 
  ungroup() |> 
  pivot_wider(names_from = c(text),
              values_from = c(total, prop)) |> 
  arrange(desc(total_Both))

primer_table_formatted <- primer_table |> 
  rename(Gene = gene_clean,
         "Primers shared with Core panel" = total_Both,
         "Primers shared with Core panel (%)" = prop_Both,
         "Primers unique to PanSolid" = "total_PanSolid only",
         "Primers unique to PanSolid (%)" = "prop_PanSolid only") |> 
  select(Gene, "Primers shared with Core panel",
         "Primers shared with Core panel (%)",
         "Primers unique to PanSolid",
         "Primers unique to PanSolid (%)")

knitr::kable(primer_table_formatted)

```

```{r}
#| label: load-results
#| include: FALSE

coarse_tab <- "Oncogenes (Amplified) Coars..."
fine_tab <- "Oncogenes (Amplified) Fine-..."

datapath <- "S:/central shared/Genetics/NGS/Bioinformatics/1_Pan-solid-Cancer/CNV/00_Amplifications_Fine_vs_Coarse/"

negatives_path <- str_c(datapath, "Negatives/")

all_files <- flatten(list(
  
  list.files(str_c(datapath, "CNS_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M1_CRC_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M3_BREAST_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M4_LUNG_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "PANSOLID/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "CNS_PS/"), full.names = TRUE),

  list.files(str_c(negatives_path, "M1_CRC_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "M3_BREAST_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "M4_LUNG_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "SchwannCNS_PS/"), full.names = TRUE)))

collated_coarse <- all_files |>
  map(\(all_files) summarise_results(
    file = all_files,
    input_sheet = coarse_tab
  )) |>
  list_rbind()

collated_coarse_mod <- collated_coarse |> 
  filter(suffix %in% c("_", "a_")) |> 
  distinct() |> 
  # Remove one sample tested twice with a_ and _ suffix
  filter(sample_suffix != "21039327a_")

```

## Samples

Here are the sample details extracted from DLMS.

```{r}
#| label: sample-extractions
#| echo: FALSE

samples_tested <- unique(collated_coarse_mod$sample)

sample_extraction <- get_extraction_method(samples_tested)

extraction_summary <- sample_extraction |> 
  rename(extraction_method = MethodName) |> 
  count(extraction_method)

knitr::kable(extraction_summary)

```

```{r}
#| label: sample-types
#| echo: FALSE

sample_types <- get_sample_tissue(samples_tested)

sample_type_summary <- sample_types |> 
  count(tissue_type) |> 
  arrange(desc(n))

knitr::kable(sample_type_summary)

```

## Results

I've used the Excel outputs from the CLC pipeline as my starting data. If an output Excel had a CNV call for a particular gene, I classified that as an amplification, without any filtering on coordinates or fold change.

One thing that makes it slightly difficult is that if no CNV is present for a gene, there are no rows in the Excel. This means I've had to infer normal results from the absence of CNV calls.

In total there are **`r length(all_files)`** CLC outputs for **`r length(unique(collated_coarse_mod$sample))`** samples tested. I have excluded replicates of samples demarcated with b and c suffixes, and samples tested on more than one worksheet.

Every CNV call has a fold-change of at least 2.5, which is a copy number of at least 5. So treating every call as an amplification seems to be a fair assumption.

```{r}
#| label: load-calls
#| include: FALSE

coarse_calls <- all_files |>
  map(\(all_files) read_clc_excel(
    file = all_files,
    input_sheet = coarse_tab
  )) |>
  list_rbind() |> 
  mutate(setting = "coarse")  

fine_calls <- all_files |>
  map(\(all_files) read_clc_excel(
    file = all_files,
    input_sheet = fine_tab
  )) |>
  list_rbind() |> 
  mutate(setting = "fine")

all_calls <- rbind(coarse_calls, fine_calls) |>
  extract_cnv_coordinates()

```

Amplifications were called in **`r length(unique(all_calls$gene))`** genes, with a wide spread of fold changes. For the analysis in this document I've only focussed on EGFR, ERBB2 and MET, because these genes have results from the Core panel on DLMS.

Amplifications were called on both "coarse" and "fine" settings, which are the "graining level" used by the pipeline (the degree of smoothing that is applied to the data). "Fine" will return more calls per region, whilst "coarse" tends to merge multiple calls if they are close together.

### Coarse results

```{r}
#| label: fold-change-spread
#| echo: FALSE

all_calls_copy_number <- all_calls |> 
  # fold change = case coverage / baseline coverage
  mutate(copy_number = fold_change_adjusted * 2) 

fc_plot <- all_calls_copy_number |> 
  ggplot(aes(x = reorder(sample_id, copy_number), y = copy_number)) +
  geom_point(aes(colour = gene), alpha = 0.5, size = 3) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "", title = "Copy numbers for CNV calls",
       subtitle = "Dashed line at 5") +
  geom_hline(yintercept = 5, linetype = "dashed") +
  facet_wrap(~setting)

coarse_gene_summary <- coarse_calls |> 
  mutate(sample_id_gene = str_c(sample_id, "_", gene)) |> 
  filter(!duplicated(sample_id_gene)) |> 
  group_by(gene) |> 
  summarise(
    amplifications = n(),
    max_dosage = round(max(fold_change_adjusted),1),
    median_dosage = round(median(fold_change_adjusted), 1),
    min_dosage = round(min(fold_change_adjusted),1)) |> 
  arrange(desc(amplifications))

knitr::kable(coarse_gene_summary)

```

## Coarse vs Fine

There were no cases for EGFR, ERBB2 or MET where an amplification was called only on one graining setting, so using the "coarse" setting seems sensible, as it reduces the number of calls per amplification.

```{r}
#| label: fine-vs-coarse
#| include: FALSE

egfr_p <- plot_coarse_v_fine("EGFR")

erbb2_p <- plot_coarse_v_fine("ERBB2")

met_p <- plot_coarse_v_fine("MET")

ggarrange(egfr_p, erbb2_p, met_p, ncol = 1)

```

## Comparison to the Core Panel

For the Core panel, I've directly queried DLMS and extracted the CNV results from the free-type "Genotype" field. Whilst it is checked, it is still a free type field so some data wrangling and regular expressions are required (someone misspelled ERBB2 as ERRB2 which took me a while to realise ...).

```{r}
#| label: core-results
#| include: FALSE

results_tbl <- tbl(dbi_con, 
                   dbplyr::in_catalog(
                     catalog = "MolecularDB",
                     schema = "dbo",
                     table = "ResultsAccess"))

sample_ids <- unique(collated_coarse_mod$sample)

core_result_info <- results_tbl |> 
  select(LABNO, TEST, TESTTYPE, Genotype, Genotype2, GENOCOMM) |> 
  filter(LABNO %in% sample_ids) |> 
  collect() |> 
  filter(TEST %in% grep(pattern = "Q.{2,4}seq.+core", x = TEST, ignore.case = TRUE,
                        value = TRUE)) |> 
  mutate(Genotype = case_when(
    
    # Sample has "EGFR" instead of "ERBB2" written on DLMS - confirmed on report
    LABNO == 23022389 ~"ERBB2 amplification detected (Mean DQ 25x)",
    
    # Sample has "ERRB2" instead of "ERBB2" written
    LABNO == 21015264 ~"No mutation identified; ERBB2 amplification detected (mean DQ 60.41x)",
    
    TRUE ~Genotype)) |> 
  
  filter(!duplicated(LABNO))
  
core_cnv_calls <- rbind(extract_cnv_calls(df = core_result_info, input_gene = "EGFR"),
                        extract_cnv_calls(df = core_result_info, input_gene = "ERBB2"), 
                        extract_cnv_calls(df = core_result_info, input_gene = "MET")) 
    
joined <- collated_coarse_mod |> 
  filter(sample %in% core_result_info$LABNO) |> 
  left_join(core_cnv_calls,
            join_by(sample == LABNO, gene == gene_searched)) |> 
  mutate(outcome = case_when(
           
           result == "Amplification" & core_result  == "Amplification" ~"true positive",
           
           result == "No call" & core_result  == "No call" ~"true negative",
           
           result == "Amplification" & core_result  == "No call" ~"false positive",
           
           result == "No call" & core_result  == "Amplification" ~"false negative",

           TRUE ~"no match"
           
         ))

egfr_conf <- draw_confusion_matrix("EGFR")

erbb2_conf <- draw_confusion_matrix("ERBB2")

met_conf <- draw_confusion_matrix("MET")

```

## EGFR Results

Here are the results for EGFR for samples tested with PanSolid CLC (coarse) versus Core with the Dosage Quotient method.

```{r}
#| label: egfr
#| echo: FALSE
knitr::kable(egfr_conf)

```

## ERBB2 Results

```{r}
#| label: erbb2
#| echo: FALSE
knitr::kable(erbb2_conf)

```

## MET Results

```{r}
#| label: met
#| echo: FALSE
knitr::kable(met_conf)

```

There is 1 sample (23038464) where a MET amplification was detected on PanSolid but not on Core. The Core worksheet for this sample was WS134162, and the mean dosage quotient for MET was 3.86. The discrepancy may be due to the higher number of primers on PanSolid for MET versus Core.

In the original validation of the Dosage Quotient method, no samples were included which had MET amplifications detected by a different method.

## CNV Coordinates

```{r}
#| label: cnv-coordinates
#| include: FALSE

coord_long <- all_calls |> 
  select(worksheet, sample_id, qualifier, sample_id_suffix, patient_name,
         sample_id_worksheet, gene, fold_change_adjusted, setting, cnv_start, cnv_end) |> 
  pivot_longer(cols = c(cnv_start, cnv_end),
               names_to = "category",
               values_to = "coordinate")

```

We can examine the CNV calls in terms of genomic coordinates by using line graphs for each gene. Ideally we want something like this (or a simple table of results) as the pipeline output.

```{r}
#| label: egfr-plot
#| echo: FALSE

primer_location <- 140734686

draw_cnv_plot(df = coord_long, input_gene = "EGFR", input_setting = "coarse",
              interval = 1000000)

```

The x axis for EGFR is skewed by one sample with a large CNV, so we can remove this sample to zoom in on the gene region. When we zoom in we can see that some samples have multiple CNV calls at different fold changes which span the width of the gene.

```{r}
#| label: egfr-plot-zoom
#| echo: FALSE

draw_cnv_plot()

```

Here's the same plot for ERBB2 and then a zoomed in version. Interestingly, when we zoom in we can see that not all the calls cover the full gene region.

```{r}
#| label: erbb2-plot
#| echo: FALSE

draw_cnv_plot(df = coord_long, input_gene = "ERBB2", input_setting = "coarse", 
              interval = 50000)

erbb2_exon13 <- 39716373
erbb2_exon26 <- 39727375

draw_cnv_plot(df = coord_long |> 
                filter(!sample_id %in% c(22034556, 23001095, 
                                      21019092, 23022389, 23055093)), 
              input_gene = "ERBB2", input_setting = "coarse",
              interval = 10000,
              gene_min = erbb2_exon13,
              gene_max = erbb2_exon26,
              buffer = 10000) +
  labs(subtitle = "Dashed lines show exons 13 and 26 - ddPCR assay targets")

```

And finally the one MET call, which is very large.

```{r}
#| label: met-plot
#| echo: FALSE

draw_cnv_plot(df = coord_long, input_gene = "MET", input_setting = "coarse",
              interval = 1000000) +
  geom_vline(xintercept = primer_location,
             linetype = "dashed", colour = "red")

```

## BRAF and MYC results

Here are the CNV calls for BRAF and MYC.

```{r}
#| label: braf-myc
#| echo: FALSE

draw_cnv_plot(df = coord_long, input_gene = "BRAF", input_setting = "coarse",
              interval = 1000000) +
  geom_vline(xintercept = primer_location,
             linetype = "dashed", colour = "red")

draw_cnv_plot(df = coord_long, input_gene = "MYC", input_setting = "coarse",
              interval = 10000000) +
  geom_vline(xintercept = primer_location,
             linetype = "dashed", colour = "red")

```

## Conclusions

-   The CLC pipeline is able to identify amplifications in EGFR, ERBB2 and MET and has close agreement with the Dosage Quotient method, however there is one discrepant result in MET.

-   A truly orthogonal method is needed to confirm sample results, as Core and PanSolid share primers between them.

-   We need to consider how the results will be viewed by scientists, and make this process as simple as possible.

{{< pagebreak >}}

## Repeatability

```{r}
#| label: repeatability
#| include: FALSE

file_table <- all_files |>
  map(\(all_files) filename_to_df(
    file = all_files)) |>
  list_rbind()

repeats <- file_table |> 
  filter(duplicated(sample_id, fromLast = TRUE) | 
           duplicated(sample_id, fromLast = FALSE)) |> 
  arrange(sample_id)

repeat_samples <- unique(repeats$sample_id)

```

### Intra-run repeats

2 samples have been repeated in triplicate on a worksheet.

### Inter-run repeats

3 samples have been repeated on more than one worksheet.

We can plot the results to visually assess how similar the results are between repeats.

```{r}
#| label: repeat-1
#| echo: FALSE
#| fig-height: 10


draw_repeat_plot(df = coord_long,
                 input_sample = 21011525,
                 input_setting = "coarse",
                 input_gene = "ERBB2",
                 input_ymax = 30)

```

{{< pagebreak >}}

```{r, figure.height = 18}
#| label: repeat-2
#| echo: FALSE
#| fig-height: 10

draw_repeat_plot(df = coord_long,
                 input_sample = 21015264,
                 input_setting = "coarse",
                 input_gene = "ERBB2")

```

{{< pagebreak >}}

```{r, figure.height = 18}
#| label: repeat-3
#| echo: FALSE
#| fig-height: 10

draw_repeat_plot(df = coord_long,
                 input_sample = 21039327,
                 input_setting = "coarse",
                 input_gene = "ERBB2",
                 input_ymax = 20)

```

## Primer Coordinates

We can also add on the coordinates of PanSolid primers to the plots.

On this plot we can see that the call for some samples expands from ERBB2 upstream to the CDK12 gene, which is where the next set of primers is concentrated.

```{r}
#| label: erbb2-primers
#| echo: FALSE

ggplot(df_mod, aes(x = coordinate, y = fold_change_adjusted)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
  geom_line(linewidth = 2, colour = safe_red) +
  geom_point(data = primers_for_plot, colour = safe_blue) +
  geom_vline(xintercept = erbb2_min, linetype = "dashed") +
  geom_vline(xintercept = erbb2_max, linetype = "dashed") +
  facet_wrap(~sample_id) +
  ylim(0, 70)  +
  labs(title = "ERBB2 CNVs with primers in blue")

```

## Controls

```{r}
#| label: controls
#| echo: FALSE

control_regex <- regex(
  r"[
  (WS\d{6})             # Worksheet number
  _
  (\d{8})               # Sample number
  _.+
  ]",
  comments = TRUE
)

clc_controls <- read_excel(path = here::here("data/clc_controls.xlsx")) |> 
  mutate(sample_id = str_extract(string = control, pattern = control_regex,
                                 group = 2))

control_ids <- clc_controls$sample_id

control_info <- sample_tbl |> 
  filter(LABNO %in% control_ids) |> 
  select(LABNO, FIRSTNAME, SURNAME, CONCENTRATION) |> 
  collect() |> 
  arrange(LABNO)


write.csv(control_info, here::here("outputs/controls_for_volume_check.csv"),
          row.names = FALSE)


```

There are **`r length(control_ids)`** control samples used by the CLC pipeline.

Querying DLMS shows that they are the correct sample type and extraction method.

```{r}
#| label: control-tissue
#| echo: FALSE

control_tissue <- get_sample_tissue(control_ids) |>  
  count(tissue_type)

knitr::kable(control_tissue)

```

```{r}
#| label: control-extraction
#| echo: FALSE

control_extraction <- get_extraction_method(control_ids) |>  
  count(MethodName)

knitr::kable(control_extraction)

```

## Coverage

```{r}
#| label: control-coverage
#| echo: FALSE
#| message: FALSE

control_files <- list.files(here::here("data/control_data/"),
                            full.names = TRUE)

control_coverage <- control_files |> 
  map(\(control_files) get_control_coverage(
    file = control_files)) |> 
  list_rbind()

```

```{r}
#| label: coverage
#| echo: FALSE
#| message: FALSE

qc_data <- all_files |>
  map(\(all_files) read_summary_tab(
    file = all_files)) |>
  list_rbind()

for_plot <- rbind(
  
  qc_data |> 
    select(sample_id_worksheet, median_coverage) |> 
    mutate(type = "patient"),
  
  control_coverage |> 
    select(sample_id_worksheet, median_coverage) |> 
    mutate(type = "control")
)

ggplot(for_plot, aes(x = type, 
                    y = median_coverage)) +
  geom_jitter() +
  theme_bw() +
  labs(x = "")

```

## Seraseq controls

```{r}
#| label: seraseq
#| echo: FALSE

seraseq_names <- grep(pattern = "seraseq", x = all_calls$patient_name,
                      ignore.case = TRUE, value = TRUE)

seraseq_erbb2 <- draw_cnv_plot(df = coord_long |> 
                filter(patient_name %in% seraseq_names), 
              input_gene = "ERBB2", 
              input_setting = "fine",
              interval = 50000,
              ymax = 15,
              gene_min = erbb2_min,
              gene_max = erbb2_max,
              buffer = 10000)

seraseq_egfr <- draw_cnv_plot(df = coord_long |> 
                filter(patient_name %in% seraseq_names), 
              input_gene = "EGFR", 
              input_setting = "fine",
              interval = 50000,
              ymax = 15,
              gene_min = egfr_min,
              gene_max = egfr_max,
              buffer = 200000)

seraseq_met <- draw_cnv_plot(df = coord_long |> 
                filter(patient_name %in% seraseq_names), 
              input_gene = "MET", 
              input_setting = "coarse",
              interval = 50000,
              ymax = 15,
              gene_min = met_min,
              gene_max = met_max,
              buffer = 200000)

seraseq_myc <- draw_cnv_plot(df = coord_long |> 
                filter(patient_name %in% seraseq_names), 
              input_gene = "MYC", 
              input_setting = "fine",
              interval = 10000,
              ymax = 15,
              gene_min = myc_min,
              gene_max = myc_max,
              buffer = 50000)

seraseq_braf <- draw_cnv_plot(df = coord_long |> 
                filter(patient_name %in% seraseq_names), 
              input_gene = "BRAF", 
              input_setting = "fine",
              interval = 50000,
              ymax = 15,
              gene_min = braf_min,
              gene_max = braf_max,
              buffer = 200000)

coarse_calls |> 
  filter(patient_name %in% seraseq_names) |>
  select(worksheet, sample_id, patient_name, gene, fold_change_adjusted)


ggarrange(seraseq_erbb2, seraseq_egfr, seraseq_met,
          ncol = 1)


```

## EGFR Transcript III

```{r}

egfr_exon2_start <- 55142286

egfr_exon7_end <- 55154158

draw_cnv_plot(df = coord_long |> 
                filter(sample_id == 19032386), input_gene = "EGFR", input_setting = "fine",
              gene_min = egfr_exon2_start,
              gene_max = egfr_exon7_end) +
  labs(subtitle = "Dotted lines show exon 2 to 7 region")

draw_cnv_plot(df = coord_long |> 
                filter(sample_id %in% c(19032386,
                                        23041898)), input_gene = "EGFR", input_setting = "fine",
              gene_min = egfr_exon2_start,
              gene_max = egfr_exon7_end) +
  labs(subtitle = "Dotted lines show exon 2 to 7 region")


```
