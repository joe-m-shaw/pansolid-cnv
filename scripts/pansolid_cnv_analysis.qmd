---
title: "PanSolid CNV Analysis"
author: "Joe Shaw"
date: today
date-format: "DD/MM/YYYY"
format: pdf
editor: visual
---

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(readxl)
library(here)
library(odbc)
library(DBI)
library(dbplyr)
library(ggpubr)

source(here::here("functions/cnv_functions.R"))

```

```{r}
#| label: primers
#| include: FALSE
#| eval: FALSE

pan_solid_only <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                             sheet = "Primer Overlap",
                             range = "A2:D11024",
                             col_names = c("chromosome", "coordinates", "sequence",
                                           "gene"),
                             col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 44038Z-11379",
         text = "PanSolid only")

core_only <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                        sheet = "Primer Overlap",
                        range = "G2:J595",
                        col_names = c("chromosome", "coordinates", "sequence",
                                      "gene"),
                        col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "Unique to 17500Z-950",
         text = "Core only")

stopifnot(intersect(pan_solid_only$sequence, core_only$sequence) == 0)

both_panels <- read_excel(here::here("data/Primer and Gene Comparison.xlsx"),
                          sheet = "Primer Overlap",
                          range = "L2:O357",
                          col_names = c("chromosome", "coordinates", "sequence",
                                        "gene"),
                          col_types = c("text", "text", "text", "text")) |> 
  mutate(category = "common to both 44038Z-11379 and 17500Z-950",
         text = "Both")

all_primers <- rbind(pan_solid_only, core_only, both_panels) |> 
  mutate(gene_clean = case_when(
    
    gene == "ERBB2, MIR4728" ~"ERBB2",
    gene == "EGFR, EGFR-AS1" ~"EGFR",
    TRUE ~gene)) 

primer_plot <- all_primers |> 
  filter(gene_clean %in% c("ERBB2", "EGFR", 
                           "MYC", "MET", "ARID1A", "SUFU")) |> 
  ggplot(aes(x = text, y = , fill = text)) +
  geom_bar() +
  theme_bw() +
  theme(legend.title = element_blank()) +
  facet_wrap(~gene_clean) +
  labs(x = "", y = "Number of primers")

primer_plot

primer_table <- all_primers |> 
  filter(gene %in% c("ERBB2", "EGFR", "MET")) |>
  filter(text != "Core only") |> 
  group_by(gene_clean, text) |> 
  summarise(total = n(), .groups = "drop_last") |> 
  mutate(prop = round(total/sum(total) * 100, 1)) |> 
  ungroup() |> 
  pivot_wider(names_from = c(text),
              values_from = c(total, prop)) |> 
  arrange(desc(total_Both))

primer_table_formatted <- primer_table |> 
  rename(Gene = gene_clean,
         "Primers shared with Core panel" = total_Both,
         "Primers shared with Core panel (%)" = prop_Both,
         "Primers unique to PanSolid" = "total_PanSolid only",
         "Primers unique to PanSolid (%)" = "prop_PanSolid only") |> 
  select(Gene, "Primers shared with Core panel",
         "Primers shared with Core panel (%)",
         "Primers unique to PanSolid",
         "Primers unique to PanSolid (%)")

knitr::kable(primer_table_formatted)

```

```{r}
#| label: load-results
#| include: FALSE

coarse_tab <- "Oncogenes (Amplified) Coars..."
fine_tab <- "Oncogenes (Amplified) Fine-..."

datapath <- "S:/central shared/Genetics/NGS/Bioinformatics/1_Pan-solid-Cancer/CNV/00_Amplifications_Fine_vs_Coarse/"

negatives_path <- str_c(datapath, "Negatives/")

all_files <- flatten(list(
  
  list.files(str_c(datapath, "CNS_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M1_CRC_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M3_BREAST_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "M4_LUNG_PS/"), full.names = TRUE),
  
  list.files(str_c(datapath, "PANSOLID/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "CNS_PS/"), full.names = TRUE),

  list.files(str_c(negatives_path, "M1_CRC_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "M3_BREAST_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "M4_LUNG_PS/"), full.names = TRUE),
  
  list.files(str_c(negatives_path, "SchwannCNS_PS/"), full.names = TRUE)))

collated_coarse <- all_files |>
  map(\(all_files) summarise_results(
    file = all_files,
    input_sheet = coarse_tab
  )) |>
  list_rbind()

collated_coarse_mod <- collated_coarse |> 
  filter(suffix %in% c("_", "a_")) |> 
  distinct() |> 
  # Remove one sample tested twice with a_ and _ suffix
  filter(sample_suffix != "21039327a_")

samples_tested <- unique(collated_coarse_mod$sample)

```

```{r}
#| label: sample-extractions
#| include: FALSE
#| eval: FALSE

sample_extraction <- get_extraction_method(samples_tested)

extraction_summary <- sample_extraction |> 
  rename(extraction_method = MethodName) |> 
  count(extraction_method)

knitr::kable(extraction_summary)

```

```{r}
#| label: sample-types
#| include: FALSE
#| eval: FALSE

sample_types <- get_sample_tissue(samples_tested)

sample_type_summary <- sample_types |> 
  count(tissue_type) |> 
  arrange(desc(n))

knitr::kable(sample_type_summary)

```

```{r}
#| label: discodes
#| include: FALSE

sample_disease_codes <- sample_tbl |> 
  select(LABNO, DISEASE, "DISEASE 2", "DISEASE 3", "DISEASE 4", NGIS) |> 
  filter(LABNO %in% samples_tested) |> 
  collect() |> 
  left_join(discode |> 
              select(discode, disease), join_by(DISEASE == discode))

```

```{r}
#| label: load-calls
#| include: FALSE

coarse_calls <- all_files |>
  map(\(all_files) read_clc_excel(
    file = all_files,
    input_sheet = coarse_tab
  )) |>
  list_rbind() |> 
  mutate(setting = "coarse")  

fine_calls <- all_files |>
  map(\(all_files) read_clc_excel(
    file = all_files,
    input_sheet = fine_tab
  )) |>
  list_rbind() |> 
  mutate(setting = "fine")

all_calls <- rbind(coarse_calls, fine_calls) |>
  extract_cnv_coordinates()


```

```{r}
#| label: load-ddpcr
#| include: FALSE

ws138579 <- read_biorad_csv("WS138579_analysed.csv")

```

## Update (30/01/2024)

- ddPCR assays designed and tested for 3 exons in each of ERBB2, EGFR, BRAF, MET and MYC
- 12/15 assays successful when tested (ddPCR WS138419)
- ERBB2 exon 13 ddPCR performed on 28 samples from PanSolid control cohort, plus 23 patients with PanSolid results
- SeraCare controls tested via PanSolid

{{< pagebreak >}}

## ERBB2 ddPCR Results

Overall, ERBB2 exon 13 ddPCR agrees with the results from PanSolid for 20/23 samples.

ddPCR worksheet: WS138579

Exon 13 was chosen as it lies in the centre of the gene and was within all of the ERBB2 amplification calls made by the CLC pipeline.

```{r}
#| label: ddpcr-vs-pansolid
#| include: FALSE

ws138579_erbb2 <- ws138579 |> 
  filter(target_type == "Ch1Unknown")

erbb2_pansolid <- coarse_calls |> 
  filter(gene == "ERBB2") |> 
  filter(!duplicated(sample_id))

control_regex <- regex(
  r"[
  (WS\d{6})             # Worksheet number
  _
  (\d{8})               # Sample number
  _.+
  ]",
  comments = TRUE
)

clc_controls <- read_excel(path = here::here("data/clc_controls.xlsx")) |> 
  mutate(sample_id = str_extract(string = control, pattern = control_regex,
                                 group = 2))

control_ids <- clc_controls$sample_id

ddpcr_pansolid <- ws138579_erbb2 |> 
  filter(!sample %in% c("C3_5ng", "C3_20ng", "NTC")) |> 
  left_join(erbb2_pansolid, join_by(sample == sample_id)) |> 
  mutate(pansolid_result = case_when(
    
    is.na(fold_change_adjusted) & sample %in% control_ids ~"pansolid normal control",
    
    is.na(fold_change_adjusted) & !sample %in% control_ids ~"pansolid normal result",
    
    !is.na(fold_change_adjusted) ~"pansolid amplification"),
    pansolid_result = factor(pansolid_result, levels = c("pansolid normal control",
                                                         "pansolid normal result",
                                                         "pansolid amplification")))
```


```{r}
#| label: ddpcr-vs-pansolid-plot
#| echo: FALSE

ddpcr_pansolid |> 
  ggplot(aes(x = pansolid_result, y = cnv)) +
  geom_jitter(size = 2, pch = 21, alpha = 0.6, aes(fill = pansolid_result)) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.position = "none") +
  labs(x = "", y = "ddPCR ERBB2 Exon 13 Copy Number",
       title = "ERBB2 Exon 13 ddPCR for samples tested on PanSolid",
       subtitle = "Highest normal control ddPCR copy number is 6") +
  geom_hline(yintercept = 6, linetype = "dashed") +
  scale_y_continuous(limits = c(0, 80), breaks = c(0, 6, 20, 40, 60, 80)) 

```

```{r}
#| label: normal-controls
#| include: FALSE
#| eval: FALSE

ddpcr_pansolid |> 
  filter(pansolid_result == "pansolid normal control") |> 
  ggplot(aes(x = pansolid_result, y = cnv)) +
  geom_boxplot() +
  theme_bw() +
  ylim(0, 8) +
  labs(title = "PanSolid normal controls", y = "ddPCR copy number")

```

3 samples had ERBB2 amplifications detected on PanSolid, but had ERBB2 copy numbers within the range of normal controls when tested on ddPCR.

The ddPCR is comparing the ERBB2 locus (chromosome 17) to the AP3B1 locus (chromosome 5), whilst PanSolid has a more holistic comparison of copy number across the genome. This may explain the discrepant results.

{{< pagebreak >}}

## ddPCR vs PanSolid and Dosage Quotient

The same 3 samples are discrepant between ddPCR and both PanSolid and Core Dosage Quotient - all 3 are at the lower end of the called amplifications, which is reassuring.

```{r}
#| label: fold-change-vs-ddpcr
#| echo: FALSE

discrepant_samples <- c(23001095, 23002258, 23008380)

ggplot(ddpcr_pansolid |> 
  filter(!is.na(fold_change_adjusted)), aes(x = fold_change_adjusted, y = cnv)) +
  geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
  geom_point(size = 3, fill = safe_blue, alpha = 0.8, pch = 21) +
  theme_bw() +
  geom_hline(yintercept = 6, linetype = "dashed") +
  labs(x = "PanSolid Fold Change", y = "ddPCR Copy Number",
         title = "ddPCR versus PanSolid: amplification samples",
         subtitle = "Samples 23001095, 23002258 and 23008380 in red") +
    scale_y_continuous(limits = c(0, 100), breaks = c(0, 6, 20, 40, 60, 80, 100))  +
    scale_x_continuous(limits = c(0, 30), breaks = c(0, 6, 10, 20, 30)) +
  geom_point(data = ddpcr_pansolid |> 
               filter(sample %in% discrepant_samples), size = 3, fill = safe_red,
             pch = 21)

```


```{r}
#| label: coord-long
#| include: FALSE

coord_long <- all_calls |> 
  select(worksheet, sample_id, qualifier, sample_id_suffix, patient_name,
         sample_id_worksheet, gene, fold_change_adjusted, setting, cnv_start, cnv_end) |> 
  pivot_longer(cols = c(cnv_start, cnv_end),
               names_to = "category",
               values_to = "coordinate")

```

```{r}
#| label: erbb2-exon13
#| include: FALSE
#| eval: FALSE

erbb2_exon13 <- 39716373

draw_cnv_plot(df = coord_long |> 
                filter(sample_id %in% ddpcr_pansolid$sample), 
              input_gene = "ERBB2", input_setting = "coarse",
              interval = 10000,
              gene_min = erbb2_min,
              gene_max = erbb2_max,
              buffer = 10000) +
  geom_vline(xintercept = erbb2_exon13, colour = safe_red) +
  theme(axis.text.x = element_blank())

```

```{r}
#| label: core-results
#| include: FALSE

results_tbl <- tbl(dbi_con, 
                   dbplyr::in_catalog(
                     catalog = "MolecularDB",
                     schema = "dbo",
                     table = "ResultsAccess"))

sample_ids <- unique(collated_coarse_mod$sample)

core_result_info <- results_tbl |> 
  select(LABNO, TEST, TESTTYPE, Genotype, Genotype2, GENOCOMM) |> 
  filter(LABNO %in% sample_ids) |> 
  collect() |> 
  filter(TEST %in% grep(pattern = "Q.{2,4}seq.+core", x = TEST, ignore.case = TRUE,
                        value = TRUE)) |> 
  mutate(Genotype = case_when(
    
    # Sample has "EGFR" instead of "ERBB2" written on DLMS - confirmed on report
    LABNO == 23022389 ~"ERBB2 amplification detected (Mean DQ 25x)",
    
    # Sample has "ERRB2" instead of "ERBB2" written
    LABNO == 21015264 ~"No mutation identified; ERBB2 amplification detected (mean DQ 60.41x)",
    
    TRUE ~Genotype)) |> 
  
  filter(!duplicated(LABNO))
  
core_cnv_calls <- rbind(extract_cnv_calls(df = core_result_info, input_gene = "EGFR"),
                        extract_cnv_calls(df = core_result_info, input_gene = "ERBB2"), 
                        extract_cnv_calls(df = core_result_info, input_gene = "MET")) 
    
joined <- collated_coarse_mod |> 
  filter(sample %in% core_result_info$LABNO) |> 
  left_join(core_cnv_calls,
            join_by(sample == LABNO, gene == gene_searched)) |> 
  mutate(outcome = case_when(
           
           result == "Amplification" & core_result  == "Amplification" ~"true positive",
           
           result == "No call" & core_result  == "No call" ~"true negative",
           
           result == "Amplification" & core_result  == "No call" ~"false positive",
           
           result == "No call" & core_result  == "Amplification" ~"false negative",

           TRUE ~"no match"
           
         ))

```

```{r}
#| label: dq-vs-ddpcr
#| echo: FALSE

dq_erbb2 <- core_cnv_calls |> 
  filter(gene_match == "ERBB2")

ddpcr_pansolid_dq <- ddpcr_pansolid |> 
  left_join(dq_erbb2, join_by(sample == LABNO)) |> 
  left_join(sample_disease_codes, join_by(sample == LABNO))

ddpcr_pansolid_dq |> 
  filter(!is.na(gene_dq)) |> 
  ggplot(aes(x = gene_dq, y = cnv)) +
    geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
    geom_point(size = 3, fill = safe_blue, alpha = 0.8, pch = 21) +
    theme_bw() +
    geom_hline(yintercept = 6, linetype = "dashed") +
    #geom_vline(xintercept = 6, linetype = "dashed") +
    labs(x = "Core Dosage Quotient", y = "ddPCR Copy Number",
           title = "ddPCR versus Dosage Quotient: amplification samples",
         subtitle = "Samples 23001095, 23002258 and 23008380 in red") +
  scale_y_continuous(limits = c(0, 100), breaks = c(0, 6, 20, 40, 60, 80, 100)) +
  scale_x_continuous(limits = c(0, 50), breaks = c(0, 6, 10, 20, 30, 40, 50)) +
  geom_point(data = ddpcr_pansolid_dq |> 
               filter(sample %in% discrepant_samples), size = 3, fill = safe_red,
             pch = 21)
 
```

{{< pagebreak >}}

## Disease codes

I've queried DLMS to add the disease codes to the tested samples. 3 of the amplification samples are from non-small cell lung cancer.

```{r}
#| label: disease-codes-plot
#| echo: FALSE

ddpcr_pansolid_dq |> 
  filter(pansolid_result != "pansolid normal control") |> 
  ggplot(aes(x = reorder(sample, cnv), y = cnv)) +
    geom_point(aes(fill = disease), pch = 21, size = 3) +
  theme_bw() +
    theme(axis.text.x = element_blank()) +
    geom_hline(yintercept = 6, linetype = "dashed") +
  labs(x = "Sample", y = "ddPCR ERBB2 exon 13 copy number")

```

{{< pagebreak >}}

```{r}
#| label: egfr
#| include: FALSE
#| eval: FALSE

egfr_conf <- draw_confusion_matrix("EGFR")

knitr::kable(egfr_conf)

```

```{r}
#| label: erbb2
#| include: FALSE
#| eval: FALSE

erbb2_conf <- draw_confusion_matrix("ERBB2")

knitr::kable(erbb2_conf)

```

```{r}
#| label: met
#| include: FALSE
#| eval: FALSE

met_conf <- draw_confusion_matrix("MET")

knitr::kable(met_conf)

```

```{r}
#| label: egfr-plot
#| include: FALSE
#| eval: FALSE

primer_location <- 140734686

draw_cnv_plot(df = coord_long, input_gene = "EGFR", input_setting = "coarse",
              interval = 1000000)

```

```{r}
#| label: egfr-plot-zoom
#| include: FALSE
#| eval: FALSE

draw_cnv_plot()

```

```{r}
#| label: erbb2-plot
#| include: FALSE
#| eval: FALSE

draw_cnv_plot(df = coord_long, input_gene = "ERBB2", input_setting = "coarse", 
              interval = 50000)

```

```{r}
#| label: met-plot
#| include: FALSE
#| eval: FALSE

draw_cnv_plot(df = coord_long, input_gene = "MET", input_setting = "coarse",
              interval = 1000000) +
  geom_vline(xintercept = primer_location,
             linetype = "dashed", colour = "red")

```

```{r}
#| label: braf-myc
#| include: FALSE
#| eval: FALSE

draw_cnv_plot(df = coord_long, input_gene = "BRAF", input_setting = "coarse",
              interval = 1000000) +
  geom_vline(xintercept = primer_location,
             linetype = "dashed", colour = "red")

draw_cnv_plot(df = coord_long, input_gene = "MYC", input_setting = "coarse",
              interval = 10000000) +
  geom_vline(xintercept = primer_location,
             linetype = "dashed", colour = "red")

```

```{r}
#| label: repeatability
#| include: FALSE
#| eval: FALSE

file_table <- all_files |>
  map(\(all_files) filename_to_df(
    file = all_files)) |>
  list_rbind()

repeats <- file_table |> 
  filter(duplicated(sample_id, fromLast = TRUE) | 
           duplicated(sample_id, fromLast = FALSE)) |> 
  arrange(sample_id)

repeat_samples <- unique(repeats$sample_id)

```

```{r}
#| label: repeat-1
#| include: FALSE
#| eval: FALSE
#| fig-height: 10


draw_repeat_plot(df = coord_long,
                 input_sample = 21011525,
                 input_setting = "coarse",
                 input_gene = "ERBB2",
                 input_ymax = 30)

```

```{r, figure.height = 18}
#| label: repeat-2
#| include: FALSE
#| eval: FALSE
#| fig-height: 10

draw_repeat_plot(df = coord_long,
                 input_sample = 21015264,
                 input_setting = "coarse",
                 input_gene = "ERBB2")

```

```{r, figure.height = 18}
#| label: repeat-3
#| include: FALSE
#| eval: FALSE
#| fig-height: 10

draw_repeat_plot(df = coord_long,
                 input_sample = 21039327,
                 input_setting = "coarse",
                 input_gene = "ERBB2",
                 input_ymax = 20)

```

```{r}
#| label: controls
#| include: FALSE
#| eval: FALSE

control_info <- sample_tbl |> 
  filter(LABNO %in% control_ids) |> 
  select(LABNO, FIRSTNAME, SURNAME, CONCENTRATION) |> 
  collect() |> 
  arrange(LABNO)

write.csv(control_info, here::here("outputs/controls_for_volume_check.csv"),
          row.names = FALSE)
```

```{r}
#| label: control-tissue
#| include: FALSE
#| eval: FALSE

control_tissue <- get_sample_tissue(control_ids) |>  
  count(tissue_type)

knitr::kable(control_tissue)

```

```{r}
#| label: control-extraction
#| include: FALSE
#| eval: FALSE

control_extraction <- get_extraction_method(control_ids) |>  
  count(MethodName)

knitr::kable(control_extraction)

```

```{r}
#| label: control-coverage
#| include: FALSE
#| eval: FALSE
#| message: FALSE

control_files <- list.files(here::here("data/control_data/"),
                            full.names = TRUE)

control_coverage <- control_files |> 
  map(\(control_files) get_control_coverage(
    file = control_files)) |> 
  list_rbind()

```

```{r}
#| label: coverage
#| include: FALSE
#| eval: FALSE
#| message: FALSE

qc_data <- all_files |>
  map(\(all_files) read_summary_tab(
    file = all_files)) |>
  list_rbind()

for_plot <- rbind(
  
  qc_data |> 
    select(sample_id_worksheet, median_coverage) |> 
    mutate(type = "patient"),
  
  control_coverage |> 
    select(sample_id_worksheet, median_coverage) |> 
    mutate(type = "control")
)

ggplot(for_plot, aes(x = type, 
                    y = median_coverage)) +
  geom_jitter() +
  theme_bw() +
  labs(x = "")

```

## Seraseq controls

We have run 3 Seraseq controls on PanSolid with 3, 6 and 12 additional gene copies.

```{r}
#| label: seraseq-controls
#| include: FALSE

seraseq_names <- grep(pattern = "seraseq", x = coord_long$patient_name,
                      ignore.case = TRUE, value = TRUE)

seracare_regex <- regex(
  r"[
  CNVMix
  (\d{1,2}(c|C)opiesSERASEQ)
  _.+
  ]",
  comments = TRUE
)

seraseq_results <- coord_long |> 
  filter(patient_name %in% seraseq_names) |> 
  mutate(patient_name = str_extract(string = patient_name,
                                           pattern = seracare_regex,
                                           group = 1),
         patient_name = factor(patient_name, levels = c("3copiesSERASEQ",
                                                        "6CopiesSERASEQ",
                                                        "12CopiesSERASEQ")))

```

### ERBB2

For ERBB2, all controls were detected correctly on the coarse setting. 

```{r}
#| label: seraseq-erbb2
#| echo: FALSE

seraseq_erbb2 <- draw_cnv_plot(df = seraseq_results,
                               input_gene = "ERBB2", 
                                input_setting = "coarse",
                                interval = 50000,
                                ymax = 15,
                                gene_min = erbb2_min,
                                gene_max = erbb2_max,
                                buffer = 10000) +
                    labs(title = "ERBB2 SeraCare controls") +
                    facet_wrap(~patient_name) +
  labs(caption = "Dots show positions of QiaSeq primers")

seraseq_erbb2

```

{{< pagebreak >}}

### EGFR

EGFR was also correctly detected.

```{r}
#| label: seraseq-egfr
#| echo: FALSE

seraseq_egfr <- draw_cnv_plot(df = seraseq_results,
              input_gene = "EGFR", 
              input_setting = "coarse",
              interval = 50000,
              ymax = 15,
              gene_min = egfr_min,
              gene_max = egfr_max,
              buffer = 200000) +
  facet_wrap(~patient_name) +
  labs(title = "EGFR SeraCare controls") +
  labs(caption = "Dots show positions of QiaSeq primers")

seraseq_egfr

```

{{< pagebreak >}}

### MET

MET was detected on all 3 controls.

```{r}
#| label: seraseq-met
#| echo: FALSE

seraseq_met <- draw_cnv_plot(df = seraseq_results,
              input_gene = "MET", 
              input_setting = "coarse",
              interval = 50000,
              ymax = 15,
              gene_min = met_min,
              gene_max = met_max,
              buffer = 200000) +
  facet_wrap(~patient_name) +
  labs(title = "MET SeraCare controls") +
  labs(caption = "Dots show positions of QiaSeq primers")

seraseq_met

```

{{< pagebreak >}}

### BRAF

BRAF was detected only at 6 and 12 additional copies when both coarse and fine anlysis settings were used.

```{r}
#| label: seraseq-braf
#| echo: FALSE

seraseq_braf <- draw_cnv_plot(df = seraseq_results,
              input_gene = "BRAF", 
              input_setting = "fine",
              interval = 50000,
              ymax = 15,
              gene_min = braf_min,
              gene_max = braf_max,
              buffer = 200000) +
  facet_wrap(~patient_name) +
  labs(title = "BRAF SeraCare controls") +
  labs(caption = "Dots show positions of QiaSeq primers")

seraseq_braf

```

{{< pagebreak >}}

### MYC

MYC was not called at all on the coarse setting, this is probably due to the small size of this gene.

On the fine setting, the 6 and 12 additional copies were picked up, but there was only a small call for the 3 additional copies sample.

```{r}
#| label: seraseq-myc
#| echo: FALSE

seraseq_myc <- draw_cnv_plot(df = seraseq_results,
              input_gene = "MYC", 
              input_setting = "fine",
              interval = 5000,
              ymax = 15,
              gene_min = myc_min,
              gene_max = myc_max,
              buffer = 10000) +
  facet_wrap(~patient_name) +
  labs(title = "MYC SeraCare controls") +
  labs(caption = "Dots show positions of QiaSeq primers")

seraseq_myc

```

{{< pagebreak >}}

## EGFR Transcript III

One sample tested on PanSolid (19032386) also had the EGFRvIII transcript detected previously by ddPCR (WS104445).

When we look at the results from CLC for this sample, there are 2 copy number calls in EGFR: the boundary between them is the end of exon 7.

Because there are fewer Qiaseq primers at the start of the EGFR gene, this may be why the region from exon 1 to exon 2 was not called with the same copy number as exon 7 to the end of the gene.

```{r}
#| label: egfr-viii
#| echo: FALSE

egfr_exon2_start <- 55142286

egfr_exon7_end <- 55154158

draw_cnv_plot(df = coord_long |> 
                filter(sample_id == 19032386), input_gene = "EGFR", 
              input_setting = "fine",
              interval = 100000,
              gene_min = egfr_exon2_start,
              gene_max = egfr_exon7_end) +
  facet_wrap(~sample_id) +
  labs(title = "EGFR vIII detected on PanSolid",
       subtitle = "Setting: fine. Dotted lines show exon 2 to 7 region",
       caption = "Dots show positions of QiaSeq primers")

```
