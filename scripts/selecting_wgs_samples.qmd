---
title: "Selecting Whole Genome Sequencing Samples for PanSolidv2"
author: "Joe Shaw, Clinical Scientist (CS20980)"
date: today
date-format: "DD/MM/YYYY"
format: html
editor: visual
---

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(readxl)
library(here)
library(rvest)
library(epiR)

```

```{r}
#| label: dlms
#| include: FALSE

source(here::here("functions/dna_database_connection.R"))

source(here::here("functions/dna_database_functions.R"))

source(here::here("functions/cnv_functions.R"))

```

# Introduction

This is a script for selecting samples tested by whole genome sequencing (WGS) for use in the PanSolidv2 validation. The aim is to have a cohort of samples with the following attributes:

- DNA from formalin-fixed-paraffin-embedded tissue extracted using the QIAsymphony method
- A whole genome sequencing result for a fresh frozen sample from the same pathology block.

# Identifying Samples

## Clinical WGS samples

One option is to use samples which have already been tested by WGS and have a DNA from a QIAsymphony extraction already available.

WGS results for these samples were found using the finding_wgs_samples_with_qiasymphony extractions.R script.

```{r}
#| label: clinical-wgs-html-files
#| include: FALSE

clinical_wgs_htmls_df <- data.frame(
  
  "filepath" = list.files(path = here::here("data/wgs_result_htmls/"),
             full.names = TRUE,
             pattern = "*.html")) |> 
    mutate(lab_sample_id = str_extract(string = filepath,
                                       pattern = "(\\d{10})_p",
                                       group = 1))

clinical_wgs_htmls <- clinical_wgs_htmls_df$filepath

clinical_wgs_headers <- clinical_wgs_htmls |> 
  map(\(clinical_wgs_htmls) parse_wgs_html_header(clinical_wgs_htmls)) |> 
  list_rbind()

clinical_wgs_pid_text <- clinical_wgs_htmls |> 
  map(\(clinical_wgs_htmls) parse_wgs_html_pid_text(clinical_wgs_htmls)) |> 
  list_rbind()

clinical_wgs_identifiers <- clinical_wgs_headers |> 
  left_join(clinical_wgs_pid_text, by = "filepath")

```

## BRAIN MATRIX samples

Another option is to use samples already tested by WGS as part of the BRAIN MATRIX study. Additional FFPE material from these samples is to be requested from the Salford pathology lab so that a QIAsymphony DNA extraction can be performed.

WGS results for these samples were found using the find_brain_matrix_samples.R script.

```{r}
#| label: brain-matrix-html-files
#| include: FALSE

brain_matrix_htmls_df <- data.frame(
  
  "filepath" = list.files(path = here::here("data/brain_matrix_htmls/"),
                          full.names = TRUE,
                          pattern = "*.html")) |> 
  mutate(lab_sample_id = str_extract(string = filepath,
                                     pattern = "(\\d{10})_p",
                                     group = 1))  |> 
  # One sample is on both lists
  filter(!lab_sample_id %in% clinical_wgs_htmls_df$lab_sample_id)

brain_matrix_htmls <- brain_matrix_htmls_df$filepath

brain_matrix_headers <- brain_matrix_htmls |> 
  map(\(brain_matrix_htmls) parse_wgs_html_header(brain_matrix_htmls)) |> 
  list_rbind()

brain_matrix_pid_text <- brain_matrix_htmls |> 
  map(\(brain_matrix_htmls) parse_wgs_html_pid_text(brain_matrix_htmls)) |> 
  list_rbind()

brain_matrix_identifiers <- brain_matrix_headers |> 
  left_join(brain_matrix_pid_text, by = "filepath")

```

# Collating CNVs from the HTML files

The WGS result HTMLs include the details of the domain 1 CNVs in a table with a specific CSS identifier.

The format of HTML reports appears to have changed over time. For version 2.28 and below the CSS div_id is "svcnv_tier1". For later versions the CSS div_id is "d_svcnv_tier1". 

```{r}
#| label: collate-brain-matrix-cnvs
#| include: FALSE

earlier_html_versions <- grep(pattern = "2.2", x = brain_matrix_identifiers$wgs_version,
                              value = TRUE)

earlier_wgs_htmls <- brain_matrix_identifiers |> 
  filter(wgs_version %in% earlier_html_versions)

later_wgs_htmls <- brain_matrix_identifiers |> 
  filter(!wgs_version %in% earlier_html_versions)

earlier_html_vector <- earlier_wgs_htmls$filepath

later_html_vector <- later_wgs_htmls$filepath

early_wgs_cnvs <- earlier_html_vector |> 
  map(\(earlier_html_vector) parse_wgs_html_table_by_div_id(earlier_html_vector,
                                                  div_id = "svcnv_tier1")) |> 
  list_rbind()

later_wgs_cnvs <-  later_html_vector |> 
  map(\(later_html_vector) parse_wgs_html_table_by_div_id(later_html_vector, 
                                                div_id = "d_svcnv_tier1")) |> 
  list_rbind()

shared_cols <- intersect(colnames(early_wgs_cnvs),
                         colnames(later_wgs_cnvs))

brain_matrix_cnvs <- early_wgs_cnvs |> 
  select(all_of(shared_cols)) |> 
  rbind(later_wgs_cnvs |> 
          select(all_of(shared_cols)))

stopifnot(anyNA(brain_matrix_cnvs) == FALSE)

```

```{r}
#| label: collate-clinical-wgs-cnvs
#| include: FALSE

clinical_wgs_cnvs <- clinical_wgs_htmls |> 
  map(\(clinical_wgs_htmls) parse_wgs_html_table_by_div_id(clinical_wgs_htmls, 
                                                div_id = "d_svcnv_tier1")) |> 
  list_rbind() |> 
  select(all_of(shared_cols))

```

## Linking to DNA Numbers

Linking the WGS referral to a Manchester lab DNA number requires me to require manually-curated spreadsheets. One is called "WGS Pathway Tracker", saved on the lab Sharepoint, and the other is "WGS Tracker" saved on the S drive.

```{r}
#| label: add-dna-nos
#| include: FALSE

wgs_pathway_tracker <- read_excel(path = here("data/WGS pathway tracker_copy_2024-05-17.xlsx"),
                                  sheet = "Cancer") |> 
  janitor::clean_names() |> 
  filter(!is.na(mol_db_number)) |> 
  mutate(labno = str_extract(string = mol_db_number,
                             pattern = "\\d{8}")) 

clin_trial_filepath <- "S:/central shared/Genetics/Mol_Shared/Cancer Team/100kGP Cancer Program Validation & Feedback/Live Clinical Trials/"

wgs_tracker <- read_excel(path = str_c(clin_trial_filepath, "WGS tracker.xlsx")) |> 
  janitor::clean_names() |> 
  mutate(referral_id_clean = str_replace_all(string = referral_id, 
                                             pattern = " ", replacement = ""),
         
         patient_id_clean = str_replace_all(string = patient_id, 
                                            pattern = " ", replacement = "")) |> 
  rename(labno = local_id_252,
         ngis_referral_id = referral_id) |> 
  filter(!is.na(labno)) |> 
  filter(!duplicated(labno))

referral_ids <- wgs_pathway_tracker |> 
  filter(sample_type == "Solid tumour") |> 
  select(labno, ngis_referral_id) |> 
  rbind(wgs_tracker |> 
          select(labno, ngis_referral_id)) |> 
  filter(!duplicated(labno)) 

sample_identifiers <- rbind(clinical_wgs_identifiers, brain_matrix_identifiers) |> 
  left_join(referral_ids, join_by(wgs_r_no == ngis_referral_id))

stopifnot(anyNA(sample_identifiers$labno) == FALSE)

```

```{r}
#| label: collate-cnvs-with-ids
#| include: FALSE

collated_wgs_cnvs <- rbind(brain_matrix_cnvs, clinical_wgs_cnvs) |> 
  left_join(sample_identifiers, by = "filepath")

```

```{r}
#| label: parse-cnv-types
#| include: FALSE

variant_type_regex <- regex(
  r"[
  (GAIN|LOSS|INV|DEL|DUP|LOH|INS|BND)
  (\(|)                       # Bracket or nothing
  (\d{1,3}|)                  # Number or nothing
  (\(|)                       # Bracket or nothing
  ]",
  comments = TRUE
)

variant_coordinate_regex <- regex(
  r"[
  (.{1,2})
  :
  (\d{1,12})  
  (-|:)
  (\d{1,12})
  ]",
  comments = TRUE
)

collated_wgs_cnvs_mod <- collated_wgs_cnvs |> 
  mutate(variant = str_extract(variant_type, pattern = variant_type_regex,
                               group = 1),
         
         variant = ifelse(variant == "DEL", "LOSS", variant),
         
         copy_number = as.numeric(str_extract(variant_type, pattern = variant_type_regex,
                               group = 3)),
         
         chromosome = str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 1),
         
         start = as.numeric(str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 2)),
         
         end = as.numeric(str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 4)),
         
         cnv_size = abs(end - start),
         
         wgs_r_no_gene = str_c(wgs_r_no, "_", gene),
         
         variant_gene = str_c(variant, "_", gene),
         
         gene_clean = str_replace_all(string = gene, pattern = "\\*",
                                      replacement = "")
         )

```

## Selecting Salford samples

Once the DNA number is added, we can remove BRAIN MATRIX samples which came from a lab other than Salford.

```{r}
#| label: select-salford-samples
#| include: FALSE

labno_vector <- unique(collated_wgs_cnvs_mod$labno)

sample_dlims_info <- sample_tbl |> 
  filter(labno %in% labno_vector) |> 
  select(labno, nhsno, pathno, i_gene_r_no, i_gene_s_no, consultant_address) |> 
  collect() |> 
  mutate(consultant_address_check = case_when(
    
    # I manually checked that these samples were from Salford
    labno %in% c("23024547", "23024556", "23036271") ~"Salford",
    
    TRUE ~consultant_address))

salford_addresses <- unique(grep(x = sample_dlims_info$consultant_address_check,
                                 pattern = "salford", ignore.case = TRUE,
                                 value = TRUE))

sample_dlims_info_salford <- sample_dlims_info |> 
  filter(consultant_address_check %in% salford_addresses)

brain_matrix_samples_not_from_salford <- sample_identifiers |> 
  filter(wgs_r_no %in% brain_matrix_identifiers$wgs_r_no &
           !labno %in% sample_dlims_info_salford$labno)

```

# Planning the Validation

Given the samples we have available, we can plan the cohort sizes of variants that we could include in the validation. 

Within these samples, we have the following numbers of tier 1 CNVs:

```{r}
#| label: cnv-type-summaries
#| echo: FALSE

collated_wgs_cnvs_available <- collated_wgs_cnvs_mod |> 
  filter(!labno %in% brain_matrix_samples_not_from_salford$labno)

variant_summary <- collated_wgs_cnvs_available |> 
  count(variant) |> 
  arrange(desc(n))

knitr::kable(variant_summary)

```

But we want to restrict this to specific genes on the PanSolid enrichment which are of clinical use.

```{r}
#| label: genes-of-interest
#| include: TRUE

amp_genes <- c("ALK", "ARID1A", "BRAF", "CTNNB1", "EGFR", "ERBB2", "MET", 
               "MYC", "SUFU", "MDM2")

del_genes <- c("PTEN", "TP53", "CDKN2A")

mmr_genes <- c("MSH6", "MSH2", "MLH1")

brca_genes <- c("BRCA1", "BRCA2")

```

```{r}
#| label: gene-string-variants
#| include: FALSE

all_genes <- c(amp_genes, del_genes, mmr_genes, brca_genes)

gene_strings <- unique(grep(pattern = paste(all_genes, collapse = "|"),
                            x = collated_wgs_cnvs_available$gene_clean,
                            value = TRUE, ignore.case = TRUE))

```

Here is the spread of results availabel in each CNV category for genes that we are interested in.

```{r}
#| label: samples-available
#| echo: FALSE

results_of_interest <- collated_wgs_cnvs_available |> 
  filter(gene_clean %in% gene_strings)

loss_plot <- results_of_interest |> 
  filter(variant == "LOSS" & !is.na(copy_number)) |> 
  ggplot(aes(x = gene_clean, y = copy_number)) +
  geom_jitter(pch = 21, width = 0.1, size = 3) +
  theme_bw() +
  ylim(-1, 2) +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "", title = "Deletion samples available")
  
gain_plot <- results_of_interest |> 
  filter(variant == "GAIN" & !is.na(copy_number)) |> 
  ggplot(aes(x = gene_clean, y = copy_number)) +
  geom_jitter(pch = 21, width = 0.1, size = 2) +
  theme_bw() +
  scale_y_log10() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "", title = "Gain samples available",
       subtitle = "Dashed line at 5 copies") +
  geom_hline(yintercept = 5, linetype = "dashed")
  
loh_plot <- results_of_interest |> 
  filter(variant == "LOH" & !is.na(copy_number)) |> 
  ggplot(aes(x = gene_clean, y = copy_number)) +
  geom_jitter(pch = 21, width = 0.1, size = 2) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "", title = "Loss of heterozygosity samples available")

loss_plot

gain_plot

loh_plot

```

```{r}
#| label: range-of-variants
#| eval: FALSE
#| include: FALSE

variant_loci_table <- cnvs_to_confirm |> 
  group_by(variant_gene) |> 
  summarise(positive_samples = n()) |> 
  mutate(negative_samples = number_of_samples - positive_samples,
         variant = str_extract(string = variant_gene, 
                               pattern = "(.+)_.+",
                               group = 1)) |> 
  group_by(variant) |> 
  summarise(positive_loci = sum(positive_samples),
            negative_loci = sum(negative_samples))

knitr::kable(variant_loci_table)

```

```{r}
#| label: calculations
#| eval: FALSE
#| include: FALSE

get_calcs <- function(df, variant_type) {
  
  x <- df |> 
    filter(variant == variant_type)
  
  calcs <- summary(epiR::epi.tests(c(as.numeric(x[,2]), 
                             0, 0, as.numeric(x[,3])),
                           method = "clopper-pearson")) |> 
    mutate(type = variant_type)
  
  return(calcs)
  
}

gain_calcs <- get_calcs(variant_loci_table, "GAIN")

loss_calcs <- get_calcs(variant_loci_table, "LOSS")

loh_calcs <- get_calcs(variant_loci_table, "LOH")

all_calcs <- rbind(gain_calcs, loss_calcs, loh_calcs)

```

```{r}
#| label: sensitivity-plot
#| eval: FALSE
#| include: FALSE

se_sp_plot <- all_calcs |> 
  filter(statistic %in% c("se", "sp")) |> 
  mutate(metric = case_when(
    
    statistic == "se" ~ "Sensitivity",
    
    statistic == "sp" ~ "Specificity"
    
  )) |> 
  ggplot(aes(x = type, y = est)) +
  geom_point(pch = 21, size = 2) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~metric) +
  labs(x = "", y = "Proportion", 
       title = "Predicted test metrics for each variant type",
       caption = "Assuming 100% concordance with orthogonal test") +
  ylim(0, 1)

se_sp_plot

```

```{r}
#| label: get-brain-matrix-dna-numbers
#| eval: FALSE
#| include: FALSE

wgs_pathway_tracker <- read_excel(path = here("data/WGS pathway tracker_copy_2024-05-17.xlsx"),
                                  sheet = "Cancer") |> 
  janitor::clean_names() |> 
  mutate(nhs_no_clean = str_replace_all(string = nhs_number,
                                        pattern = " ",
                                        replacement = ""))

wgs_pathway_tracker_dna_no_df <- wgs_pathway_tracker |> 
  filter(!is.na(mol_db_number)) |> 
  mutate(labno = str_extract(string = mol_db_number,
                             pattern = "\\d{8}"))

r_numbers_to_get <- local_html_identifiers$wgs_r_no

brain_matrix_lab_ids <- wgs_pathway_tracker |> 
  filter(ngis_referral_id %in% r_numbers_to_get)

```

```{r}
#| label: lab-nos-and-extractions
#| eval: FALSE
#| include: FALSE

get_dlims_information <- function(sample_vector) {
  
  pansolid_samples_extractions <- extraction_tbl |> 
    filter(lab_no %in% sample_vector) |> 
    collect()

  pansolid_samples_extraction_batches <- pansolid_samples_extractions$extraction_batch_fk

  pansolid_samples_extraction_info <- extraction_batch_tbl |> 
    filter(extraction_batch_id %in% pansolid_samples_extraction_batches) |> 
    collect() |> 
    filter(extraction_method_fk != 11) |> 
    select(extraction_batch_id, extraction_method_fk) |> 
    left_join(extraction_method_key, 
              join_by(extraction_method_fk == extraction_method_id)) |> 
    left_join(pansolid_samples_extractions, 
              join_by(extraction_batch_id == extraction_batch_fk)) |> 
    select(lab_no, macro, method_name)

  pansolid_samples_identifiers <- sample_tbl |> 
    filter(labno %in% sample_vector) |> 
    select(labno, nhsno, pathno, i_gene_r_no, i_gene_s_no, consultant_address) |> 
    collect() 

  output <- pansolid_samples_identifiers |> 
    left_join(wgs_pathway_tracker |> 
                filter(!duplicated(nhs_no_clean)) |> 
                select(ngis_referral_id, ngis_patient_id, forename, surname,
                       dob, nhs_no_clean),
              join_by(nhsno == nhs_no_clean)) |>  
    left_join(pansolid_samples_extraction_info,
              join_by(labno == lab_no)) |>  
    rename(extraction_type = method_name) 
  
  return(output)
  
}

labnos_run_on_pansolid <- c("23023889", "23024556", "23025733", "23026481",
                            "23011114", "23013975", "23024575", 
                            "23032153", "23033921", "24017319", "24017321")

labnos_for_brain_matrix_samples <- brain_matrix_lab_ids$mol_db_number

useful_pansolid_sample_info <- get_dlims_information(labnos_run_on_pansolid) |> 
  select(-c(macro, consultant_address, dob)) |> 
  mutate(pansolid_worksheet = case_when(
    
    labno %in% c("23023889", "23024556", "23025733", "23026481") ~"WS141421",
    labno %in% c("23011114", "23013975", "23024575") ~"WS141565",
    labno %in% c("23033921") ~"WS141818",
    labno %in% c("23032153", "24017319", "24017321") ~"WS141734")) |> 
  arrange(nhsno)

csv_timestamp(useful_pansolid_sample_info)

cnv_validation_ffpe_information <- get_dlims_information(labnos_for_brain_matrix_samples) |> 
  mutate(consultant_address_check = case_when(
    
    labno %in% c("23024547", "23024556", "23036271") ~"Salford",
    
    TRUE ~consultant_address))

salford_addresses <- unique(grep(x = cnv_validation_ffpe_information$consultant_address_check,
                                 pattern = "salford", ignore.case = TRUE,
                                 value = TRUE))

cnv_validation_ffpe_information_salford <- cnv_validation_ffpe_information |> 
  filter(consultant_address_check %in% salford_addresses &
           extraction_type == "Fresh tissue")

```
