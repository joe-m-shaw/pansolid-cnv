---
title: "Selecting Whole Genome Sequencing Samples for PanSolidv2"
author: "Joe Shaw, Clinical Scientist (CS20980)"
date: today
date-format: "DD/MM/YYYY"
format: html
editor: visual
---

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(readxl)
library(here)
library(rvest)
library(epiR)

```

```{r}
#| label: dlms
#| include: FALSE

source(here::here("functions/dna_database_connection.R"))

source(here::here("functions/dna_database_functions.R"))

source(here::here("functions/cnv_functions.R"))

```

```{r}
#| label: load-brain-matrix-excel
#| include: FALSE

clin_trial_filepath <- "S:/central shared/Genetics/Mol_Shared/Cancer Team/100kGP Cancer Program Validation & Feedback/Live Clinical Trials/"

```

```{r}
#| label: local-html-files
#| include: FALSE

local_htmls <- list.files(path = here::here("data/brain_matrix_htmls/"),
                          full.names = TRUE)

local_html_headers <- local_htmls |> 
  map(\(local_htmls) parse_wgs_html_header(local_htmls)) |> 
  list_rbind()

local_html_pid_text <- local_htmls |> 
  map(\(local_htmls) parse_wgs_html_pid_text(local_htmls)) |> 
  list_rbind()

local_html_identifiers <- local_html_headers |> 
  left_join(local_html_pid_text, by = "filepath")

```

```{r}
#| label: collate-cnvs
#| include: FALSE

# The format of HTML reports appears to have changed over time. 
# For version 2.28 and below div_id is "svcnv_tier1"
# For later versions div_id is "d_svcnv_tier1"

earlier_html_versions <- grep(pattern = "2.2", x = local_html_identifiers$wgs_version,
                              value = TRUE)

earlier_wgs_htmls <- local_html_identifiers |> 
  filter(wgs_version %in% earlier_html_versions)

later_wgs_htmls <- local_html_identifiers |> 
  filter(!wgs_version %in% earlier_html_versions)

earlier_html_vector <- earlier_wgs_htmls$filepath

later_html_vector <- later_wgs_htmls$filepath

early_wgs_cnvs <- earlier_html_vector |> 
  map(\(earlier_html_vector) parse_wgs_html_table(earlier_html_vector,
                                                  div_id = "svcnv_tier1")) |> 
  list_rbind()

later_wgs_cnvs <-  later_html_vector |> 
  map(\(later_html_vector) parse_wgs_html_table(later_html_vector, 
                                                div_id = "d_svcnv_tier1")) |> 
  list_rbind()

shared_cols <- intersect(colnames(early_wgs_cnvs),
                         colnames(later_wgs_cnvs))

collated_wgs_cnvs <- early_wgs_cnvs |> 
  select(all_of(shared_cols)) |> 
  rbind(later_wgs_cnvs |> 
          select(all_of(shared_cols))) |> 
  left_join(local_html_identifiers, by = "filepath")

anyNA(collated_wgs_cnvs)

number_of_samples <- length(unique(collated_wgs_cnvs$filepath))

```

We have whole genome sequencing copy number variant results for `r number_of_samples` BRAIN MATRIX samples.

```{r}
#| label: parse-cnv-types
#| include: FALSE

variant_type_regex <- regex(
  r"[
  (GAIN|LOSS|INV|DEL|DUP|LOH|INS|BND)
  (\(|)                       # Bracket or nothing
  (\d{1,3}|)                  # Number or nothing
  (\(|)                       # Bracket or nothing
  ]",
  comments = TRUE
)

variant_coordinate_regex <- regex(
  r"[
  (.{1,2})
  :
  (\d{1,12})  
  (-|:)
  (\d{1,12})
  ]",
  comments = TRUE
)

collated_wgs_cnvs_mod <- collated_wgs_cnvs |> 
  mutate(variant = str_extract(variant_type, pattern = variant_type_regex,
                               group = 1),
         
         variant = ifelse(variant == "DEL", "LOSS", variant),
         
         copy_number = as.numeric(str_extract(variant_type, pattern = variant_type_regex,
                               group = 3)),
         
         chromosome = str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 1),
         
         start = as.numeric(str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 2)),
         
         end = as.numeric(str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 4)),
         
         cnv_size = abs(end - start),
         
         wgs_r_no_gene = str_c(wgs_r_no, "_", gene),
         
         variant_gene = str_c(variant, "_", gene)
         )

```

Within these samples, we have the following numbers of tier 1 CNVs:

```{r}
#| label: cnv-type-summaries
#| echo: FALSE

variant_summary <- collated_wgs_cnvs_mod |> 
  count(variant) |> 
  arrange(desc(n))

knitr::kable(variant_summary)

```

# Planning the Validation

Given the samples we have available, we can plan the cohort sizes of variants that we could include in the validation. This is restricting gains to being over a copy number of 6.

```{r}
#| label: validation-samples
#| echo: FALSE

cnvs_to_confirm <- collated_wgs_cnvs_mod |> 
  filter((variant == "GAIN" & copy_number > 6) |
           (variant == "LOSS" | variant == "DEL") |
           variant == "LOH")

cnv_table <- cnvs_to_confirm |> 
  group_by(variant) |> 
  summarise(number_of_variants = n(),
            number_of_samples = length(unique(wgs_r_no)),
            number_of_genes = length(unique(gene)))

knitr::kable(cnv_table)

```

We can also think in terms of "loci" rather than samples, because 1 sample may have multiple CNVs. One  sample can therefore be used as a negative control for some CNV loci, and a positive control for other CNV loci.

```{r}
#| label: range-of-variants
#| echo: FALSE

variant_loci_table <- cnvs_to_confirm |> 
  group_by(variant_gene) |> 
  summarise(positive_samples = n()) |> 
  mutate(negative_samples = number_of_samples - positive_samples,
         variant = str_extract(string = variant_gene, 
                               pattern = "(.+)_.+",
                               group = 1)) |> 
  group_by(variant) |> 
  summarise(positive_loci = sum(positive_samples),
            negative_loci = sum(negative_samples))

knitr::kable(variant_loci_table)

```

If we assume that PanSolid perfectly replicates the results from whole genome sequencing at each of these loci, these are the predicted test metrics for each variant type.

```{r}
#| label: calculations
#| include: FALSE

get_calcs <- function(df, variant_type) {
  
  x <- df |> 
    filter(variant == variant_type)
  
  calcs <- summary(epiR::epi.tests(c(as.numeric(x[,2]), 
                             0, 0, as.numeric(x[,3])),
                           method = "clopper-pearson")) |> 
    mutate(type = variant_type)
  
  return(calcs)
  
}

gain_calcs <- get_calcs(variant_loci_table, "GAIN")

loss_calcs <- get_calcs(variant_loci_table, "LOSS")

loh_calcs <- get_calcs(variant_loci_table, "LOH")

all_calcs <- rbind(gain_calcs, loss_calcs, loh_calcs)

```

```{r}
#| label: sensitivity-plot
#| echo: FALSE

se_sp_plot <- all_calcs |> 
  filter(statistic %in% c("se", "sp")) |> 
  mutate(metric = case_when(
    
    statistic == "se" ~ "Sensitivity",
    
    statistic == "sp" ~ "Specificity"
    
  )) |> 
  ggplot(aes(x = type, y = est)) +
  geom_point(pch = 21, size = 2) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~metric) +
  labs(x = "", y = "Proportion", 
       title = "Predicted test metrics for each variant type",
       caption = "Assuming 100% concordance with orthogonal test") +
  ylim(0, 1)

se_sp_plot

```

```{r}
#| label: lab-nos-and-extractions
#| include: FALSE

labnos_run_on_pansolid <- c("23023889", "23024556", "23025733", "23026481",
                            "23011114", "23013975", "23024575")

pansolid_samples_extractions <- extraction_tbl |> 
  filter(lab_no %in% labnos_run_on_pansolid) |> 
  collect()

pansolid_samples_extraction_batches <- pansolid_samples_extractions$extraction_batch_fk

pansolid_samples_extraction_info <- extraction_batch_tbl |> 
  filter(extraction_batch_id %in% pansolid_samples_extraction_batches) |> 
  collect() |> 
  filter(extraction_method_fk != 11) |> 
  select(extraction_batch_id, extraction_method_fk) |> 
  left_join(extraction_method_key, 
            join_by(extraction_method_fk == extraction_method_id)) |> 
  left_join(pansolid_samples_extractions, 
            join_by(extraction_batch_id == extraction_batch_fk)) |> 
  select(lab_no, method_name)

pansolid_samples_identifiers <- sample_tbl |> 
  filter(labno %in% labnos_run_on_pansolid) |> 
  select(labno, nhsno, pathno) |> 
  collect()

useful_pansolid_sample_info <- pansolid_samples_identifiers |> 
  left_join(local_html_identifiers |> 
              select(wgs_r_no, wgs_p_no, patient_name, patient_dob, 
                     nhs_no_clean),
            join_by(nhsno == nhs_no_clean)) |>  
  left_join(pansolid_samples_extraction_info,
            join_by(labno == lab_no)) |>  
  rename(extraction_type = method_name) |>
  mutate(pansolid_worksheet = case_when(
    labno %in% c("23023889", "23024556", "23025733", "23026481") ~"WS141421",
    labno %in% c("23011114", "23013975", "23024575") ~"WS141565"))

csv_timestamp(useful_pansolid_sample_info)

```
