---
title: "Selecting Whole Genome Sequencing Samples for PanSolidv2"
author: "Joe Shaw, Clinical Scientist (CS20980)"
date: today
date-format: "DD/MM/YYYY"
format: html
editor: visual
---

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(readxl)
library(here)
library(rvest)
library(epiR)

```

```{r}
#| label: dlms
#| include: FALSE

source(here::here("functions/dna_database_connection.R"))

source(here::here("functions/dna_database_functions.R"))

```

# Finding Samples

The aim is to find cases from the BRAIN MATRIX study which can be tested by PanSolid version 2 for the validation of somatic copy number variant detection.

Information used in this Quarto is saved at this file location:

```{r}
#| label: filepath
#| include: TRUE

clin_trial_filepath <- "S:/central shared/Genetics/Mol_Shared/Cancer Team/100kGP Cancer Program Validation & Feedback/Live Clinical Trials/"

```

```{r}
#| label: load-brain-matrix-excel
#| include: FALSE

brain_matrix_data_1 <- read_excel(path = str_c(clin_trial_filepath, "Brain Matrix Data.xlsx"),
                                sheet = "Sheet1",
                                col_types = c("text", "text", "text", "text",
                                              "date", "text", "date", "date",
                                              "date", "date", "text", "text")) |> 
  janitor::clean_names()

brain_matrix_data_2 <- read_excel(path = str_c(clin_trial_filepath, "Brain Matrix Data.xlsx"),
                                sheet = "Sheet2",
                                col_types = c("text", "text", "text", "date",
                                              "text", "date", "date", "date", "date")) |> 
  janitor::clean_names()

shared_cols <- intersect(colnames(brain_matrix_data_2), colnames(brain_matrix_data_1)) 

brain_matrix_data_join <- brain_matrix_data_1 |> 
  select(all_of(shared_cols)) |> 
  rbind(brain_matrix_data_2 |> 
          select(all_of(shared_cols))) |> 
  filter(!is.na(brain_matrix_id) & brain_matrix_id != "Brain Matrix ID") |> 
  filter(!duplicated(brain_matrix_id)) |> 
  mutate(gel_id_clean = str_replace_all(string = gel_id, 
                                         pattern = " ", replacement = "")) |> 
  arrange(brain_matrix_id)

```

```{r}
#| label: load-wgs-tracker
#| include: FALSE

wgs_tracker <- read_excel(path = str_c(clin_trial_filepath, "WGS tracker.xlsx")) |> 
  janitor::clean_names() |> 
  mutate(referral_id_clean = str_replace_all(string = referral_id, 
                                         pattern = " ", replacement = ""),
         
         patient_id_clean = str_replace_all(string = patient_id, 
                                         pattern = " ", replacement = ""))

```

```{r}
#| label: parse-gel-ids
#| include: FALSE
#| eval: FALSE

mtb_sheets_filepath <- str_c(clin_trial_filepath, "MTB sheets/")

file_regex <- "\\d{10}_p\\d{11}_LP\\d{7}-DNA_\\w{1}\\d{2}_LP\\d{7}-DNA_\\w{1}\\d{2}.v.*supplementary.html"

all_htmls <- list.files(path = mtb_sheets_filepath,
            pattern = file_regex,
           recursive = TRUE,
            full.names = TRUE,
            ignore.case = TRUE)

parse_html_identifiers <- function(html_filepath) {
  
  html <- read_html(x = html_filepath)
  
  header <- html |> 
    html_element("header") |> 
    html_text2()
  
  header_regex <- regex(
    r"[
    .
    Report\sversion:\sv(\d{1,2}.\d{1,2}.\d{1,2}|\d{1,2}.\d{1,2})
    .+
    Issue\sdate:\s(\d{2}-\d{2}-\d{4})
    .+
    (r\d{11}) # referral ID
    .+
    (p\d{11}) # patient ID
    .+
    ]",
    comments = TRUE
  )

  version <- str_extract(header, header_regex, group = 1)
  
  date <- str_extract(header, header_regex, group = 2)
  
  r_no <- str_extract(header, header_regex, group = 3)
  
  p_no <- str_extract(header, header_regex, group = 4)
  
  output <- data.frame( 
    "r_no" = r_no,
    "p_no" = p_no,
    "version" = version,
    "date" = date)
  
  return(output)
  
}

html_gel_ids <- all_htmls |> 
  map(\(all_htmls) parse_html_identifiers(all_htmls)) |> 
  list_rbind()

```

```{r}
#| label: find-gel-ids
#| include: FALSE

brain_matrix_patient_info <- wgs_tracker |> 
  filter(referral_id_clean %in% brain_matrix_data_join$gel_id |
           patient_id_clean %in% brain_matrix_data_join$gel_id) |> 
  filter(!is.na(patient_id_clean))

brain_matrix_p_nos <- list(brain_matrix_patient_info$patient_id_clean)

```

```{r}
#| label: find-html-files
#| include: FALSE

get_html_path <- function(patient_id) {

  file <- Sys.glob(paths = str_c(clin_trial_filepath, "MTB sheets/*/*/",
                       {{ patient_id }}, "*/*.html"))
  
  return(file)
  
}

brain_matrix_filepaths <- brain_matrix_p_nos |> 
  map(\(brain_matrix_p_nos) get_html_path(brain_matrix_p_nos)) |> 
  flatten()

```

```{r}
#| label: copy-files
#| include: FALSE

file.copy(from = brain_matrix_filepaths, 
          to = here::here("data/brain_matrix_htmls/"))

```

```{r}
#| label: parsing-html-function
#| include: FALSE

parse_cnv_table <- function(html_filepath) {
  
  html <- read_html(x = html_filepath)
  
  cnv_table <- html |> 
    html_element("#d_svcnv_tier1") |> 
    html_table() |> 
    janitor::clean_names()
  
  header <- html |> 
    html_element("header") |> 
    html_text2()
  
  header_regex <- regex(
    r"[
    .+
    (r\d{11}) # referral ID
    .+
    (p\d{11}) # patient ID
    .+
    ]",
    comments = TRUE
  )

  r_no <- str_extract(header, header_regex, group = 1)
  
  p_no <- str_extract(header, header_regex, group = 2)
  
  output <- cnv_table |> 
    mutate(r_no = r_no,
           p_no = p_no) |> 
    relocate(p_no, r_no)
  
  return(output)
  
}

```

```{r}
#| label: collate-cnvs
#| include: FALSE

# The format of HTML reports appears to have changed over time. I've designed a function to read in the tier 1 structural variants table from the most recent version.

# The format of the HTMLs seems to change around report 5

brain_matrix_filepaths <- brain_matrix_filepaths[5:14]

brain_matrix_cnvs <- brain_matrix_filepaths |> 
  map(\(brain_matrix_filepaths) parse_cnv_table(brain_matrix_filepaths)) |> 
  list_rbind()

number_of_samples <- length(unique(brain_matrix_cnvs$r_no))

```

We have easily parse-able whole genome sequencing copy number variant results for `r number_of_samples` BRAIN MATRIX samples.

```{r}
#| label: plot
#| include: FALSE

variant_type_regex <- regex(
  r"[
  (GAIN|LOSS|INV|DEL|DUP|LOH)
  (\(|)                       # Bracket or nothing
  (\d{1,3}|)                  # Number or nothing
  (\(|)                       # Bracket or nothing
  ]",
  comments = TRUE
)

variant_coordinate_regex <- regex(
  r"[
  (.{1,2})
  :
  (\d{1,12})  
  (-|:)
  (\d{1,12})
  ]",
  comments = TRUE
)

brain_matrix_cnvs_mod <- brain_matrix_cnvs |> 
  mutate(variant = str_extract(variant_type, pattern = variant_type_regex,
                               group = 1),
         
         variant = ifelse(variant == "DEL", "LOSS", variant),
         
         copy_number = as.numeric(str_extract(variant_type, pattern = variant_type_regex,
                               group = 3)),
         
         chromosome = str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 1),
         
         start = as.numeric(str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 2)),
         
         end = as.numeric(str_extract(string = variant_gr_ch38_coordinates,
                                  pattern  = variant_coordinate_regex,
                                  group = 4)),
         
         cnv_size = abs(end - start),
         
         r_no_gene = str_c(r_no, "_", gene)
         )

gene_vars <- grep(pattern = "CDKN2A|MET|BRAF|MYC", x = brain_matrix_cnvs_mod$gene,
                  value = TRUE)

brain_matrix_plot <- brain_matrix_cnvs_mod |> 
  filter(gene %in% gene_vars) |> 
  filter(!is.na(copy_number)) |> 
  ggplot(aes(x = gene, y = copy_number)) +
  geom_jitter(pch = 21, width = 0.1, size = 2) +
  theme_bw()

brain_matrix_plot

```

```{r}
#| label: choosing-samples
#| include: FALSE

samples_to_get <- as.character(brain_matrix_patient_info$local_id_252)

brain_matrix_referrer_information <- sample_tbl |> 
  filter(labno %in% samples_to_get) |> 
  select(labno, firstname, surname, tissue, i_gene_r_no, i_gene_s_no,
         pathno,
         concentration, consultant, consultant_address) |> 
  collect() |> 
  arrange(labno)

brain_matrix_referrer_information

```

# Planning the Validation

```{r}
#| label: range-of-variants
#| echo: FALSE

get_calcs <- function(df, variant_type) {
  
  x <- df |> 
    filter(variant == variant_type)
  
  calcs <- summary(epiR::epi.tests(c(as.numeric(x[,2]), 
                             0, 0, as.numeric(x[,3])),
                           method = "clopper-pearson")) |> 
    mutate(type = variant_type)
  
  return(calcs)
  
}

cnvs_to_confirm <- brain_matrix_cnvs_mod |> 
  filter((variant == "GAIN" & copy_number > 6) |
           (variant == "LOSS" | variant == "DEL") |
           variant == "LOH") |> 
  mutate(variant_gene = str_c(variant, "_", gene))

variant_gene_table <- cnvs_to_confirm |> 
  group_by(variant_gene) |> 
  summarise(positive_samples = n()) |> 
  mutate(negative_samples = number_of_samples - positive_samples)

variant_summary_table <- variant_gene_table |> 
  mutate(variant = str_extract(string = variant_gene, 
                               pattern = "(.+)_.+",
                               group = 1)) |> 
  group_by(variant) |> 
  summarise(pos = sum(positive_samples),
            neg = sum(negative_samples))

cnv_table <- cnvs_to_confirm |> 
  group_by(variant) |> 
  summarise(number_of_variants = n(),
            number_of_samples = length(unique(r_no)),
            number_of_genes = length(unique(gene)))

```

```{r}
#| label: calculations
#| include: FALSE

gain_calcs <- get_calcs(variant_summary_table, "GAIN")

loss_calcs <- get_calcs(variant_summary_table, "LOSS")

loh_calcs <- get_calcs(variant_summary_table, "LOH")

all_calcs <- rbind(gain_calcs, loss_calcs, loh_calcs)

```

Given the BRAIN MATRIX samples we have available, these are the cohort sizes of variants that we could include in the validation.

```{r}
#| label: cohort-sizes
#| echo: FALSE

knitr::kable(cnv_table)

```

If we assume that PanSolid perfectly replicates the results from whole genome sequencing at each of these loci, these are the predicted test metrics for each variant type.

```{r}
#| label: sensitivity-plot
#| echo: FALSE

se_sp_plot <- all_calcs |> 
  filter(statistic %in% c("se", "sp")) |> 
  mutate(metric = case_when(
    
    statistic == "se" ~ "Sensitivity",
    
    statistic == "sp" ~ "Specificity"
    
  )) |> 
  ggplot(aes(x = type, y = est)) +
  geom_point(pch = 21, size = 2) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~metric) +
  labs(x = "", y = "Proportion", 
       title = "Predicted test metrics for each variant type",
       caption = "Assuming 100% concordance with orthogonal test") +
  ylim(0, 1)

se_sp_plot

```