---
title: "Validation of Detecting Somatic Gene Amplifications with the PanSolid CLC Pipeline"
format: 
  docx:
    reference-doc: DOC6283_template.docx
toc: true
toc-title: "Table of Contents"
---

# Authors\

Author: Joe Shaw

Project Lead(s): Joe Shaw, Elizabeth Sollars, Eleanor Baker, Helene Schlecht, George Burghel

Date:	`r Sys.Date()`\

Author contact: joseph.shaw2@mft.nhs.uk; joseph.shaw3@nhs.net\

# Acronyms\

ALK: 			Anaplastic lymphoma kinase

CTNNB1:		Catenin beta 1

CLC:			Acronym unknown. CLC Bio was acquired by Qiagen in 2013.	

CNV:			Copy Number Variant

EGFR:			Epidermal Growth Factor Receptor

ERBB2:			ERythroBlastic oncogene B 2

FFPE:			Formalin-Fixed Paraffin Embedded

FISH:			Fluorescent In-Situ Hybridisation

GLH:			Genomic Laboratory Hub

NGS:			Next Generation Sequencing

NICE:			National Institute for Health and Care Excellence

UMI: 			Unique Molecular Identifier

WGS:			Whole Genome Sequencing\

# Purpose\

The purpose of this document is to describe the validation of detection of somatic gene amplifications on the PanSolid v2 QIAseq panel using the PanSolid CLC pipeline at the North West Genomic Laboratory Hub (GLH).

# Introduction\

At the North West GLH, somatic variant testing is performed using the QIAseq methodology (Qiagen) (1) and Illumina next generation sequencing (NGS) using a large panel of QIAseq primer targets named “PanSolid”. The current PanSolid enrichment, referred to as PanSolidv2 (CDHS-48608Z-11752) contains 11,752 unique QIAseq targets. Sequencing data from the PanSolid enrichment is analysed with a pipeline built in the Qiagen CLC Genomic Workbench. Detection of single nucleotide variants and indels on PanSolid has previously been validated (DOC6024 Validation of QIASeq PanSolid Enrichment). Currently, copy number variants (CNVs) are analysed using a separate QIAseq “core” panel with a bespoke pipeline written in Python, with copy number amplifications reported for 4 genes: EGFR, ERBB2, AR and MET. The long-term aim is to move all CNV detection to the PanSolid panel and the CLC pipeline.

The detection of ERBB2 gene amplifications was validated on the PanSolid enrichment in April 2024 (DOC6260: Validation of Detecting Somatic ERBB2 Amplifications with the PanSolid CLC Pipeline). ERBB2 amplifications were prioritised for validation due to service needs, and were validated by comparison with results from droplet digital PCR testing. The aim of this validation document is to validate additional amplification genes on the PanSolid workflow; these genes are specified by the National Genomic Test Directory.\

#	Somatic Gene Amplifications\

Gene amplification is a common mechanism in the development of cancer (2).  Additional gene copies can be present on extra-chromosomal DNA rather than their initial chromosomal loci (3), for example EGFR amplifications can be present on extrachromosomal DNA fragments referred to as “double minutes” (4). “Double minute” refers to a very small (“minute”) bodies of chromatin material with two arms (“double) which were originally visualised by chromosome staining (5).

The number of additional gene copies can vary between genes and tumour types, ranging as high as hundreds of gene copies. There is no consistent accepted threshold of copy number to classify a gene as “amplified”, although many clinical trials use a threshold of 10 copies as an entry requirement.

Gene amplifications can have clinical relevance for choice of treatment and predicting resistance to treatment, particularly amplifications of genes encoding tyrosine kinase membrane receptors. It is predicted that increasing the gene copy number increases the levels of translated protein, which maintains aberrant cell signalling even in the presence of tyrosine kinase inhibitors (TKIs) (6). Historically, gene amplifications were detected with fluorescence in-situ hybridisation (FISH) and immunohistochemistry (IHC), but next generation sequencing (NGS) methods are being increasingly used. The PanSolid enrichment includes 212 genes relevant to cancer. Of these, there are 9 genes which were selected as having amplifications with clinical relevance (Table 1).\

```{r}
#| label: packages-and-data
#| warning: FALSE
#| include: FALSE

library(tidyverse)
library(here)
library(patchwork)
library(janitor)

source(here("scripts/set_shared_drive_filepath.R"))

source(here("scripts/load_processed_validation_data.R"))

```

```{r}
#| label: load-pansolid-patient-info
#| include: FALSE

cancer_type_summary <- validation_sample_patient_info |> 
  filter(labno %in% validation_stdev_results_collated$labno) |> 
  #filter(cancer_type_new != "Reference material") |> 
  count(cancer_type_new) |> 
  rename("Samples" = n,
         "Cancer" = cancer_type_new) |> 
  arrange(desc(Samples)) |> 
  adorn_totals()

knitr::kable(cancer_type_summary)

extraction_type_summary <- validation_sample_patient_info |> 
  filter(labno %in% validation_stdev_results_collated$labno) |> 
  count(method_name) |> 
  rename("DNA extraction method" = method_name,
         "Samples" = n) |> 
  arrange(desc(Samples)) |> 
  adorn_totals()

knitr::kable(cancer_type_summary)

ncc_summary <- validation_sample_patient_info |> 
    filter(labno %in% validation_stdev_results_collated$labno) |> 
    filter(neoplastic_cell_content != "Reference material") |> 
    mutate(ncc_class = case_when(
      neoplastic_cell_content %in% c(">10", "10-20%") ~">10%",
      neoplastic_cell_content %in% c("20-50", "20-30%",
                                     ">20%", ">20", 
                                     "20") ~">20%",
      neoplastic_cell_content %in% c(">30%", ">30") ~">30%",
      neoplastic_cell_content %in% c("50-75") ~">50%",
      neoplastic_cell_content %in% c( ">75", "80") ~">75%",
      TRUE ~neoplastic_cell_content
    ),
    ncc_class = factor(ncc_class, levels = c(">75%",
                                             ">50%",
                                             ">30%",
                                             ">20%",
                                             ">10%",
                                             "No NCC provided"))) |> 
    count(ncc_class) |> 
    rename("Neoplastic cell content" = ncc_class,
           "Samples" = n) |> 
    adorn_totals()

knitr::kable(ncc_summary)

tissue_type_summary <- validation_sample_patient_info |> 
    filter(labno %in% validation_stdev_results_collated$labno) |> 
    mutate("Tissue type" = case_when(
      tissue_type == "Shavings" ~"FFPE shavings",
      tissue_type %in% c("Slides", "Positively-charged slides") ~"FFPE slides",
      TRUE ~tissue_type
    )) |> 
    count(`Tissue type`) |> 
    rename("Samples" = n) |> 
    arrange(desc(Samples)) |> 
    adorn_totals()

knitr::kable(tissue_type_summary)

```

# PanSolid overall results

```{r}
#| label: pansolid-overall-results
#| include: FALSE

single_results <- validation_stdev_results_collated |> 
  filter(!duplicated(labno))

pansolid_gene_results_table <- validation_all_amp_gene_results_collated |> 
  filter(filepath %in% single_results$filepath) |> 
  count(gene, pansolid_call) |> 
  pivot_wider(id_cols = gene,
              names_from = pansolid_call,
              values_from = n,
              values_fill = 0) |> 
  arrange(gene)

knitr::kable(pansolid_gene_results_table)

```

# PanSolid results by tumour types

```{r}
#| label: pansolid-results-by-tumour-type
#| eval: FALSE
#| include: FALSE

validation_results_with_sample_info <- validation_all_amp_gene_results_collated |> 
  left_join(validation_sample_patient_info, by = "labno")

ggplot(validation_results_with_sample_info, aes(x = gene,
                                                y = max_region_fold_change)) +
  geom_point(shape = 21, aes(fill = cancer_type_new))

```

# Comparison to whole genome sequencing

```{r}
#| label: load-wgs
#| eval: FALSE
#| include: FALSE

source(here("scripts/collate_wgs_htmls.R"))
source(here("scripts/reformat_wgs_cnv_data.R"))

```

```{r}
#| label: select-wgs-samples
#| eval: FALSE
#| include: FALSE

# Check how many samples were tested on PanSolid and of which 
# extraction type
wgs_html_ids |> 
  inner_join(validation_sample_patient_info,
             join_by("nhs_no_clean" == "nhsno")) |> 
  select(patient_name, method_name) |>  view()

validation_sample_patient_info |> 
  count(method_name) |>  view()



pansolid_wgs_sample_selection <- validation_sample_patient_info |> 
  filter(nhsno %in% wgs_reformatted_with_ids$nhs_no_clean) |> 
  filter(method_name == "QIAsymphony_DNA_FFPE") |> 
  # One patient has 2 QIAsymphony extractions with the same Pansolid results
  # I've arbitrarily chosen one to include
  filter(!labno %in% c("24030945", 
                      # This sample pathology block does not match the WGS
                      "24018922",
                      # This sample has a signal-adjusted noise above 1
                      "24030364")) |> 
  left_join(wgs_html_ids |> 
              select(patient_name, wgs_r_no, wgs_p_no, nhs_no_clean), 
            join_by("nhsno" == "nhs_no_clean")) 



amp_table <- load_pansolid_gene_table("Amplifications")

del_table <- load_pansolid_gene_table("Deletions")

## Amplifications

wgs_cnv_amp_genes <- wgs_html_cnvs |> 
    filter(cnv_class %in% c("DUP", "GAIN") 
           # Classify copy numbers below 10 as not amplified
           & cnv_copy_number > 10
    ) |> 
    filter(gene %in% amp_table$gene)

```

```{r}
#| label: compare-wgs-and-pansolid
#| eval: FALSE
#| include: FALSE

wgs_pansolid_comparison <- validation_all_amp_gene_results_collated |> 
  filter(gene %in% amp_gene_table$gene) |> 
  filter(labno %in% pansolid_wgs_sample_selection$labno) |> 
  # One WGS sample was repeated for repeatability studies on worksheets
  # WS144291 and WS144291
  filter(!worksheet %in% c("WS144291", "WS144364")) |> 
  left_join(validation_sample_patient_info |> 
              select(labno, nhsno), by = "labno") |> 
  left_join(wgs_reformatted_with_ids |> 
              select(nhs_no_clean, gene, wgs_result, wgs_pathno), 
            join_by(nhsno == nhs_no_clean, gene == gene)) |> 
  mutate(outcome = case_when(
      (wgs_result == "Gain detected" & pansolid_call == "amplification") ~"true_positive",
    
      (wgs_result == "No gain detected" & pansolid_call == "normal result") ~"true_negative",
    
      (wgs_result == "Gain detected" & pansolid_call == "normal result") ~"false_negative",
    
      (wgs_result == "No gain detected" & pansolid_call == "amplification") ~"false_positive"
    
  ))

```

```{r}
#| label: wgs-gene-accuracy
#| eval: FALSE
#| include: FALSE

wgs_gene_accuracy_summary <- wgs_pansolid_comparison |> 
  group_by(gene, outcome) |> 
  count() |> 
  pivot_wider(id_cols = c(gene),
              names_from = outcome,
              values_from = n,
              values_fill = 0) |> 
  select(gene, true_negative, true_positive, false_negative)

knitr::kable(wgs_gene_accuracy_summary)

csv_timestamp(wgs_gene_accuracy_summary, paste0(outputs_folder, "tables"))

```

```{r}
#| label: wgs-dosage-accuracy
#| eval: FALSE
#| include: FALSE

cases_with_calls <- wgs_pansolid_comparison |> 
  filter(wgs_result == "Gain detected") |>
  select(labno, nhsno)

wgs_egfr_calls <- wgs_html_cnvs |> 
  filter(gene == "*EGFR") |> 
  left_join(wgs_html_ids, by = "filepath") |> 
  filter(nhs_no_clean %in% cases_with_calls$nhsno) |>  
  filter(!duplicated(wgs_p_no)) 

pansolid_egfr_calls <- validation_all_amp_gene_results_collated |> 
              filter(gene == "EGFR") |> 
  left_join(validation_sample_patient_info, by = "labno") |> 
  filter(method_name == "QIAsymphony_DNA_FFPE") |> 
  filter(labno != "24030945")

egfr_wgs_pansolid_dosage_plot <- wgs_egfr_calls |> 
  left_join(pansolid_egfr_calls, join_by("nhs_no_clean" == "nhsno")) |>  
  ggplot(aes(x = cnv_copy_number, y = max_region_fold_change)) +
  geom_point(shape = 21, size = 3) +
  theme_bw() +
  labs(x = "WGS copy number", y = "Pansolid fold change") +
  ylim(0, 140) +
  xlim(0, 70) +
  ggpubr::stat_cor(method = "pearson", label.x = 10, label.y = 100)

```

{{< pagebreak >}}

# Comparison to droplet digital PCR

```{r}
#| label: ddpcr-comparison
#| eval: FALSE
#| include: FALSE

source(here("scripts/collate_pansolid_ddpcr_validation_data.R"))

ddpcr_cnv_amp_threshold <- 5

ddpcr_vs_pansolid <- ddpcr_validation_data |> 
  mutate(sample_experiment = str_c(sample, "_", experiment)) |> 
  filter(target == "ch1_target" & 
           experiment %in% c("MYC Ex3_1",
                              "BRAF Ex10_1",
                              "MET Ex2_1",
                              "EGFR Ex6_1")) |> 
    filter(!duplicated(sample_experiment)) |>  
  inner_join(validation_all_amp_gene_results_collated,
             join_by(sample == labno, 
                     gene)) |> 
  mutate(labno_suffix_gene = str_c(labno_suffix, "_", gene)) |> 
  # Some samples were run twice on PanSolid
  filter(!duplicated(labno_suffix_gene)) |> 
  mutate(ddpcr_result = case_when(
    cnv >= ddpcr_cnv_amp_threshold ~"amplification",
    cnv < ddpcr_cnv_amp_threshold ~"normal result"),
    
    outcome = case_when(
      
      ddpcr_result == "amplification" & pansolid_call == "amplification" 
      ~"true_positive",
      ddpcr_result == "normal result" & pansolid_call == "normal result" 
      ~"true_negative",
      ddpcr_result == "amplification" & pansolid_call == "normal result"
      ~"false_negative",
      ddpcr_result == "normal result" & pansolid_call == "amplification" 
      ~"false_positive"
    ))

```

ddPCR data is available for the MYC, BRAF, MET and EGFR genes.

```{r}
#| label: ddpcr-plots
#| eval: FALSE
#| include: FALSE

egfr_met_myc_plot <- ggplot(ddpcr_vs_pansolid |> 
         filter(gene != "MYC"), aes(x = cnv, y = max_region_fold_change)) +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "ddPCR copy number",
       y = "PanSolid fold change",
       title = "ddPCR vs PanSolid by gene") +
  ggpubr::stat_cor(method = "pearson", label.x = 5, label.y = 0)  +
  facet_wrap(~gene)

myc_plot <- ggplot(ddpcr_vs_pansolid |> 
         filter(gene == "MYC"), aes(x = cnv, y = max_region_fold_change)) +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "ddPCR copy number",
       y = "PanSolid fold change") +
  ggpubr::stat_cor(method = "pearson", label.x = 75, label.y = 10)  +
  facet_wrap(~gene)

ggplot(ddpcr_vs_pansolid, aes(x = cnv, y = max_region_fold_change)) +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "ddPCR copy number",
       y = "PanSolid fold change") +
  ggpubr::stat_cor(method = "pearson", label.x = 5, label.y = 0)

combined_ddpcr_plot <- egfr_met_myc_plot + myc_plot + plot_layout(nrow = 2,
                                           heights = c(7,7))

combined_ddpcr_plot

plot_timestamp(input_plot = combined_ddpcr_plot, 
               folder = paste0(outputs_folder, "plots"),
               input_height = 15)

```

{{< pagebreak >}}

## ddPCR summary

```{r}
#| label: ddpcr-metrics
#| eval: FALSE
#| include: FALSE

ddpcr_summary <- ddpcr_vs_pansolid |> 
  count(gene, outcome) |> 
  pivot_wider(id_cols = gene,
              names_from = outcome,
              values_from = n,
              values_fill = 0)

knitr::kable(ddpcr_summary)

csv_timestamp(ddpcr_summary, paste0(outputs_folder, "tables"))

```

```{r}
#| label: ddpcr-false-negatives
#| eval: FALSE
#| include: FALSE

ddpcr_false_neg_table <- ddpcr_vs_pansolid |> 
  filter(outcome == "false_negative") |> 
  mutate(`PanSolid fold change` = round(max_region_fold_change, 1),
         `ddPCR copy number` = round(cnv, 1)) |> 
  rename(`ddPCR result` = ddpcr_result,
         `Lab number` = sample,
         `Gene` = gene,
         `PanSolid result` = pansolid_call) |> 
  select(`Lab number`,  `Gene`, `ddPCR copy number`, 
         `PanSolid fold change`, `ddPCR result`, `PanSolid result`)

knitr::kable(ddpcr_false_neg_table)

csv_timestamp(ddpcr_false_neg_table, paste0(outputs_folder, "tables"))

```

{{< pagebreak >}}

# Genomic Coordinates

```{r}
#| label: coordinates
#| eval: FALSE
#| include: FALSE

pos_cnv_with_noise <- validation_pos_cnv_results_collated |> 
  left_join(stdev_results_collated |> 
              select(filepath, st_dev_signal_adjusted_log2_ratios), by = "filepath") |> 
  filter(st_dev_signal_adjusted_log2_ratios < 1)

egfr_labno_plot <- make_labno_plot(df = pos_cnv_with_noise, 
                gene = "EGFR",
                interval = 100000, 
                buffer = 100000, 
                yaxis = labno)

egfr_triptych <- make_cnv_triptych(egfr_labno_plot)

myc_labno_plot <- make_labno_plot(df = pos_cnv_with_noise |> 
                                    filter(cnv_length < 100000), 
                gene = "MYC",
                interval = 100000, 
                buffer = 100000, 
                yaxis = labno)

make_cnv_triptych(myc_labno_plot)

```

{{< pagebreak >}}

# Repeatability

```{r}
#| label: repeatability
#| eval: FALSE
#| include: FALSE

repeat_noise_data <- validation_stdev_results_collated |> 
  filter(duplicated(labno, fromLast = TRUE) |
           duplicated(labno, fromLast = FALSE)) |> 
  # Excel file produced twice as sample is in 2 cohorts
  filter(labno != "24030966") |> 
  # This is the limit of detection sample
  filter(labno != "24039973") |> 
  filter(!grepl(pattern = "SERA", x = patient_name,
               ignore.case = TRUE))

repeat_all_amp_data <- validation_all_amp_gene_results_collated |> 
  filter(labno %in% repeat_noise_data$labno)

low_fold_change_repeat_plot <- ggplot(repeat_all_amp_data |> 
         filter(labno != "24027774"), aes(x = gene, y = max_region_fold_change)) +
  geom_jitter(shape = 21, size = 2, width = 0.2) +
  theme_bw() +
  geom_hline(yintercept = 2.8, linetype = "dashed") +
  scale_y_continuous(limits = c(-2, 10),
                     breaks = c(-2, 0, 2.8, 5, 7.5, 10)) +
  theme(axis.text.x = element_text(angle = 90)) +
  facet_wrap(~labno) +
  labs(x = "", y = "Fold change")

high_fold_change_repeat_plot <- ggplot(repeat_all_amp_data |> 
         filter(labno == "24027774"), aes(x = gene, y = max_region_fold_change)) +
  geom_jitter(shape = 21, size = 2, width = 0.2) +
  theme_bw() +
  geom_hline(yintercept = 2.8, linetype = "dashed") +
  theme(axis.text.x = element_text(angle = 90)) +
  facet_wrap(~labno) +
  labs(x = "", y = "Fold change")

repeatability_plots <- low_fold_change_repeat_plot +
  high_fold_change_repeat_plot + plot_layout(nrow = 2,
                                             heights = c(5,5))

repeatability_plots

plot_timestamp(input_plot = repeatability_plots, 
               folder = paste0(outputs_folder, "plots"),
               input_height = 15)

```

```{r}
#| label: repeatability-noise
#| eval: FALSE
#| include: FALSE

repeat_plot_facet_labno <- ggplot(repeat_noise_data, aes(x = worksheet,
                              y = st_dev_signal_adjusted_log2_ratios)) +
  geom_point(shape = 21) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  ylim(0, 1) +
  labs(y = "Signal-adjusted noise", x = "", title = "Repeatability noise data") +
  facet_wrap(~labno)

repeat_plot_facet_labno

repeat_plot_worksheet <- ggplot(repeat_noise_data, aes(x = worksheet,
                              y = st_dev_signal_adjusted_log2_ratios)) +
  geom_jitter(shape = 21, width = 0.2, size = 3,
              aes(fill = labno), alpha = 0.6) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  ylim(0, 1) +
  labs(y = "Signal-adjusted noise", x = "", title = "Repeatability noise data")

repeat_plot_worksheet

```

# Quality control

```{r}
#| label: pansolid-overall-noise
#| eval: FALSE
#| include: FALSE

combined_qc_data <- validation_percent_138_collated |> 
  inner_join(validation_stdev_results_collated |> 
               select(filepath, st_dev_signal_adjusted_log2_ratios), by = "filepath") |> 
  left_join(validation_sample_patient_info, by = "labno",
            relationship = "many-to-one")

ggplot(combined_qc_data, aes(x = st_dev_signal_adjusted_log2_ratios,
                             y = percent_whole_panel_covered_at_138x)) +
  geom_point(shape = 21, aes(fill = method_name)) +
  theme_bw()

```
