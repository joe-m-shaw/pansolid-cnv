---
title: "Validation of Detecting Somatic Gene Amplifications with the PanSolid CLC Pipeline"
format: 
  docx:
    reference-doc: sop_template.docx
    link-citations: true
toc: true
toc-title: "Table of Contents"
bibliography: pansolid_cnv_references.bib
csl: harvard-manchester-metropolitan-university.csl
fig-align: "left"
---

```{r}
#| label: packages
#| warning: FALSE
#| include: FALSE

library(tidyverse)
library(knitr)
library(here)
library(patchwork)
library(janitor)
library(flextable)

```

{{< pagebreak >}}

# Authors

Author: Joe Shaw

Project Lead(s): Joe Shaw, Elizabeth Sollars, Eleanor Baker, Helene Schlecht, George Burghel

Date:	`r Sys.Date()`

Author contact: joseph.shaw2@mft.nhs.uk; joseph.shaw3@nhs.net

# Acronyms

**ALK**: Anaplastic Lymphoma Kinase

**BRAF**: B-Rapidly Accelerated Fibrosarcoma

**CLC**: Acronym unknown. CLC Bio was acquired by Qiagen in 2013.

**CNV**: Copy Number Variant

**ddPC**R: droplet digital Polymerase Chain Reaction

**EGFR**: Epidermal Growth Factor Receptor

**ERBB2**: ERythroBlastic oncogene B 2

**FFPE**: Formalin-Fixed Paraffin Embedded

**FISH**: Fluorescent In-Situ Hybridisation

**GLH**:  Genomic Laboratory Hub

**IHC**:  Immuno-HistoChemistry

**MDM2**: Murine Double Minute 2 

**MET**: Mesenchymal-Epithelial Transition factor

**MYC**: avian MYeloCytomatosis oncogene

**MYCN**: MYC Neuroblastoma

**NCC**: Neoplastic Cell Content

**NGS**: 	Next Generation Sequencing

**NHS**: National Health Service

**SMO**: SMOothened, frizzled class receptor

**WGS**: 	Whole Genome Sequencing

{{< pagebreak >}}

# Purpose

The purpose of this document is to describe the validation of detection of somatic gene amplifications
on the PanSolid v2 QIAseq panel using the PanSolid CLC pipeline at the North West Genomic Laboratory
Hub (GLH).

```{r}
#| label: source-functions-and-scripts
#| warning: FALSE
#| include: FALSE

source(here("scripts/set_shared_drive_filepath.R"))

source(here("scripts/load_processed_validation_data.R"))

source(here("functions/gene_table_functions.R"))

source(here("functions/pansolid_excel_functions.R"))

source(here("functions/cnv_plot_functions.R"))

source(here("functions/primer_functions.R"))

source(here("functions/test_metric_functions.R"))

```

```{r}
#| label: primers-and-targets
#| include: FALSE
#| warning: FALSE

primer_df <- read_csv(paste0(data_folder, 
                             "primers/QIAseq.CDHS-48608Z-11752.primers3 (Converted).csv")) |> 
  clean_names()

target_df <- read_csv(paste0(data_folder,
                             "bed_files/PanSolidv2_GRCh38_noalt_BED.csv")) |> 
  clean_names() |> 
  mutate(target_type = case_when(
    
    grepl(x = name, pattern =  "chr(\\d{1,2}|X):\\d{1,3}.+") == TRUE ~"genomic backbone",
    TRUE ~"gene target"
  ))

```

# Introduction {#sec-introduction}

At the North West GLH, somatic variant testing is performed using the QIAseq methodology (Qiagen) [@xu2017] and Illumina next generation sequencing (NGS) using a large panel of QIAseq primer targets named “PanSolid”. The current PanSolid enrichment, referred to as PanSolidv2 (CDHS-48608Z-11752) contains 
`r length(unique(primer_df$primer))`
 unique QIAseq primers for 
`r length(unique(target_df$region))`
 target gene regions. 
Sequencing data from the PanSolid enrichment is analysed with a pipeline built in the Qiagen CLC Genomic Workbench. Detection of single nucleotide variants and indels on PanSolid has previously been validated ([DOC6024 Validation of QIASeq PanSolid Enrichment]{custom-style="Strong"}). Currently, copy number variants (CNVs) are analysed using a separate QIAseq “core” panel with a bespoke pipeline written in Python, with copy number amplifications reported for 4 genes: *EGFR*, *ERBB2*, *AR* and *MET*. The long-term aim is to move all CNV detection to the PanSolid panel and the CLC pipeline.

The detection of *ERBB2* gene amplifications was validated on the PanSolid enrichment in April 2024 ([DOC6260: Validation of Detecting Somatic *ERBB2* Amplifications with the PanSolid CLC Pipeline]{custom-style="Strong"}). *ERBB2* amplifications were prioritised for validation due to service needs, and were validated by comparison with results from droplet digital PCR (ddPCR) testing. The aim of this validation document is to validate additional amplification genes on the PanSolid workflow.

##	Somatic Gene Amplifications {#sec-somatic-gene-amplifications}

Gene amplification is a common mechanism in the development of cancer [@matsui2013]. Additional gene copies can be present on extra-chromosomal DNA rather than their initial chromosomal loci [@verhaak2019], for example *EGFR* amplifications can be present on extrachromosomal DNA fragments referred to as “double minutes” [@french2019]. “Double minute” refers to a very small (“minute”) bodies of chromatin material with two arms (“double) which were originally visualised by chromosome staining [@cox1965], which have been found to be generated by chromothripsis [@shoshani2021]. The location of genes on ecDNA allows them to be copied many times, and uneven inheritance of ecDNA into daughter cells promotes heterogeneity within the tumour which can act as an "evolutionary force" in cancer development [@decarvalho2018].

The number of additional gene copies can vary between genes and tumour types, ranging as high as hundreds of gene copies. There is no consistent accepted threshold of copy number to classify a gene as “amplified”, although many clinical trials use a threshold of 10 copies as an entry requirement.

Gene amplifications can have clinical relevance for choice of treatment and predicting resistance to treatment, particularly amplifications of genes encoding tyrosine kinase membrane receptors. It is predicted that increasing the gene copy number increases the levels of translated protein, which maintains aberrant cell signalling even in the presence of tyrosine kinase inhibitors (TKIs) [@tanaka2020]. Historically, gene amplifications were detected with fluorescence in-situ hybridisation (FISH) and immunohistochemistry (IHC), but next generation sequencing (NGS) methods are being increasingly used. 

### Gene Coordinates {#sec-gene-coordinates}

```{r}
#| label: pansolid-genes
#| include: FALSE

pansolid_target_loci <- target_df |> 
  filter(target_type == "gene target") |> 
  mutate(single_locus = str_split(name, pattern = ";")) |> 
  unnest(single_locus) |> 
  select(single_locus) |> 
  filter(!duplicated(single_locus)) |> 
  arrange(single_locus)

```

The PanSolid enrichment includes primer targeting
`r length(unique(pansolid_target_loci$single_locus))`
different gene loci. Of these, there are 9 genes which were selected as having amplifications with clinical relevance (@tbl-amplification-coordinates).

```{r}
#| label: tbl-amplification-coordinates
#| tbl-cap: "Gene Coordinates"
#| warning: FALSE
#| echo: FALSE

amp_genes <- load_pansolid_gene_table("Amplifications")

gene_tbl <- read_csv(file = paste0(data_folder, "gene_lists/gene_coordinates.csv"),
                       col_types = "ccccdd")

primer_df_mod <- extract_pansolid_cnv_coordinates(df = primer_df, cnv_coord_col = region) |> 
  mutate(region_length = abs(start-end)) |> 
  rename(primer_start = start,
         primer_end = end)

gene_tbl_mod <- gene_tbl |> 
  mutate(gene_size_kb = round(abs(gene_start - gene_end) / 1000, 1)) |> 
  rowwise() |> 
  mutate(primers_in_gene = count_primers_in_region(chrom = chromosome,
                                                   coord1 = gene_start,
                                                   coord2 = gene_end,
                                                   df = primer_df_mod)) |> 
  filter(gene %in% amp_genes$gene) |> 
  arrange(gene)

gene_target_counts <- target_df |> 
  filter(name %in% amp_genes$gene) |> 
  count(name)

gene_coordinate_tbl <- gene_tbl_mod |> 
  mutate(grch38_coordinates = str_c("chr", chromosome, ":", gene_start, "-", gene_end)) |> 
  select(gene, grch38_coordinates, gene_size_kb, transcript_refseq,
         primers_in_gene) |> 
  left_join(gene_target_counts, 
            join_by("gene" == "name")) |> 
  rename(`Targets in gene` = n,
         `Gene` = gene,
         `Coordinates (GRCh38)` = grch38_coordinates,
         `Size (kb)` = gene_size_kb,
         `Transcript (RefSeq)` = transcript_refseq,
         `Primers in gene` = primers_in_gene) |> 
  mutate(`CLC setting` = case_when(
         `Targets in gene` < 5 ~"Fine",
         `Targets in gene` > 5 ~"Coarse"))

knitr::kable(gene_coordinate_tbl)

```

### Clinical Impact {#sec-clinical-impact}

The clinical impact of amplifications in these genes is summarised below:

- ***ALK***: *ALK* amplifications are observed in many cancer types, and confer a poor prognosis in neuroblastoma [@shreenivas2023].

- ***BRAF***: *BRAF* amplification is a mechanism of resistance to BRAF inhibitor medications in melanoma [@proietti2020].

- ***EGFR***: *EGFR* amplifications can be targeted by EGFR inhibitor medications [@french2019].

- ***ERBB2***: *ERBB2* amplifications are associated with resistance to EGFR-targeted therapies in colorectal cancer [@ross2018].

- ***MDM2***: *MDM2* amplifications are linked to tyrosine-kinase inhibitor resistance in multiple cancers [@hou2019] and targeted anti-MDM2 treatments are in development [@sciot2021].

- ***MET***: *MET* amplification is associated with resistance to EGFR-tyrosine kinase inhibitors (TKIs) [@wang2019;@qin2023].

- ***MYC***: *MYC* amplification is a poor prognostic indicator in patients with medulloblastoma [@sursal2022].

- ***MYCN***: *MYCN* amplifications are found in several cancer types, including medulloblastoma [@sursal2022], and is associated with high-risk prognosis in neuroblastoma [@cohn2009;@irwin2021].

- ***SMO***: determination of *SMO* copy number by FISH is specified for medulloblastoma on the NHS National Genomic Test Directory (code M194)[@nhsengland2024]. The SMO protein is a target for several therapeutics [@rimkus2016].

## Requirements {#sec-requirements}

The requirements for this new method are as follows:

- **Clinical utility:** the test should provide clear results for the 10 listed amplification markers.

- **Clinical validity:** the test should have a defined sensitivity and specificity for these markers, calculated by comparison with an orthogonal test.

- **Dosage accuracy:** it should be shown how accurate the test is at detecting amplifications of different copy number states, expressed as a correlation between the test and copy numbers from an orthogonal test.

- **Quality control:** the test should have clear quality control thresholds for deciding when the test results should be reported and when the test has failed.

- **Variability:** the test should have defined intra-run variation (repeatability) and inter-run variation (repeatability) for these amplifications.

- **Visualisation:** the results should be presented in a clear and visual manner.

- **Analysis:** there should be a clear procedure for analysis of copy number variants by laboratory staff.

{{< pagebreak >}}

# Methodology {#sec-methodology}

## Samples {#sec-methods-samples}

Samples were received at the North West GLH between December 2019 and July 2024.
Details of the normal control cohort used for the PanSolid CLC pipeline are given in the ERBB2 validation document ([DOC6260]{custom-style="Strong"}). 
In total, 
`r length(unique(amp_validation_stdev_results_collated$labno))`
different DNA samples were tested on the PanSolid version 2 enrichment during this validation. 
Samples were tested from patients with a variety of different types of cancer, with patient age at sample receipt ranging from 
`r round(min(amp_validation_sample_patient_info$years_at_sample_receipt, na.rm = TRUE), 0)`
 to 
`r round(max(amp_validation_sample_patient_info$years_at_sample_receipt, na.rm = TRUE), 0)`
years (median: `r round(median(amp_validation_sample_patient_info$years_at_sample_receipt, na.rm = TRUE), 0)` years). 
Samples from many different types of cancer were tested, which are summarised in the supplementary information (@tbl-cancer-types). The details of the sample types (@tbl-tissue-types) and neoplastic cell contents (NCC) (@tbl-ncc) are also provided in the supplementary information.

## Reference Materials {#sec-methods-reference-materials}

### SeraCare reference materials {#sec-seracare-reference-materials}

Reference materials were ordered from the company SeraCare to act as positive controls for different gene amplifications. Each control consists of DNA extracted from an FFPE sample of a stable cell line, spiked with plasmid DNA for specific genes at different quantities. The amplified genes included in the SeraCare reference materials are shown in @tbl-seracare-reference-material-genes. The details of the SeraCare controls are shown in the Supplementary Information  (@tbl-seracare-reference-material-details). 

```{r}
#| label: tbl-seracare-reference-material-genes
#| tbl-cap: "SeraCare reference material genes"
#| echo: FALSE
#| warning: FALSE

seracare_gene_overlap <- read_csv(file = paste0(data_folder, 
                                                 "seracare_reference_materials/",
                                                 "seracare_gene_copies.csv")) |> 
  filter(reference_material_short == "WT") |> 
  select(gene) |> 
  mutate(`Targetted within this validation` = ifelse(gene %in% amp_genes$gene, "Yes", "No")) |> 
  rename(`Gene` = gene)
  
seracare_details <- read_csv(file = paste0(data_folder,
                                           "seracare_reference_materials/",
                                           "seracare_sample_details.csv")) 

kable(seracare_gene_overlap)

```

### Limit of detection DNA mixtures {#sec-methods-lod-mixtures}

A limit of detection experiment was performed using the Seraseq® Solid Tumor CNV Mix, +12 copies reference material, which represented DNA from tumour cells, and the Seraseq® TNA (DNA) WT Mix, which represented DNA from normal cells. The two reference materials were mixed together to mimic samples with neoplastic cell contents of 30%, 20%, 10% and 0%. The final volume of each DNA mixture was 20 µl and the total DNA concentration was 6 ng/µl, which is the standard input for the PanSolid NGS workflow. These DNA mixtures were made on worksheet WS144265 and run on the PanSolid version 2 NGS workflow on worksheet WS144291. This limit of detection experiment is different to the limit of detection experiment performed on the PanSolid version 1 workflow for the validation of *ERBB2* amplifications ([DOC6260]{custom-style="Strong"}).

## DNA extraction {#sec-methods-dna-extraction}

For the majority of samples, DNA was extracted using the QIASymphony extraction method ([DOC6251: QIAsymphony DNA FFPE Extraction Procedure]{custom-style="Strong"}). The summary of DNA extraction methods is shown in the supplementary information (@tbl-extraction-types).

## Next generation sequencing

```{r}
#| label: pansolid-worksheets
#| include: FALSE

pansolid_ws <- read_csv(file = paste0(data_folder,
                                      "validation/processed/",
                                      "pansolid_worksheet_details.csv"),
                        show_col_types = FALSE)

```

Samples were tested on version 2 (CDHS-48608Z-11752) of the PanSolid QIAseq enrichment ([DOC5925: QIAseq PanSolid DNA Panel NGS Library Preparation]{custom-style="Strong"}) with sequencing on an Illumina Novaseq. The NGS data described in this validation document comes from
`r length(unique(pansolid_ws$pcrid))`
 worksheets performed between 
 `r format.Date(x = min(pansolid_ws$date), format = "%B %Y")`
  and
`r format.Date(x = max(pansolid_ws$date), format = "%B %Y")`
.

## Bioinformatic analysis {#sec-methods-bioinformatics}

The CLC pipeline, including details of the methodology and quality metrics, is described in the ERBB2 amplifications validation document ([DOC6260]{custom-style="Strong"}). All amplification genes were analysed on the “coarse” setting, except for MYC. MYC has only 3 targets on the PanSolid enrichment, and preliminary work showed that the coarse setting could not identify MYC amplifications in positive controls. The “fine” setting was used specifically for MYC to account for the lower number of QIAseq targets. The version of the PanSolid CLC pipeline tested in this validation was PanSolid Workflow v2.2.

Briefly describe control cohort.

## Orthogonal testing {#sec-orthogonal-testing}
### Droplet digital PCR for *ERBB2*, *MYC*, *MET*, *BRAF* and *EGFR* {#sec-methods-ddpcr}

Amplification results for the *ERBB2*, *MYC*, *MET*, *BRAF* and *EGFR* genes were confirmed using ddPCR. ddPCR assays were designed using the workflow for confirming constitutional CNVs, which involves a universal forward primer and a reference assay for the *AP3B1* gene on chromosome 5 ([DOC4304 CNV Confirmation Using Droplet Digital PCR]{custom-style="Strong"}). ddPCR was performed using a BioRad QX200 system with 5ng DNA input per well. Each assay was validated for use and then used to test DNA from clinical FFPE samples and SeraCare controls. The results for the ERBB2 ddPCR were previously reported in [DOC6260]{custom-style="Strong"}. Details of the primer and probe sequences, reaction mix  and thermocycling conditions (@tbl-ddpcr-thermocycler-programme) are given in the Appendix.

### Whole genome sequencing {#sec-methods-wgs}

Samples which had been tested using whole genome sequencing (WGS) were selected for this validation, which included samples from the Tessa Jowell BRAIN MATRIX Platform Study (NCT04274283) [@watts2022]. 
WGS was performed on DNA extracted from fresh-frozen tissue by Illumina Laboratory Services at the Wellcome Trust Sanger Institute in Cambridge, as part of the NHS Genomics Medicine Service. 
Formalin-fixed paraffin-embedded (FFPE) tissue from the same tumour block as the fresh frozen tissue used for WGS was used as the sample source for PanSolid testing. 
Samples included in this validation were analysed by WGS between December 2022 to February 2024, using the “somatic variants and pertinent germline findings in cancer susceptibility genes” pipeline version 2.28 to version 3.6.2.
WGS results were taken directly from the HTML reports generated by the Genomics England pipeline for domains 1, 2 and 3.

## Validation analysis {#sec-methods-validation-analysis}

Validation analysis was performed using the R programming language (version 4.4.1) [@rcore2024] relying mainly on packages from the tidyverse [@wickham2019]. This validation document is written in Quarto [@Allaire_Quarto_2024] and is publicly available on [Github](https://github.com/joeshaw824/pansolid_cnv_validation).

## Data locations {#sec-data-locations}

All data analysed in this validation is saved at this file location:

S:/central shared/Genetics/Mol_Shared/Development.Team/Pan Solid CLC Somatic Amplifications Validation/pansolid_cnv_r_files/data

{{< pagebreak >}}

# Results {#sec-results}

## Overall results {#sec-overall-results}

```{r}
#| label: good-quality-results
#| include: FALSE

good_quality_samples <- amp_validation_stdev_results_collated |> 
  filter(st_dev_signal_adjusted_log2_ratios < 0.7)

pos_results_for_plot <- amp_validation_pos_cnv_results_collated |> 
  filter(labno %in% good_quality_samples$labno)

```

Overall 
`r nrow(amp_validation_stdev_results_collated)`
replicates from 
`r length(unique(amp_validation_stdev_results_collated$labno))` 
different samples were tested using the PanSolid NGS workflow.
Of these, 
`r nrow(good_quality_samples)`
had signal-adjusted noise metrics within the acceptable range of 0-0.7. 

```{r}
#| label: amp-gene-count
#| include: FALSE

pos_cnv_results_normals_removed <- amp_validation_pos_cnv_results_collated |> 
  filter(gene != "no positive calls")

tbl_amp_gene_summary <- amp_validation_pos_cnv_results_collated |> 
  count(gene, .drop = FALSE) |> 
  filter(gene != "no positive calls") |> 
  mutate(`CLC setting` = case_when(
    gene %in% c("MYC", "MYCN") ~"Fine",
    TRUE ~"Coarse")) |> 
  rename(Amplifications = n,
         Gene = gene) |> 
  select(Gene, `CLC setting`, Amplifications)

min_fold_change_detected <- round(min(pos_cnv_results_normals_removed$fold_change), 1)

max_fold_change_detected <- round(max(pos_cnv_results_normals_removed$fold_change), 1)

```

`r sum(tbl_amp_gene_summary$Amplifications)`
amplifications with fold changes above the threshold of 2.8 were detected in the 9 target genes (@tbl-amp-gene-summary).

```{r}
#| label: tbl-amp-gene-summary
#| tbl-cap: "Amplifications detected by gene"
#| echo: FALSE

knitr::kable(tbl_amp_gene_summary |> 
  janitor::adorn_totals())

```

Amplification fold changes ranged from just above the threshold at 
`r min_fold_change_detected`,
(predicted copy number: `r round(min_fold_change_detected * 2, 1)`)
to
`r max_fold_change_detected`
(predicted copy number: `r round(max_fold_change_detected * 2, 1)`),
and were detected across a range of different cancer types (@fig-pansolid-results-by-cancer-type-plot).

```{r}
#| label: pansolid-results-by-cancer-type
#| include: FALSE

amp_results_with_cancer_types <- amp_validation_all_amp_gene_results_collated |> 
  left_join(amp_validation_sample_patient_info,
            by = "labno", 
            relationship = "many-to-one")

results_by_cancer_type <- ggplot(amp_results_with_cancer_types |> 
         filter(!cancer_tissue_source %in% c("reference material")) |> 
         mutate(cancer_tissue_source = case_when(
           cancer_tissue_source == "central nervous system" ~"CNS",
           cancer_tissue_source == "hepatocellular carcinoma" ~"liver",
           TRUE ~cancer_tissue_source
         ),
         max_region_fold_change = case_when(
           max_region_fold_change < 1 ~1,
           TRUE ~max_region_fold_change
         )), 
       aes(x = gene,
           y = max_region_fold_change)) +
  geom_jitter(shape = 21, aes(fill = pansolid_call), width = 0.2,
              alpha = 0.6) +
  scale_fill_manual(values = c( "#FF3333", "#FFFFFF")) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
        legend.position = "bottom") +
  scale_y_log10(breaks = c(1, 2.8, 10, 100)) +
  geom_hline(yintercept = 2.8, linetype = "dashed") +
  facet_wrap(~cancer_tissue_source, nrow = 3, axes = "all_x") +
  labs(x = "", y = "Fold change",
       title = "PanSolid NGS results by cancer type",
       fill = "")

```

```{r}
#| label: fig-pansolid-results-by-cancer-type-plot
#| fig-subcap: "Gene amplification results from PanSolid NGS arranged by cancer type. Results below a fold change of 1 are changed to 1 to allow log scale plotting. This plot does not include the results from the SeraCare reference materials. CNS: central nervous system."
#| fig-height: 8.6
#| fig-width: 6
#| echo: FALSE

results_by_cancer_type

```

{{< pagebreak >}}

## Coarse setting: *ALK*, *BRAF*, *EGFR*, *ERBB2*, *MET*, *MDM2* and *SMO* results {#sec-results-coarse-setting}

The CLC coarse setting detected amplifications in all the target genes except the *ALK* gene (@tbl-amp-gene-summary). The 1 amplification detected in the *SMO* gene was a false positive in a sample with a signal-adjusted noise value of 0.89 (lab number: 23032153). For the remaining genes, a range of amplifications were detected. For each gene, there was variation in the amplified region, which in some cases only included the gene of interest and in others expanded to include additional genomic regions. In nearly all cases, every exon in the canonical RefSeq gene transcript was contained within the amplified region. There were 3 samples where 2 amplified regions were detected in the *EGFR* gene, whilst for other samples only a single region call was made. 

{{< pagebreak >}}

## Fine setting: *MYC* and *MYCN* results {#sec-results-fine-setting}

```{r}
#| label: myc-amplifications
#| echo: FALSE

myc_samples <- amp_validation_pos_cnv_results_collated |> 
  filter(gene == "MYC" & !labno %in% seracare_details$`DNA number`)

mycn_samples <- amp_validation_pos_cnv_results_collated |> 
  filter(gene == "MYCN" & !labno %in% seracare_details$`DNA number`)

```

Amplifications for the *MYC* gene were detected in 
`r length(unique(myc_samples$labno))` 
samples, with fold changes ranging from 
`r round(min(myc_samples$fold_change), 1)` 
to 
`r round(max(myc_samples$fold_change), 1)`,
whilst a *MYCN* amplification was only detected in
`r length(unique(mycn_samples$labno))` 
sample with a fold change of
`r round(mycn_samples$fold_change, 1)`
The full width of the *MYC* gene was covered in all calls except for sample 24031627, in which only the latter 2 exons of the gene had an amplification (@fig-myc-zoom).
In one sample (24024116) a *MYC* amplification was detected on a background of increased fold change across all targets on 8q, indicating an 8q gain.

```{r}
#| label: myc-amplification-plots
#| echo: FALSE

myc_plot_wide <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "MYC",
  interval = 1000000,
  buffer = 500000,
  title = "MYC results"))

myc_labno_plot <- make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "MYC",
  interval = 1000,
  buffer = 5000,
  title = "MYC results zoomed in")

myc_plot_zoom <- myc_labno_plot[[4]] +
  coord_cartesian(xlim = c(127732000, 127746000))

myc_exon_plot <- make_exon_plot(plot_xmin = 127732000, 
                              plot_xmax = 127746000,
                              interval = 1000,
                              chromosome = "8")

myc_primer_plot <- make_primer_plot(plot_xmin = 127732000, 
                              plot_xmax = 127746000,
                              interval = 1000,
                              chromosome = "8")

myc_zoom_triptych <- (myc_plot_zoom / myc_primer_plot / myc_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-myc-wide
#| echo: FALSE
#| fig-cap: "All calls in the MYC gene"
#| fig-height: 6.3
#| fig-width: 6

myc_plot_wide

```

```{r}
#| label: fig-myc-zoom
#| echo: FALSE
#| fig-cap: "MYC gene calls zoomed in"
#| fig-height: 6.3
#| fig-width: 6

myc_zoom_triptych

```

{{< pagebreak >}}

## Comparison to ddPCR {#sec-results-ddpcr-comparison}

ddPCR was performed for a selection of samples for the *BRAF*, *EGFR*, *ERBB2*, *MET* and *MYC* genes. The *ERBB2* ddPCR work was performed as part of the separate validation of *ERBB2* amplification detection ([DOC6260]{custom-style="Strong"}), which included DNA extracted on the Cobas and QIAsymphony methods. 11 *ERBB2* samples extracted with the QIAsymphony method are included in this analysis, as the QIAsymphony method was validated as the sole DNA extraction method for FFPE tissue at the Manchester GLH in April 2024. A copy number threshold of 5 was used to classify ddPCR results as "amplified" and "non-amplified".

```{r}
#| label: ddpcr-copy-number-threshold
#| include: FALSE

ddpcr_cnv_amp_threshold <- 5

```

```{r}
#| label: ddpcr-comparison
#| include: FALSE

ddpcr_vs_pansolid <- validation_ddpcr_collated |> 
  mutate(sample_experiment = str_c(sample, "_", experiment)) |> 
  filter(target == "ch1_target" & 
           experiment %in% c("MYC Ex3_1",
                              "BRAF Ex10_1",
                              "MET Ex2_1",
                              "EGFR Ex6_1")) |> 
    filter(!duplicated(sample_experiment)) |>  
  inner_join(amp_validation_all_amp_gene_results_collated,
             join_by(sample == labno, 
                     gene)) |> 
  mutate(labno_suffix_gene = str_c(labno_suffix, "_", gene)) |> 
  # Some samples were run twice on PanSolid
  filter(!duplicated(labno_suffix_gene)) |> 
  mutate(ddpcr_result = case_when(
    cnv >= ddpcr_cnv_amp_threshold ~"amplification",
    cnv < ddpcr_cnv_amp_threshold ~"normal result"),
    
    outcome = case_when(
      
      ddpcr_result == "amplification" & pansolid_call == "amplification" 
      ~"true_positive",
      ddpcr_result == "normal result" & pansolid_call == "normal result" 
      ~"true_negative",
      ddpcr_result == "amplification" & pansolid_call == "normal result"
      ~"false_negative",
      ddpcr_result == "normal result" & pansolid_call == "amplification" 
      ~"false_positive"
    ))

```

```{r}
#| label: ddpcr-summary
#| include: FALSE

ddpcr_summary <- ddpcr_vs_pansolid |> 
  count(gene, outcome) |> 
  pivot_wider(id_cols = gene,
              names_from = outcome,
              values_from = n,
              values_fill = 0) |> 
  mutate(false_positive = 0) |> 
  adorn_totals() |> 
  mutate("Sensitivity (%)" = round(calc_sensitivity(tp = true_positive,
                                          tn = true_negative,
                                          fn = false_negative,
                                          fp = false_positive), 1),
         "Specificity (%)" = round(calc_specificity(tp = true_positive,
                                          tn = true_negative,
                                          fn = false_negative,
                                          fp = false_positive), 1),
         "Samples" = true_positive + true_negative + false_negative +
                         false_positive) |> 
  rename(`Gene` = gene,
         `True negatives` = true_negative,
         `True positives` = true_positive,
         `False negatives` = false_negative,
         `False positives` = false_positive) |> 
  select(`Gene`, "Samples", `True negatives`, `True positives`, `False negatives`,
         `False positives`, "Sensitivity (%)", "Specificity (%)")

```

There was good agreement between ddPCR and PanSolid, with only 3 discrepant results out of `r ddpcr_summary[5, 2]` samples and an overall sensitivity of 93%.

```{r}
#| label: tbl-ddpcr-vs-pansolid
#| tbl-cap: "PanSolid comparison to ddPCR"
#| echo: FALSE

kable(ddpcr_summary)

```

### ddPCR dosage correlation {#sec-ddpcr-dosage-correlation}

There was a good correlation in the dosage quantification between the two techniques for each gene, as measured using Pearson's coefficient (@fig-ddpcr-vs-pansolid-ngs). For the *MYC* gene, this correlation was consistent to copy numbers over 150.

```{r}
#| label: fig-ddpcr-vs-pansolid-ngs
#| fig-cap: "ddPCR vs PanSolid by gene"
#| echo: FALSE

ddpcr_ngs_plot <- ggplot(ddpcr_vs_pansolid, aes(x = cnv, y = max_region_fold_change)) +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "ddPCR copy number",
       y = "PanSolid fold change",
       title = "ddPCR vs PanSolid by gene") +
  ggpubr::stat_cor(method = "pearson", label.x = 5, label.y = 0)  +
  facet_wrap(~gene, scales = "free")

ddpcr_ngs_plot

```

### ddPCR discordant results {#sec-ddpcr-discordant-results}

Three samples had a discordant result from ddPCR when compared to the PanSolid NGS result.
Two of these samples (24002064 and 23033921) had borderine results on both ddPCR and PanSolid NGS.
The remaining sample (24037724) had a *MYC* copy number of 9 on ddPCR, with a fold change of only 2.2 detected on PanSolid NGS. 
The whole genome plot for this sample showed a deletion at chromosome 5q, including the location of the *AP3B1* ddPCR reference gene, which probably caused an artificially high ddPCR copy number.

```{r}
#| label: tbl-ddpcr-false-negatives
#| tbl-cap: "False negative samples"
#| echo: FALSE

ddpcr_false_neg_table <- ddpcr_vs_pansolid |> 
  filter(outcome == "false_negative") |> 
  mutate(`PanSolid fold change` = round(max_region_fold_change, 1),
         `ddPCR copy number` = round(cnv, 1)) |> 
  rename(`ddPCR result` = ddpcr_result,
         `Lab number` = sample,
         `Gene` = gene,
         `PanSolid result` = pansolid_call) |> 
  select(`Lab number`,  `Gene`, `ddPCR copy number`, 
         `PanSolid fold change`, `ddPCR result`, `PanSolid result`)

kable(ddpcr_false_neg_table)

```

{{< pagebreak >}}

## Comparison to WGS {#sec-results-wgs-comparison}

```{r}
#| label: wgs-sample-extraction-types
#| include: FALSE

pansolid_wgs_samples <- amp_validation_sample_patient_info |> 
  filter(nhsno %in% wgs_html_ids$nhs_no_clean) 

pansolid_wgs_samples_cobas <- pansolid_wgs_samples |> 
  filter(method_name == "COBAS")

pansolid_wgs_samples_qs <- pansolid_wgs_samples |> 
  filter(method_name == "QIAsymphony_DNA_FFPE")

pansolid_wgs_samples_ff <- pansolid_wgs_samples |> 
  filter(method_name == "Fresh tissue")

```

DNA from patient samples previously tested by WGS was also tested using PanSolid NGS. 
In total, there were
`r length(unique(pansolid_wgs_samples$labno))`
samples tested from 
`r length(unique(pansolid_wgs_samples$nhsno))`
patients,
using 3 different extraction methods:
`r nrow(pansolid_wgs_samples_qs)`
had DNA extracted from FFPE tissue via the QIAsymphony method, 
`r nrow(pansolid_wgs_samples_cobas)`
had DNA extracted from FFPE tissue via the Cobas method and
`r nrow(pansolid_wgs_samples_ff)`
had DNA extracted from fresh frozen tissue.

The PanSolid NGS amplification results for the `r length(amp_genes$gene)` target genes (@tbl-amplification-coordinates) were compared against the results from WGS for the same genes where the variant type was listed as "DUP" or "GAIN".

```{r}
#| label: compare-pansolid-and-wgs
#| include: FALSE

all_amp_gene_results_with_ids <- amp_validation_all_amp_gene_results_collated |> 
  left_join(amp_validation_sample_patient_info,
            by = "labno", relationship = "many-to-one") |> 
  select(worksheet, labno, suffix, patient_name, nhsno, pathno, tissue_type, method_name,
         filepath, gene, max_region_fold_change, min_region_fold_change, pansolid_call)

wgs_cnvs_with_ids <- wgs_html_cnvs |> 
  left_join(wgs_html_ids, by = "filepath", relationship = "many-to-one")

pansolid_vs_wgs_amps <- all_amp_gene_results_with_ids |> 
  # One WGS sample was repeated for repeatability studies on worksheets
  # WS144291 and WS144291, so I have removed these repeats for clarity
  filter(!worksheet %in% c("WS144291", "WS144364")) |> 
  filter(nhsno %in% wgs_html_ids$nhs_no_clean) |> 
  left_join(wgs_cnvs_with_ids |> 
              filter(cnv_class %in% c("DUP", "GAIN")), 
            join_by(nhsno == nhs_no_clean, gene == gene),
            relationship = "many-to-many")

```

WGS did detect copy number losses and regions of loss of heterozygosity in some target genes, but these were excluded as the current aim of the PanSolid CLC pipeline is to detect gene amplifications.

```{r}
#| label: wgs-calls-not-dup-or-gain
#| include: FALSE

non_dup_gain_wgs_results <- wgs_cnvs_with_ids |> 
              filter(!cnv_class %in% c("DUP", "GAIN") &
                       gene %in% amp_genes$gene)

non_dup_gain_wgs_results_summary <- non_dup_gain_wgs_results |> 
  count(gene, cnv_class)

```

Results were compared for samples extracted using the QIAsymphony method, as this is now the validated DNA extraction method for FFPE samples at the North West GLH (Manchester site). One sample (PanSolid NGS lab number: 24018922; WGS lab number: 24015386) was excluded from the comparison as the FFPE shavings used for QIAsymphony extraction had a different pathology block identifier to the fresh frozen samples used for WGS. Another sample (PanSolid NGS lab number: 24030364) was excluded from the comparison as it had a signal adjusted noise value above 1.

```{r}
#| label: compare-pansolid-and-wgs-sample-selection
#| include: FALSE

pansolid_vs_wgs_amps_selection <- pansolid_vs_wgs_amps |> 
  filter(method_name == "QIAsymphony_DNA_FFPE") |> 
  filter(!labno.x %in% c("24030945", 
                      # This sample pathology block does not match the WGS
                      "24018922",
                      # This sample has a signal-adjusted noise above 1
                      "24030364"))

```

```{r}
#| label: wgs-cnv-calls-below-10
#| include: FALSE

wgs_cnvs_below_ten <- wgs_html_cnvs |> 
  filter(cnv_class %in% c("DUP", "GAIN") & cnv_copy_number < 10 &
           gene %in% amp_genes$gene)

```

In the WGS results there were 
`r nrow(wgs_cnvs_below_ten)` 
copy number gains in the targeted genes which had total copy numbers below 10, ranging from 
`r min(wgs_cnvs_below_ten$cnv_copy_number)` -
`r max(wgs_cnvs_below_ten$cnv_copy_number)` 
(`r min(wgs_cnvs_below_ten$cnv_copy_number) - 2`
-
`r max(wgs_cnvs_below_ten$cnv_copy_number) - 2`
additional copies).
The PanSolid pipeline fold-change threshold is set to detect a minimum of 10 target copies (8 additional copies) at 50% neoplastic cell content. 
Consequently, the amplification statuses for genes with WGS copy numbers below 10 were classified as "not amplified" for comparison against the PanSolid NGS results.

```{r}
#| label: wgs-comparison-for-qs-samples
#| include: FALSE

pansolid_vs_wgs_amps_selection_cnvs_above_ten <- pansolid_vs_wgs_amps_selection |> 
  mutate(wgs_result = case_when(
    cnv_copy_number >= 10 ~"Gain detected",
    cnv_copy_number < 10 | is.na(cnv_copy_number) ~"No gain detected"
  )) |> 
  select(worksheet, labno.x, labno.y, patient_name.x, nhsno, pathno, wgs_pathno, method_name, 
         gene, max_region_fold_change, min_region_fold_change, pansolid_call,
         wgs_result, cnv_class, cnv_copy_number, confidence_support) |> 
  mutate(outcome = case_when(
    (wgs_result == "Gain detected" & pansolid_call == "amplification") ~"true_positive",
    
    (wgs_result == "No gain detected" & pansolid_call == "normal result") ~"true_negative",
    
    (wgs_result == "Gain detected" & pansolid_call == "normal result") ~"false_negative",
    
    (wgs_result == "No gain detected" & pansolid_call == "amplification") ~"false_positive"),
  
    outcome = factor(outcome, levels = c("true_negative",
                                         "true_positive",
                                         "false_negative",
                                         "false_positive")))

wgs_pansolid_summary_table <- pansolid_vs_wgs_amps_selection_cnvs_above_ten |> 
  group_by(gene, outcome) |> 
  count() |> 
  pivot_wider(id_cols = c(gene),
              names_from = outcome,
              values_from = n,
              values_fill = 0) |> 
  adorn_totals() |> 
  mutate("Sensitivity (%)" = round(calc_sensitivity(tp = true_positive,
                                          tn = true_negative,
                                          fn = false_negative,
                                          fp = false_positive), 1),
         "Specificity (%)" = round(calc_specificity(tp = true_positive,
                                          tn = true_negative,
                                          fn = false_negative,
                                          fp = false_positive), 1),
         "Samples" = true_positive + true_negative + false_negative +
                         false_positive) |> 
  rename(`Gene` = gene,
         `True negatives` = true_negative,
         `True positives` = true_positive,
         `False negatives` = false_negative,
         `False positives` = false_positive) |> 
  select(`Gene`, "Samples", `True negatives`, `True positives`, `False negatives`,
         `False positives`, "Sensitivity (%)", "Specificity (%)")

```

The results from the PanSolid pipeline compared to the results from WGS are shown in @tbl-wgs-comparison.

```{r}
#| label: tbl-wgs-comparison
#| tbl-cap: "Comparison with WGS results"
#| echo: FALSE

kable(wgs_pansolid_summary_table)

```

```{r}
#| label: wgs-comparison-fresh-frozen-samples
#| include: FALSE

ff_wgs_pansolid <- pansolid_vs_wgs_amps |> 
  filter(method_name == "Fresh tissue") |> 
  mutate(wgs_result = case_when(
    cnv_copy_number >= 10 ~"Gain detected",
    cnv_copy_number < 10 | is.na(cnv_copy_number) ~"No gain detected"
  )) |> 
  select(worksheet, labno.x, patient_name.x, nhsno, pathno, wgs_pathno, method_name, 
         gene, max_region_fold_change, min_region_fold_change, pansolid_call,
         wgs_result, cnv_class, cnv_copy_number, confidence_support) |> 
  mutate(outcome = case_when(
    (wgs_result == "Gain detected" & pansolid_call == "amplification") ~"true_positive",
    
    (wgs_result == "No gain detected" & pansolid_call == "normal result") ~"true_negative",
    
    (wgs_result == "Gain detected" & pansolid_call == "normal result") ~"false_negative",
    
    (wgs_result == "No gain detected" & pansolid_call == "amplification") ~"false_positive"),
  
    outcome = factor(outcome, levels = c("true_negative",
                                         "true_positive",
                                         "false_negative",
                                         "false_positive")))

ff_wgs_pansolid_summary <- ff_wgs_pansolid |> 
  group_by(gene, outcome) |> 
  count() |> 
  pivot_wider(id_cols = c(gene),
              names_from = outcome,
              values_from = n,
              values_fill = 0)

```

### EGFR vIII result




### WGS discordant results {#sec-wgs-discordant-result}

There was a single false negative result: for sample 24030962, which was extracted using the QIAsymphony method, PanSolid NGS did not detect an amplification for *EGFR*, whilst DNA extracted from fresh frozen tissue form the sample pathology block (23033921) had an *EGFR* amplification of 14 copies detected on NGS. 
The same DNA from fresh-frozen tissue showed a borderline *EGFR* fold change of 2.7 when tested using PanSolid NGS.

To investigate this discrepancy, both DNA samples were tested by ddPCR for *EGFR*. 
The ddPCR showed similar results to PanSolid NGS, with the QIAsymphony-extracted DNA having a normal *EGFR* result whilst the DNA from fresh-frozen tissue had a borderline *EGFR* amplification. 
This indicates that the discrepancy between the PanSolid NGS result for QIAsymphony-extracted DNA and the WGS result is due to intra-tumour heterogeneity for *EGFR* copy number in the specimens used for DNA extraction. 

```{r}
#| label: wgs-false-negative
#| include: FALSE

false_neg_labnos <- c("24030962", "23033921")

false_neg_extraction <- amp_validation_sample_patient_info |> 
  filter(labno %in% false_neg_labnos) |> 
  select(labno, neoplastic_cell_content, method_name)

false_neg_pansolid <- amp_validation_all_amp_gene_results_collated |> 
  filter(labno %in% false_neg_labnos & gene == "EGFR") |> 
  mutate(pansolid_fold_change = round(max_region_fold_change, 1)) |> 
  select(labno, pansolid_fold_change)

false_neg_wgs <- wgs_cnvs_with_ids |> 
  filter(labno %in% false_neg_labnos & gene == "EGFR") |> 
  select(labno, cnv_copy_number) |> 
  rename(wgs_copy_number = cnv_copy_number)

false_neg_ddpcr <- validation_ddpcr_collated |> 
  filter(target_type == "Ch1Unknown" & sample %in% false_neg_labnos &
           experiment == "EGFR Ex6_1") |> 
  mutate(ddpcr_copy_number = round(cnv, 1)) |> 
  select(sample, ddpcr_copy_number) |> 
  rename(labno = sample)

false_neg_collated <- false_neg_extraction |> 
  left_join(false_neg_pansolid, by = "labno") |> 
  left_join(false_neg_wgs, by = "labno") |> 
  left_join(false_neg_ddpcr, by = "labno") |> 
  rename(`Lab number` = labno,
         `NCC` = neoplastic_cell_content,
         `DNA extraction` = method_name,
         `PanSolid fold change` = pansolid_fold_change,
         `WGS copy number` = wgs_copy_number,
         `ddPCR copy number` = ddpcr_copy_number)

```

```{r}
#| label: tbl-wgs-false-negative
#| tbl-cap: "EGFR results for discordant samples"
#| echo: FALSE

kable(false_neg_collated)

```

### WGS dosage correlation {#sec-wgs-dosage-correlation}

```{r}
#| label: wgs-dosage-accuracy
#| echo: FALSE

pos_cnv_results_with_ids <- amp_validation_pos_cnv_results_collated |> 
  left_join(amp_validation_sample_patient_info, by = "labno",
            relationship = "many-to-one")

pansolid_wgs_dosage <- pos_cnv_results_with_ids |> 
  filter(gene %in% c("EGFR", "MDM2") &
           # Remove EGFR vIII call
           labno != "24030966") |> 
  select(worksheet, labno, patient_name, nhsno, method_name, gene,
         fold_change, start, end) |>
   mutate(pansolid_copy_number = fold_change * 2) |> 
  left_join(wgs_cnvs_with_ids, join_by("nhsno" == "nhs_no_clean",
                                       "gene" == "gene")) |>  
  filter(!is.na(variant_type))

wgs_pansolid_dosage_plot <- ggplot(pansolid_wgs_dosage,
                                   aes(x = cnv_copy_number, y = pansolid_copy_number)) +
  geom_point(shape = 21, size = 3, alpha = 0.6,
             aes(fill = method_name)) +
  theme_bw() +
  labs(x = "WGS copy number", y = "Pansolid fold change") +
  geom_abline(linetype = "dashed") +
  ylim(0, 400) +
  xlim(0, 400) +
  facet_wrap(~gene) +
  ggpubr::stat_cor(method = "pearson", label.x = 100, label.y = 25)

wgs_pansolid_dosage_plot

```

### WGS coordinate correlation {#sec-wgs-coordinate-correlation}

```{r}
#| label: wgs-coordinate-accuracy
#| echo: FALSE

x <- pos_cnv_results_with_ids |> 
  mutate(test_extraction = paste0("pansolid_", method_name)) |> 
  select(nhsno, labno, gene, start, end, test_extraction) |> 
  rename(cnv_start = start,
         cnv_end = end) |> 
  filter(gene %in% c("EGFR", "MDM2") &
           # Remove EGFR vIII call
           labno != "24030966") |> 
  filter(nhsno %in% pansolid_wgs_dosage$nhsno)

y <- wgs_cnvs_with_ids |> 
  select(nhs_no_clean, labno, gene, cnv_start, cnv_end) |> 
  rename(nhsno = nhs_no_clean) |> 
  filter(gene %in% c("EGFR", "MDM2") & nhsno %in% pansolid_wgs_dosage$nhsno) |> 
  mutate(test_extraction = "wgs_fresh_frozen")

z <- rbind(x, y)

ggplot(z |> 
          filter(gene == "EGFR"), aes(x = cnv_start, y = test_extraction)) +
  geom_segment(aes(x = cnv_start, xend = cnv_end, 
                     y = test_extraction, yend = test_extraction),
                 linewidth = 2) +
  facet_wrap(~nhsno) +
  coord_cartesian(xlim = c(55019017 - 1000000,	55211628 + 100000))

ggplot(z |> 
          filter(gene == "MDM2"), aes(x = cnv_start, y = test_extraction)) +
  geom_segment(aes(x = cnv_start, xend = cnv_end, 
                     y = test_extraction, yend = test_extraction),
                 linewidth = 2) +
  facet_wrap(~nhsno) 

```


{{< pagebreak >}}

## Limit of detection {#sec-results-lod}

### SeraCare reference materials {#sec-results-lod-seracare-neat}

The Seraseq® TNA (DNA) WT Mix was tested on the PanSolid v2 enrichment on worksheet WS144291 and the +3 copies, +6 copies and +12 copies reference materials were tested on worksheet WS139890. The results for the 5 genes with defined copy number gains in the reference materials which are also on the list of targets for this validation are shown in  Table 1. The whole genome plot for each reference material is shown in Figure 3.

The PanSolid pipeline results were consistently higher than the predicted fold change and the results provided by SeraCare for the EGFR and ERBB2 genes for the +3 copies, +6 copies and +12 copies reference materials (@tbl-seracare-pansolid-ngs). Conversely, the PanSolid results for MYC were consistently lower than the predicted fold change and SeraCare results (@fig-seracare-ngs-pansolid). This relationship was also observed when the ddPCR results for each reference material were compared to the ddPCR copy numbers provided by SeraCare (@fig-seracare-ddpcr-pansolid).

```{r}
#| label: seracare-ngs-comparison
#| include: FALSE

seracare_gene_copies <- read_csv(file = paste0(data_folder, 
                                                 "seracare_reference_materials/",
                                                 "seracare_gene_copies.csv")) |> 
  mutate(total_copies_ddpcr_seracare = additional_copies_ddpcr + 2,
         total_copies_ngs_seracare = additional_copies_ngs + 2,
         reference_material_short = factor(x = reference_material_short,
                                           levels = c("WT", "3 copies added",
                                           "6 copies added", "12 copies added")))

seracare_ids <- amp_validation_all_amp_gene_results_collated |> 
  filter(!duplicated(labno)) |>
  select(labno, patient_name) |> 
  inner_join(seracare_gene_copies |> 
               filter(!duplicated(reference_material)) |> 
               select(reference_material),
             join_by("patient_name" == "reference_material"))


seracare_ngs_comparison <- amp_validation_all_amp_gene_results_collated |> 
  # Remove limit of detection samples
  filter(!(worksheet == "WS144291" & labno ==  "24039973")) |> 
  # Remove samples run on PanSolid version 1
  filter(!worksheet == "WS138156") |> 
  inner_join(seracare_gene_copies, 
             join_by("patient_name" == "reference_material",
                     "gene" == "gene")) |> 
  mutate(
    total_copies_ngs_pansolid = max_region_fold_change * 2, 
    patient_name = factor(x = patient_name,
                               levels = c("CNVMix12CopiesSERASEQ",
                                          "CNVMix6CopiesSERASEQ",
                                          "CNVMix3copiesSERASEQ",
                                          "DNAWTmixSERASEQ")),
         
         predicted_fold_change = (expected_additional_copies + 2) / 2)

```

```{r}
#| label: tbl-seracare-pansolid-ngs
#| tbl-cap: "SeraCare reference material results"
#| echo: FALSE

seracare_ngs_comparison_tbl <- seracare_ngs_comparison |>
  mutate(`Pansolid fold change` = round(max_region_fold_change, 1),
         `PanSolid total copies` = round(total_copies_ngs_pansolid, 1),
         `SeraCare NGS total copies` = round(total_copies_ngs_seracare, 1)) |> 
  rename(`Lab number` = labno,
         `Reference material` = patient_name,
         `Gene` = gene,
         `Predicted fold change` = predicted_fold_change) |> 
  select(`Lab number`, `Reference material`, `Gene`, `Predicted fold change`, 
         `Pansolid fold change`,
         `PanSolid total copies`, `SeraCare NGS total copies`)

kable(seracare_ngs_comparison_tbl)

```

{{< pagebreak >}}

```{r}
#| label: fig-seracare-ngs-pansolid
#| fig-cap: "PanSolid vs SeraCare NGS"
#| fig-width: 6
#| echo: FALSE

seracare_colours <- c(
  "#009E73",
  "#F0E442",
  "#E69F00", 
  "#D55E00"
)

ngs_comparison_plot <- ggplot(seracare_ngs_comparison, 
                              aes(x = total_copies_ngs_pansolid,
                                    y = total_copies_ngs_seracare )) +
  geom_abline(linetype = "dashed") +
  geom_point(shape = 21, size = 3, alpha = 0.6, aes(fill = reference_material_short)) +
  scale_fill_manual(values = seracare_colours) +
  ggpubr::stat_cor(method = "pearson", label.x = 0, label.y = 30) +
  theme_bw() +
  theme(legend.position = "bottom") +
  scale_x_continuous(limits = c(-5, 35), 
                     breaks = c(0, 10, 20, 30)) +
  scale_y_continuous(limits = c(-5, 35), 
                    breaks = c(0, 10, 20, 30)) +
  facet_wrap(~gene) +
  labs(title = "PanSolid vs SeraCare NGS",
       x = "Total copies NGS (Manchester)",
       y = "Total copies NGS (SeraCare)",
       fill = "")

ngs_comparison_plot

```

```{r}
#| label: seracare-ddpcr-comparison
#| include: FALSE

seracare_ddpcr_comparison <- validation_ddpcr_collated |> 
  filter(target_type == "Ch1Unknown") |> 
  inner_join(seracare_ids, join_by("sample" == "labno")) |> 
  inner_join(seracare_gene_copies, join_by("patient_name" == "reference_material",
                                            "gene" == "gene")) |> 
  mutate(patient_name = factor(x = patient_name,
                               levels = c("CNVMix12CopiesSERASEQ",
                                          "CNVMix6CopiesSERASEQ",
                                          "CNVMix3copiesSERASEQ",
                                          "DNAWTmixSERASEQ")))

```

```{r}
#| label: fig-seracare-ddpcr-pansolid
#| fig-cap: "Pearson's coefficient not calculated for genes with only 2 data points"
#| fig-width: 6
#| echo: FALSE
#| warning: FALSE

ddpcr_comparison_plot <- ggplot(seracare_ddpcr_comparison, 
                              aes(x = cnv,
                                  y = total_copies_ddpcr_seracare )) +
  geom_abline(linetype = "dashed") +
  geom_point(shape = 21, size = 3, alpha = 0.6, aes(fill = reference_material_short)) +
  scale_fill_manual(values = seracare_colours) +
  facet_wrap(~gene) +
  ggpubr::stat_cor(method = "pearson", label.x = 0, label.y = 20) +
  theme_bw() +
  theme(legend.position = "bottom") +
  scale_x_continuous(limits = c(0, 25), 
                     breaks = c(0, 10, 20)) +
  scale_y_continuous(limits = c(0, 25), 
                     breaks = c(0, 10, 20)) +
  labs(x = "Total copies ddPCR (Manchester)",
       y = "Total copies ddPCR (SeraCare)",
       title = "ddPCR vs SeraCare",
       fill = "")

ddpcr_comparison_plot

```

{{< pagebreak >}}

### SeraCare dilution mixes {#sec-results-lod-seracare-mixes}

Dilution mixes were prepared to simulate a sample with neoplastic cell contents of 30%, 20%, 10 % and 0%, and were tested on the PanSolid v2 enrichment on worksheet WS144291. The results for each gene are shown in @tbl-seracare-dilution-mix-results, and the whole genome plots are shown in Figure 4. All gene amplifications were detected in the 30% NCC mix, except for MYC.

```{r}
#| label: tbl-seracare-dilution-mix-results
#| tbl-cap: "SeraCare dilution mix results"
#| echo: FALSE

lod_dilution_mix_results <- amp_validation_all_amp_gene_results_collated |> 
  filter(labno %in% c("24039973", "24039975") & worksheet == "WS144291") |> 
  filter(gene %in% c("ERBB2", "EGFR", "BRAF", "MET", "MYC")) |> 
  mutate(lod_percent = case_when(
    suffix == "a" ~30,
    suffix == "b" ~20,
    suffix == "c" ~10,
    suffix == "d" ~0
  ),
  lod_proportion = lod_percent/ 100,
  max_region_fold_change = round(max_region_fold_change, 1),
  predicted_fold_change = ((14 * lod_proportion) + (2 * (1 - lod_proportion))) / 2 ) |> 
  arrange(lod_percent) |> 
  rename(`Simulated NCC` = lod_percent,
         `Gene` = gene,
         `Predicted PanSolid fold change` = predicted_fold_change,
         `PanSolid fold change` = max_region_fold_change) |> 
  select(`Simulated NCC`, `Gene`, `Predicted PanSolid fold change`, `PanSolid fold change`)

kable(lod_dilution_mix_results)

```

{{< pagebreak >}}

## Repeat testing {#sec-results-repeat-testing}

Intra-run variation (repeatability) and inter-run variation (reproducibility) were investigated for 3 samples using the testing structure shown in @tbl-repeat-schedule.

```{r}
#| label: tbl-repeat-schedule
#| tbl-cap: "Repeat testing"
#| echo: FALSE

repeat_schedule <- data.frame(
  `Worksheet` = c(1, 2, 2, 2, 3),
  `Sample replicate` = c(1, 2, 3, 4, 5)
)

kable(repeat_schedule)

```

The variation in the measured fold change between replicates was minimal, with no variation across the fold change threshold of 2.8. Horizontal variation in CNV call coordinates was also minimal, with a coefficient of variation of x. See supplementary infromation for graphs.

```{r}
#| label: fig-repeatability
#| fig-cap: "Repeatability results"
#| echo: FALSE

repeat_noise_data <- amp_validation_stdev_results_collated |> 
  filter(duplicated(labno, fromLast = TRUE) |
           duplicated(labno, fromLast = FALSE)) |> 
  # Excel file produced twice as sample is in 2 cohorts
  filter(labno != "24030966") |> 
  # This is the limit of detection sample
  filter(labno != "24039973") |> 
  filter(!grepl(pattern = "SERA", x = patient_name,
               ignore.case = TRUE))

repeat_all_amp_data <- amp_validation_all_amp_gene_results_collated |> 
  filter(labno %in% repeat_noise_data$labno) |> 
  pivot_longer(cols = c("max_region_fold_change", "min_region_fold_change"),
               names_to = "fold_change_type",
               values_to = "fold_change")

repeatability_plot <- ggplot(repeat_all_amp_data, aes(x = gene, y = fold_change)) +
  geom_jitter(shape = 21, size = 2, width = 0.2, aes(fill = fold_change_type),
              alpha = 0.5) +
  #geom_boxplot() +
  theme_bw() +
  geom_hline(yintercept = 2.8, linetype = "dashed") +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom") +
  facet_wrap(~labno, scales = "free_y") +
  labs(x = "", y = "Fold change", fill = "")

repeatability_plot

```

```{r}
#| label: fig-24020998-EGFR
#| fig-cap: "Sample 24020998 EGFR amplifications"
#| fig-cap-location: top
#| echo: FALSE

fig_24020998_EGFR <- make_cnv_triptych_plot(input_plot  = 
  make_labno_cnv_plot(df = amp_validation_pos_cnv_results_collated |> 
    filter(labno == "24020998"),
    gene = "EGFR",
    yaxis = labno_suffix_worksheet,
    interval = 500000,
    buffer = 100000))

fig_24020998_EGFR

```

```{r}
#| label: fig-24027774-MYC
#| fig-cap: "Sample 24027774 MYC amplifications"
#| echo: FALSE

fig_24027774_MYC <- make_cnv_triptych_plot(input_plot  = 
  make_labno_cnv_plot(df = amp_validation_pos_cnv_results_collated |> 
    filter(labno == "24027774"),
    gene = "MYC",
    yaxis = labno_suffix_worksheet,
    interval = 500000,
    buffer = 50000))

fig_24027774_MYC

```

{{< pagebreak >}}

## Quality control {#sec-results-quality-control}

```{r}
#| label: poor-quality-samples
#| echo: FALSE

poor_quality_samples <- amp_validation_stdev_results_collated |> 
  filter(st_dev_signal_adjusted_log2_ratios >= 0.7)

```

Overall, the amount of signal-adjusted noise within the cohort ranged from 
`r round(min(amp_validation_stdev_results_collated$st_dev_signal_adjusted_log2_ratios), 1)`
-
`r round(max(amp_validation_stdev_results_collated$st_dev_signal_adjusted_log2_ratios), 1)`
 with a median of 
 `r round(median(amp_validation_stdev_results_collated$st_dev_signal_adjusted_log2_ratios), 1)`
 .
There were 
`r nrow(poor_quality_samples)` 
 samples which had signal-adjusted noise values above 0.7 and were hence considered poor quality.
2 samples were extracted using the Cobas method and 2 were extracted with the QIAsymphony method.

```{r}
#| label: quality-control
#| echo: FALSE

overall_noise_plot <- ggplot(amp_validation_stdev_results_collated, aes(x = st_dev_signal_adjusted_log2_ratios,
                                              y = )) +
  geom_histogram(binwidth = 0.05) + 
  scale_x_continuous(breaks = seq(0, 1.6, by = 0.2)) +
  theme_bw() +
  labs(x = "Signal-adjusted noise", 
       y = "Number of sample replicates")

overall_noise_plot

```

Within the poor-quality samples, there were 4 gene amplification calls in the *MET* and *BRAF* genes.
These calls had low fold change values and when the whole genome plots were visually inspected, it was clear that these represented false positive calls, and the target targets were not significantly elevated above their surrounding targets.

```{r}
#| label: false-positives
#| echo: FALSE

poor_quality_results <- amp_validation_pos_cnv_results_collated |> 
  filter(labno %in% poor_quality_samples$labno & gene != "no positive calls") |> 
  left_join(amp_validation_sample_patient_info,
            by = "labno", relationship = "many-to-one") |> 
  select(labno, gene, fold_change, method_name) |> 
  rename(`Lab number` = labno,
         `Gene` = gene,
         `Fold change` = fold_change,
         `Extraction method` = method_name)

kable(poor_quality_results)

```

{{< pagebreak >}}

# Discussion {#sec-discussion}

*MYC* and *MYCN* have different genomic sequences, but share similarities in specific protein motifs. They are paralogous in their functions and structures, but not nucleotide sequences [@jha2023]. Both genes are frequently mutated in cancer, with gene amplification being a major oncogenic mechanism [@meyer2008].

## Comparison to WGS and ddPCR {#sec-discussion-ddpcr-wgs}

The results from the CLC pipeline compared favourably with WGS. In the NHS Genomic Medicine Service, WGS is performed by Illumina Laboratory Solutions and analysed using a bioinformatics pipeline developed by Genomics England. The Genomics England cancer pipeline performs analysis for somatic CNVs and structural variants [@genomicsengland2023], using the Canvas [@roller2016] and Manta [@chen2016] algorithms, respectively. The Genomics England cancer pipeline has been validated to have a sensitivity of 79.3% for CNV detection and 88.8% for structural variant detection, when compared to results from Fluorescent In Situ Hybridisation (FISH) [@genomicsengland2019].

One inconsistent result was due to a fresh frozen sample being tested by WGS, whilst FFPE material was tested via PanSolid NGS. By comparison, ddPCR did not have this limitation as it was performed on the same DNA as PanSolid NGS.

## Quantification {#sec-discussion-quantification}

The technique is semi-quantitative.

## Limit of detection {#sec-discussion-lod}


## Rationale {#sec-discussion-rationale}

It is not practical or cost-effective to fully validate the detection of variants for every copy number state, with every breakpoint combination in every gene on the PanSolid panel. Instead, the objective of this validation was to define the sensitivity and specificity with which the PanSolid CLC pipeline can detect CNVs in a variety of genes for an appropriately sized sample cohort compared to orthogonal methods. Given the assumption that amplification dynamics are not radically different between target genes and genomic regions, the sensitivity and specificity for gene amplification detection in the validation dataset could be extrapolated to additional genes in future. This is a standard approach that is used to validate somatic CNV detection for large gene panels [@chandramohan2022], whole exome sequencing [@saldivar2023] and whole genome sequencing [@roepman2021;@genomicsengland2019].

## Quality control {#sec-discussion-quality-control}

False positive calls were observed for 2 samples extracted on the Cobas method with high signal-adjusted noise values.
This demonstrates that visual inspection of the whole genome plots is required, and that amplification calls in samples with high signal-adjusted noise values should be treated with caution.

## Limitations {#sec-discussion-limitations}

This validation has the following limitations:

- FISH is considered the gold standard test for many amplifications, but FISH data were not available for comparison.

- Positive control samples were not available for the *ALK* and *SMO* genes.

- All SeraCare reference materials were not tested by each ddPCR assay due to limited DNA volumes.

- Short-read NGS is not able to distinguish the different cellular contexts of gene amplifications, which may be present on chromosomes or extra-chromosomal DNA.

# Review of test requirements {#sec-discussion-test-requirements-review}

The test requirements specified in @sec-requirements have been met:

**Clinical utility: the test should provide clear results for the 9 listed amplification markers.**



**Clinical validity: the test should have a defined sensitivity and specificity for these markers, calculated by comparison with an orthogonal test.**

The sensitivities and specificities for amplification detection have been shown in comparison to ddPCR (@results-ddpcr-comparison) and WGS (@results-wgs-comparison).

**Dosage accuracy: it should be shown how accurate the test is at detecting amplifications of different copy number states, expressed as a correlation between the test and copy numbers from an orthogonal test.**

**Quality control: the test should have clear quality control thresholds for deciding when the test results should be reported and when the test has failed.**

**Variability: the test should have defined intra-run variation (repeatability) and inter-run variation (repeatability) for these amplifications.**

**Visualisation: the results should be presented in a clear and visual manner.**

**Analysis: there should be a clear procedure for analysis of copy number variants by laboratory staff.**


# Requirements for clinical implementation {#sec-requirements-for-clinical-implementation}


# Conclusion {#ref-conclusion}

The PanSolid NGS workflow and CLC pipeline has been validated for the detected of gene amplifications in *ALK*, *BRAF*, *EGFR*, *ERBB2*, *MET*, *MDM2* *MYC*, *MYCN* and *SMO* at the North West GLH.

{{< pagebreak >}}

# References

::: {#refs}
:::

{{< pagebreak >}}

# Supplementary Information

## Sample details

```{r}
#| label: tbl-tissue-types
#| tbl-cap: "Sample tissue types"
#| echo: FALSE

tissue_type_summary <- amp_validation_sample_patient_info |> 
    filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
    mutate("Tissue type" = case_when(
      tissue_type == "Shavings" ~"FFPE shavings",
      tissue_type %in% c("Slides", "Positively-charged slides") ~"FFPE slides",
      TRUE ~tissue_type
    )) |> 
    count(`Tissue type`) |> 
    rename("Samples" = n) |> 
    arrange(desc(Samples)) |> 
    adorn_totals()

kable(tissue_type_summary)

```

```{r}
#| label: tbl-cancer-types
#| tbl-cap: "Sample cancer types"
#| echo: FALSE

cancer_type_summary <- amp_validation_sample_patient_info |> 
  filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
  #filter(cancer_type_new != "Reference material") |> 
  count(cancer_tissue_source) |> 
  rename("Samples" = n,
         "Cancer" = cancer_tissue_source) |> 
  arrange(desc(Samples)) |> 
  adorn_totals()

kable(cancer_type_summary)

```

```{r}
#| label: tbl-extraction-types
#| tbl-cap: "DNA extraction methods"
#| echo: FALSE

extraction_type_summary <- amp_validation_sample_patient_info |> 
  filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
  count(method_name) |> 
  rename("DNA extraction method" = method_name,
         "Samples" = n) |> 
  arrange(desc(Samples)) |> 
  adorn_totals()

kable(extraction_type_summary)

```

```{r}
#| label: tbl-ncc
#| tbl-cap: "Sample neoplastic cell contents"
#| echo: FALSE

ncc_summary <- amp_validation_sample_patient_info |> 
    filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
    filter(neoplastic_cell_content != "Reference material") |> 
    mutate(ncc_class = case_when(
      neoplastic_cell_content %in% c(">10", "10-20%") ~">10%",
      neoplastic_cell_content %in% c("20-50", "20-30%",
                                     ">20%", ">20", 
                                     "20") ~">20%",
      neoplastic_cell_content %in% c(">30%", ">30") ~">30%",
      neoplastic_cell_content %in% c("50-75") ~">50%",
      neoplastic_cell_content %in% c( ">75", "80") ~">75%",
      TRUE ~neoplastic_cell_content
    ),
    ncc_class = factor(ncc_class, levels = c(">75%",
                                             ">50%",
                                             ">30%",
                                             ">20%",
                                             ">10%",
                                             "No NCC provided"))) |> 
    count(ncc_class) |> 
    rename("Neoplastic cell content" = ncc_class,
           "Samples" = n) |> 
    adorn_totals()

kable(ncc_summary)

```

## Control details

```{r}
#| label: tbl-seracare-reference-material-details
#| tbl-cap: "SeraCare reference material details"
#| echo: FALSE
#| warning: FALSE

kable(seracare_details)

```

(@tbl-seracare-reference-material-details): details of the SeraCare controls. Note that there were two tubes of both the Seraseq® TNA (DNA) WT Mix and the Seraseq® Solid Tumor CNV Mix, +12 copies mix.

## ddPCR details

```{r}
#| label: tbl-ddpcr-primers
#| tbl-cap: "ddPCR primer sequences"
#| echo: FALSE
#| warning: FALSE

ddpcr_primers_probes <- read_csv(file = paste0(data_folder,
                                               "method_tables/",
                                               "ddpcr_primers.csv"))

ap3b1_primers <- c("Tailed_AP3B1_F", "AP3B1_R", "Universal F primer")

ddpcr_primer_tbl <- ddpcr_primers_probes |> 
  filter(category == "primer" & !name %in% ap3b1_primers) |> 
  select(-c(category, `5_label`, `3_label`)) |> 
  rename(`Primer name` = name,
         `Sequence` = sequence)

kable(ddpcr_primer_tbl)

```

```{r}
#| label: tbl-ap3b1-ddpcr-primers
#| tbl-cap: "AP3B1 universal reference primer sequences"
#| echo: FALSE
#| warning: FALSE

ap3b1_primers <- ddpcr_primers_probes |> 
  filter(category == "primer" & name %in% ap3b1_primers) |> 
  select(-c(category, `5_label`, `3_label`)) |> 
  rename(`Primer name` = name,
         `Sequence` = sequence)

kable(ap3b1_primers)

```

```{r}
#| label: tbl-ddpcr-probes
#| tbl-cap: "ddPCR probe sequences"
#| echo: FALSE
#| warning: FALSE

ddpcr_probe_tbl <- ddpcr_primers_probes |> 
  filter(category == "probe") |> 
  select(-category) |> 
  rename(`Primer name` = name,
         `Sequence` = sequence,
         `5 prime label` = `5_label`,
         `3 primer label` = `3_label`)

kable(ddpcr_probe_tbl)

```

```{r}
#| label: tbl-ddpcr-mix
#| tbl-cap: "ddPCR mix"
#| echo: FALSE
#| warning: FALSE

ddpcr_mix <- read_csv(file = paste0(data_folder, 
                                    "method_tables/",
                                    "ddpcr_mix.csv"))

kable(ddpcr_mix)

```

```{r}
#| label: tbl-ddpcr-universal-primer-mix
#| tbl-cap: "ddPCR universal primer mix"
#| echo: FALSE
#| warning: FALSE

ddpcr_universal_primer_mix <- read_csv(file = paste0(data_folder,
                                                     "method_tables/",
                                                     "ddpcr_universal_primer_mix.csv"))

kable(ddpcr_universal_primer_mix)

```

```{r}
#| label: tbl-ddpcr-thermocycler-programme
#| tbl-cap: "ddPCR thermocycler programme"
#| echo: FALSE
#| warning: FALSE

ddpcr_thermocycler_programme <- read_csv(file = paste0(data_folder,
                                                       "method_tables/",
                                                       "ddpcr_thermocycler_programme.csv"))

kable(ddpcr_thermocycler_programme)

```

{{< pagebreak >}}

## Supplementary Plots

```{r}
#| label: egfr-coordinate-plots
#| include: FALSE

egfr_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "EGFR",
  interval = 500000,
  title = "EGFR amplification calls"))

egfr_labno_plot <- make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "EGFR",
  interval = 10000,
  buffer = 10000,
  title = "EGFR results zoomed in")

egfr_plot_zoom <- egfr_labno_plot[[4]] +
  coord_cartesian(xlim = c(55019017 - 10000, 55211628 + 10000))

egfr_exon_plot <- make_exon_plot(plot_xmin = 55019017 - 10000, 
                              plot_xmax = 55211628 + 10000,
                              interval = 10000,
                              chromosome = "7")

egfr_primer_plot <- make_primer_plot(plot_xmin = 55019017 - 10000, 
                              plot_xmax = 55211628 + 10000,
                              interval = 10000,
                              chromosome = "7")

egfr_zoom_triptych <- (egfr_plot_zoom / egfr_primer_plot / egfr_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-egfr-wide
#| echo: FALSE
#| fig-cap: "All calls in the EGFR gene"
#| fig-height: 6.3
#| fig-width: 6

egfr_plot

```

```{r}
#| label: fig-egfr-zoom
#| echo: FALSE
#| fig-cap: "EGFR gene calls zoomed in"
#| fig-height: 6.3
#| fig-width: 6

egfr_zoom_triptych

```

```{r}
#| label: fig-erbb2
#| echo: FALSE
#| fig-cap: "ERBB2 gene calls"

erbb2_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "ERBB2",
  interval = 500000,
  title = "ERBB2 amplification calls"))

erbb2_plot

```

```{r}
#| label: met-coordinate-plots
#| include: FALSE

met_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "MET",
  interval = 1000000,
  buffer = 50000,
  title = "MET amplification calls"))

met_labno_plot <- make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "MET",
  interval = 10000,
  buffer = 5000,
  title = "MET results zoomed in"
)

met_plot_zoom <- met_labno_plot[[4]] +
  coord_cartesian(xlim = c(116672196 - 10000, 116798377 + 10000))

met_exon_plot <- make_exon_plot(plot_xmin = 116672196 - 10000, 
                              plot_xmax = 116798377 + 10000,
                              interval = 10000,
                              chromosome = "7")

met_primer_plot <- make_primer_plot(plot_xmin = 116672196 - 10000, 
                              plot_xmax = 116798377 + 10000,
                              interval = 10000,
                              chromosome = "7")

met_zoom_triptych <- (met_plot_zoom / met_primer_plot / met_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-met-wide
#| echo: FALSE
#| fig-cap: "MET gene calls"
#| fig-height: 6.3
#| fig-width: 6

met_plot

```

```{r}
#| label: fig-met-zoom
#| echo: FALSE
#| fig-cap: "MET gene calls zoomed in"
#| fig-height: 6.3
#| fig-width: 6

met_zoom_triptych

```

```{r}
#| label: braf-coordinate-plots
#| include: FALSE

braf_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "BRAF",
  interval = 500000,
  buffer = 50000,
  title = "BRAF amplification calls"))

braf_labno_plot <- make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "BRAF",
  interval = 50000,
  title = "BRAF results zoomed in"
)

braf_plot_zoom <- braf_labno_plot[[4]] +
  coord_cartesian(xlim = c(140730665 - 20000, 140924929 + 20000))

braf_exon_plot <- make_exon_plot(plot_xmin = 140730665 - 20000, 
                              plot_xmax = 140924929 + 20000,
                              interval = 50000,
                              chromosome = "7")

braf_primer_plot <- make_primer_plot(plot_xmin = 140730665 - 20000, 
                              plot_xmax = 140924929 + 20000,
                              interval = 50000,
                              chromosome = "7")

braf_zoom_triptych <- (braf_plot_zoom / braf_primer_plot / braf_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-braf-wide
#| echo: FALSE
#| fig-cap: "BRAF gene calls"
#| fig-height: 6.3
#| fig-width: 6

braf_plot

```

```{r}
#| label: fig-braf-zoom
#| echo: FALSE
#| fig-cap: "BRAF gene calls zoomed in"
#| fig-height: 6.3
#| fig-width: 6

braf_zoom_triptych

```

```{r}
#| label: fig-mdm2
#| echo: FALSE
#| fig-cap: "MDM2 gene calls"

mdm2_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "MDM2",
  interval = 500000,
  title = "MDM2 amplification calls"))

mdm2_plot

```

```{r}
#| label: fig-mycn
#| echo: FALSE
#| fig-cap: "MYCN gene calls"

mycn_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = pos_results_for_plot,
  gene = "MYCN",
  interval = 500000,
  title = "MYCN amplification calls"))

mycn_plot

```

