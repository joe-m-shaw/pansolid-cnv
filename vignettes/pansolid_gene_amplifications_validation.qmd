---
title: "Validation of Detecting Somatic Gene Amplifications with the PanSolid CLC Pipeline"
format: 
  docx:
    reference-doc: north_west_glh_document_template.docx
    link-citations: true
toc: true
toc-title: "Table of Contents"
bibliography: pansolid_cnv_references.bib
csl: harvard-manchester-metropolitan-university.csl
fig-align: "left"
---

```{r}
#| label: packages
#| warning: FALSE
#| include: FALSE

library(tidyverse)
library(knitr)
library(readxl)
library(here)
library(patchwork)
library(janitor)

```

{{< pagebreak >}}

# Authors

Author: Joe Shaw

Project Lead(s): Joe Shaw, Elizabeth Sollars, Eleanor Baker, Helene Schlecht, George Burghel

Date: `r Sys.Date()`

Author contact: joseph.shaw2\@mft.nhs.uk; joseph.shaw3\@nhs.net

# Acronyms

**ALK**: Anaplastic Lymphoma Kinase

**BRAF**: B-Rapidly Accelerated Fibrosarcoma

**CLC**: Acronym unknown. CLC Bio was acquired by Qiagen in 2013.

**CNV**: Copy Number Variant

**ddPCR**: droplet digital Polymerase Chain Reaction

**DNA**: DeoxyriboNucleic Acid

**ecDNA**: extrachromosomal DNA

**EGFR**: Epidermal Growth Factor Receptor

**EGFR vIII**: EGFR version 3

**ERBB2**: ERythroBlastic oncogene B 2

**FFPE**: Formalin-Fixed Paraffin Embedded

**FISH**: Fluorescent In-Situ Hybridisation

**GLH**: Genomic Laboratory Hub

**IHC**: Immuno-HistoChemistry

**MDM2**: Murine Double Minute 2

**MET**: Mesenchymal-Epithelial Transition factor

**MYC**: avian MYeloCytomatosis oncogene

**MYCN**: MYC Neuroblastoma

**NCC**: Neoplastic Cell Content

**NGS**: Next Generation Sequencing

**NHS**: National Health Service

**SMO**: SMOothened, frizzled class receptor

**TKI**: Tyrosine Kinase Inhibitor

**WGS**: Whole Genome Sequencing

**WT**: Wild Type

# Purpose

The purpose of this document is to describe the validation of detection of somatic gene amplifications on the PanSolid v2 QIAseq panel using the PanSolid CLC pipeline at the North West Genomic Laboratory Hub (GLH).

```{r}
#| label: source-scripts
#| warning: FALSE
#| include: FALSE

source(here("scripts/set_shared_drive_filepath.R"))

source(here("scripts/collate_gene_transcript_information.R"))

source(here("scripts/collate_wgs_htmls.R"))

source(here("scripts/collate_pansolid_ddpcr_validation_data.R"))

source(here("scripts/collate_pansolid_excel_validation_data.R"))

# This script collect patient information but requires an ODBC connection to the
# DNA Database mirror
# source(here("scripts/get_patient_information_from_dna_db.R"))

source(here("scripts/load_processed_validation_data.R"))

```

```{r}
#| label: source-functions
#| warning: FALSE
#| include: FALSE

source(here("functions/gene_table_functions.R"))

source(here("functions/pansolid_excel_functions.R"))

source(here("functions/cnv_plot_functions.R"))

source(here("functions/count_oligos_in_range.R"))

source(here("functions/test_metric_functions.R"))

source(here("functions/uom_functions.R"))

source(here("functions/fold_change_functions.R"))

source(here("functions/extract_pansolid_cnv_coordinates.R"))

```

```{r}
#| label: primers-and-targets
#| include: FALSE
#| warning: FALSE

primer_df <- read_csv(paste0(data_folder, 
                             "primers/QIAseq.CDHS-48608Z-11752.primers3 (Converted).csv"),
                      col_types = "cccccc") |> 
  clean_names()

target_df <- read_csv(paste0(data_folder,
                             "bed_files/PanSolidv2_GRCh38_noalt_BED.csv"),
                      col_types = "cccd") |> 
  clean_names() |> 
  mutate(target_type = case_when(
    
    grepl(x = name, pattern =  "chr(\\d{1,2}|X):\\d{1,3}.+") == TRUE ~"genomic backbone",
    TRUE ~"gene target"
  ))

if(anyNA.data.frame(target_df)){
  stop("NAs in target data frame")
}

```

# Introduction {#sec-introduction}

At the North West GLH, testing for somatic DNA variants is performed using the QIAseq methodology (Qiagen) [@xu2017] and Illumina next generation sequencing (NGS) using a large enrichment panel of QIAseq primers named "PanSolid". The current PanSolid enrichment, referred to as PanSolidv2 (design identifier: CDHS-48608Z-11752) contains `r length(unique(primer_df$primer))` unique QIAseq primers for `r length(unique(target_df$region))` target regions. Sequencing data from the PanSolid enrichment is analysed with a pipeline built in the Qiagen CLC Genomic Workbench. Detection of single nucleotide variants and indels on PanSolid has previously been validated ([DOC6024 Validation of QIASeq PanSolid Enrichment]{custom-style="Strong"}). Currently, copy number variants (CNVs) are analysed using a separate QIAseq "Core" panel with a bespoke pipeline written in Python, with copy number amplifications reported for 4 genes: *EGFR*, *ERBB2*, *AR* and *MET* ([DOC4914 Validation of QiaSeq UMI Based Copy Number Analysis]{custom-style="Strong"}). The long-term aim is to move all CNV detection to the PanSolid panel and the CLC pipeline.

The detection of *ERBB2* gene amplifications was validated on the PanSolid enrichment in April 2024 ([DOC6260: Validation of Detecting Somatic *ERBB2* Amplifications with the PanSolid CLC Pipeline]{custom-style="Strong"}). *ERBB2* amplifications were prioritised for validation due to service needs, and were validated by comparison with results from droplet digital PCR (ddPCR) testing. The aim of this validation document is to validate additional amplification genes on the PanSolid workflow.

## Somatic Gene Amplifications {#sec-somatic-gene-amplifications}

Gene amplification is a common mechanism in the development of cancer [@matsui2013]. Additional gene copies can be present on extra-chromosomal DNA rather than their initial chromosomal loci [@verhaak2019], for example *EGFR* amplifications can be present on extrachromosomal DNA (ecDNA) fragments referred to as "double minutes" [@french2019]. "Double minute" refers to a very small ("minute") bodies of chromatin material with two arms ("double") which were originally visualised by chromosome staining [@cox1965], which have been found to be generated by chromothripsis [@shoshani2021]. The location of genes on ecDNA allows them to be copied many times, and uneven inheritance of ecDNA into daughter cells promotes heterogeneity within the tumour which can act as an "evolutionary force" in cancer development [@decarvalho2018]. However increased gene dosage can also be caused by polysomy of the chromosome of origin [@hanna2014; @wilcock2024]. As fluorescence *in-situ* hybridisation (FISH) methods may define gene copy number relative to the copy number of a different locus on the same chromosome, increased gene copy number due to polysomy can be categorised as "non-amplified" [@french2019]. The number of additional gene copies can vary between genes and tumour types, ranging as high as hundreds of gene copies. There is no consistent accepted threshold of copy number to classify a gene as "amplified", although many clinical trials use a threshold of 10 copies as an entry requirement.

Gene amplifications can have clinical relevance for choice of treatment and predicting resistance to treatment, particularly amplifications of genes encoding tyrosine kinase membrane receptors. It is predicted that increasing the gene copy number increases the levels of translated protein, which maintains aberrant cell signalling even in the presence of tyrosine kinase inhibitors (TKIs) [@tanaka2020]. Historically, gene amplifications were detected with FISH and immunohistochemistry (IHC), but NGS methods are being increasingly used.

### Gene Coordinates {#sec-gene-coordinates}

```{r}
#| label: pansolid-genes
#| include: FALSE

pansolid_target_loci <- target_df |> 
  filter(target_type == "gene target") |> 
  mutate(single_locus = str_split(name, pattern = ";")) |> 
  unnest(single_locus) |> 
  select(single_locus) |> 
  filter(!duplicated(single_locus)) |> 
  arrange(single_locus)

```

The PanSolid enrichment includes primers targeting `r length(unique(pansolid_target_loci$single_locus))` different gene loci. Of these, there are 9 genes which were selected as having amplifications with clinical relevance (@tbl-amplification-coordinates).

```{r}
#| label: tbl-amplification-coordinates
#| tbl-cap: "Gene Coordinates"
#| echo: FALSE

amp_genes <- load_pansolid_gene_table("Amplifications")

gene_tbl <- read_csv(file = paste0(data_folder, "gene_lists/gene_coordinates.csv"),
                       col_types = "ccccdd")

primer_df_mod <- extract_pansolid_cnv_coordinates(df = primer_df, cnv_coord_col = region) |> 
  mutate(region_length = abs(start-end))

gene_tbl_mod <- gene_tbl |> 
  mutate(gene_size_kb = round(abs(gene_start - gene_end) / 1000, 1)) |> 
  rowwise() |> 
  mutate(primers_in_gene = count_oligos_in_range(chrom = chromosome,
                                                   coord1 = gene_start,
                                                   coord2 = gene_end,
                                                   df = primer_df_mod)) |> 
  filter(gene %in% amp_genes$gene) |> 
  arrange(gene)

gene_target_counts <- target_df |> 
  filter(name %in% amp_genes$gene) |> 
  count(name)

gene_coordinate_tbl <- gene_tbl_mod |> 
  mutate(grch38_coordinates = str_c("chr", chromosome, ":", gene_start, "-", gene_end)) |> 
  select(gene, grch38_coordinates, gene_size_kb, transcript_refseq,
         primers_in_gene) |> 
  left_join(gene_target_counts, 
            join_by("gene" == "name")) |> 
  rename(`Targets in gene` = n,
         `Gene` = gene,
         `Coordinates (GRCh38)` = grch38_coordinates,
         `Size (kb)` = gene_size_kb,
         `Transcript (RefSeq)` = transcript_refseq,
         `Primers in gene` = primers_in_gene) |> 
  mutate(`CLC setting` = case_when(
         `Targets in gene` < 5 ~"Fine",
         `Targets in gene` > 5 ~"Coarse"))

knitr::kable(gene_coordinate_tbl)

```

### Clinical Impact {#sec-clinical-impact}

The clinical impact of amplifications in these genes is summarised below:

-   ***ALK***: *ALK* amplifications are observed in many cancer types, and confer a poor prognosis in neuroblastoma [@shreenivas2023].

-   ***BRAF***: *BRAF* amplification is a mechanism of resistance to BRAF inhibitor medications in melanoma [@proietti2020].

-   ***EGFR***: *EGFR* amplifications can be targeted by EGFR inhibitor medications [@french2019].

-   ***ERBB2***: *ERBB2* amplifications are associated with resistance to EGFR-targeted therapies in colorectal cancer [@ross2018] and can be targeted with the drug Herceptin in breast cancer [@swain2023; @slamon2001].

-   ***MDM2***: *MDM2* amplifications are linked to TKI resistance in multiple cancers [@hou2019] and targeted anti-MDM2 treatments are in development [@sciot2021].

-   ***MET***: *MET* amplification is associated with resistance to EGFR-TKIs [@wang2019; @qin2023].

-   ***MYC***: *MYC* amplification is a poor prognostic indicator in patients with medulloblastoma [@sursal2022].

-   ***MYCN***: *MYCN* amplifications are found in several cancer types, including medulloblastoma [@sursal2022], and is associated with high-risk prognosis in neuroblastoma [@cohn2009; @irwin2021].

-   ***SMO***: determination of *SMO* copy number by FISH is specified for medulloblastoma on the [NHS National Genomic Test Directory](https://www.england.nhs.uk/publication/national-genomic-test-directories/) (code M194). The SMO protein is a target for several therapeutics [@rimkus2016].

## Requirements {#sec-requirements}

The requirements for this new method are as follows:

1.  **Clinical utility:** the test should provide clear results for the 9 listed amplification genes.

2.  **Clinical validity:** the test should have a defined sensitivity and specificity for these markers, calculated by comparison with an orthogonal test.

3.  **Dosage accuracy:** it should be shown how accurate the test is at detecting amplifications of different copy number states, expressed as a correlation between the test and copy numbers from an orthogonal test.

4.  **Quality control:** the test should have clear quality control thresholds for deciding when the test results should be reported and when the test has failed.

5.  **Variability:** the test should have defined intra-run variation (repeatability) and inter-run variation (repeatability) for these amplifications.

6.  **Visualisation:** the results should be presented in a clear and visual manner.

7.  **Analysis:** there should be a clear procedure for analysis of gene amplifications by laboratory staff.

{{< pagebreak >}}

# Methodology {#sec-methodology}

```{r}
#| label: remove-pansolidv1-data
#| include: FALSE

# WS138156 was the PanSolidv1 enrichment, so I am removing it to keep the validation
# focussed on PanSolidv2.

amp_validation_all_amp_gene_results_collated <- amp_validation_all_amp_gene_results_collated |>
  filter(worksheet != "WS138156")

amp_validation_pos_cnv_results_collated <- amp_validation_pos_cnv_results_collated |> 
  filter(worksheet != "WS138156")

amp_validation_stdev_results_collated <- amp_validation_stdev_results_collated |> 
  filter(worksheet != "WS138156")

amp_validation_percent_138_collated <- amp_validation_percent_138_collated |> 
  filter(worksheet != "WS138156")

```

```{r}
#| label: validation-sample-information
#| include: FALSE

pansolid_sample_info <- validation_sample_patient_info |> 
  filter(labno %in% amp_validation_stdev_results_collated$labno)

```

## Samples {#sec-methods-samples}

Samples were received at the North West GLH between 
`r format.Date(x = min(pansolid_sample_info$date_sample_received), format = "%B %Y")`
and
`r format.Date(x = max(pansolid_sample_info$date_sample_received), format = "%B %Y")`. Details of the normal control cohort used for the PanSolid CLC pipeline are given in the *ERBB2* validation document ([DOC6260]{custom-style="Strong"}). In total, `r length(unique(amp_validation_stdev_results_collated$labno))` different DNA samples were tested on the PanSolid v2 enrichment during this validation. Samples were tested from patients with age at sample receipt ranging from `r round(min(pansolid_sample_info$years_at_sample_receipt, na.rm = TRUE), 0)` to `r round(max(pansolid_sample_info$years_at_sample_receipt, na.rm = TRUE), 0)` years (median: `r round(median(pansolid_sample_info$years_at_sample_receipt, na.rm = TRUE), 0)` years), and from reference materials provided by the company SeraCare ([https://www.seracare.com/]()) (@sec-methods-reference-materials). Samples from many different types of cancer were tested, which are summarised in the Supplementary Information (@tbl-cancer-types). The details of the sample types (@tbl-tissue-types) and neoplastic cell contents (NCC) (@tbl-ncc) are also provided in the Supplementary Information.

## Reference Materials {#sec-methods-reference-materials}

### SeraCare reference materials {#sec-seracare-reference-materials}

Reference materials were ordered from the company SeraCare to act as positive controls for different gene amplifications. Each control consists of DNA extracted from a stable cell line (GM24385), spiked with different quantities of synthetic DNA constructs containing specific genes. The amplified genes included in the SeraCare reference materials are shown in @tbl-seracare-reference-material-genes. The product information states that, due to their size, the *EGFR*, *BRAF* and *MET* genes are each split between two synthetic DNA constructs. There is an overlap region in each gene which is present in both constructs, which leads to higher quantities of these regions (@tbl-seracare-gene-constructs). The ddPCR assays designed in this validation (@sec-methods-ddpcr) were checked and do not target these regions. The details of the SeraCare reference materials, including DNA numbers and batch numbers, are shown in the Supplementary Information (@tbl-seracare-reference-material-details).

```{r}
#| label: tbl-seracare-reference-material-genes
#| tbl-cap: "SeraCare reference material genes"
#| echo: FALSE

seracare_pansolid_gene_df <- read_csv(file = paste0(data_folder, 
                                                 "seracare_reference_materials/",
                                                 "seracare_gene_copies.csv"),
                                      col_types = "cccddd") |> 
  filter(reference_material_short == "2 copies (+0)") |> 
  select(gene) |> 
  mutate(`Targeted within this validation` = ifelse(gene %in% amp_genes$gene, "Yes", "No")) |> 
  rename(`Gene` = gene)
  
seracare_details <- read_csv(file = paste0(data_folder,
                                           "seracare_reference_materials/",
                                           "seracare_sample_details.csv"),
                             col_types = "ccccccc") 

kable(seracare_pansolid_gene_df)

```

```{r}
#| label: tbl-seracare-gene-constructs
#| tbl-cap: "SeraCare gene construct overlap regions"
#| echo: FALSE

target_df_coord_split <- extract_pansolid_cnv_coordinates(df = target_df, 
                                                          cnv_coord_col = region)

seracare_grch38_regions <- read_csv(file = paste0(data_folder, 
                                                 "seracare_reference_materials/",
                                                 "seracare_overlap_regions_grch38.csv"),
                                    col_types = "ccddc") |> 
  pivot_wider(id_cols = c(gene, chrom),
              names_from = note,
              values_from = c(region_start, region_end)) |> 
  mutate(gene_length_kb = round(abs(region_end_whole_gene - region_start_whole_gene) / 1000,
                                1),
         overlap_length_kb = round(abs(region_end_construct_1 - region_start_construct_2) / 1000,
         1),
         overlap_percent = round((overlap_length_kb / gene_length_kb ) * 100, 1),
         overlap_string = str_c(chrom, ":", region_start_construct_2, "_", region_end_construct_1),
         chrom_number = str_extract(string = chrom, pattern = "chr(\\d{1})",
                                    group = 1))

tbl_seracare_grch38_regions <- seracare_grch38_regions |> 
  rowwise() |> 
  mutate(targets = count_oligos_in_range(chrom = chrom_number,
                                                   coord1 = region_start_construct_2,
                                                   coord2 = region_end_construct_1,
                                                   df = target_df_coord_split)) |>
  select(gene, overlap_string, overlap_length_kb, gene_length_kb, overlap_percent,
         targets) |> 
  rename("Gene" = gene,
         "Overlap region (GRCh38)" = overlap_string,
         "Overlap region length (kb)" = overlap_length_kb,
         "Gene length (kb)" = gene_length_kb,
         "Overlap region percentage (%)" = overlap_percent,
         "Targets in overlap region" = targets)
  
kable(tbl_seracare_grch38_regions)

```

@tbl-seracare-gene-constructs: the table shows the details of the overlap regions in the synthetic gene constructs of *BRAF*, *EGFR* and *MET* used in the SeraCare reference materials. The coordinates are provided in genome build GRCh37 on the product information, and have been converted to GRCh38 using the [Ensembl Assembly Converter tool](http://www.ensembl.org/Homo_sapiens/Tools/AssemblyConverter). The gene length quoted for *BRAF* in this table is slightly larger than quoted in @tbl-amplification-coordinates, because the value in this table uses the longer NM_001378474.1 transcript.

### Limit of detection DNA mixtures {#sec-methods-lod-mixtures}

A limit of detection experiment was performed using the Seraseq® Solid Tumor CNV Mix, +12 copies reference material (DNA number 24039973), which represented DNA from tumour cells, and the Seraseq® TNA (DNA) WT Mix (DNA number 24039975), which represented DNA from normal cells. The two reference materials were mixed together to mimic samples with NCCs of 30%, 20%, 10% and 0%. The final volume of each DNA mixture was 20 µl and the total DNA concentration was 6 ng/µl, which is the standard input for the PanSolid NGS workflow. These DNA mixtures were made on worksheet WS144265 and run on the PanSolid version 2 NGS workflow on worksheet WS144291. This limit of detection experiment is different to the limit of detection experiment performed on the PanSolid version 1 workflow for the validation of *ERBB2* amplifications ([DOC6260]{custom-style="Strong"}).

## DNA extraction {#sec-methods-dna-extraction}

For the majority of samples, DNA was extracted using the QIASymphony extraction method (QIAsymphony DSP DNA Mini Kit, Qiagen) ([DOC6251: QIAsymphony DNA FFPE Extraction Procedure]{custom-style="Strong"}). A minority of samples had DNA extracted using the cobas® DNA Sample Preparation Kit (Roche) ([DOC1300]{custom-style="Strong"}) and the EZ1 DNA Tissue Kit (Qiagen) ([DOC913]{custom-style="Strong"}).
The summary of DNA extraction methods is shown in the supplementary information (@tbl-extraction-types).

## Next generation sequencing

```{r}
#| label: pansolid-worksheets
#| include: FALSE

pansolid_ws <- read_csv(file = paste0(data_folder,
                                      "validation/processed/",
                                      "pansolid_worksheet_details.csv"),
                        show_col_types = FALSE)

```

Samples were tested on version 2 (CDHS-48608Z-11752) of the PanSolid QIAseq enrichment ([DOC5925: QIAseq PanSolid DNA Panel NGS Library Preparation]{custom-style="Strong"}) with 2 × 150 bp paired-end sequencing on an Illumina Novaseq 6000. The NGS data described in this validation document comes from `r length(unique(pansolid_ws$pcrid))` worksheets performed between `r format.Date(x = min(pansolid_ws$date), format = "%B %Y")` and `r format.Date(x = max(pansolid_ws$date), format = "%B %Y")` .

## Bioinformatic analysis {#sec-methods-bioinformatics}

The CLC pipeline, including details of the methodology and quality metrics, is described in detail in the *ERBB2* amplifications validation document ([DOC6260]{custom-style="Strong"}). The method by which CLC detects CNVs is also described in the  Qiagen Copy Number Variant Detection White Paper [@qiagen2015]. Brief details are provided below.

### Control cohort

A cohort of 25 normal FFPE samples from various tissue sources was used a control cohort for CNV calling with the pipeline. DNA was extracted from these samples using the QIAsymphony method.

### Graining level

The CLC Genomics Workbench has 3 "graining levels" which determine the resolution for CNV analysis [@qiagen2023]:

**Coarse:** for CNVs spanning over 10 targets

**Intermediate:** for CNVs spanning over 5 targets

**Fine:** most sensitive to CNVs spanning 3 or more targets.

All amplification genes were initially analysed on the "coarse" graining level. Preliminary work showed that the coarse graining level could not identify *MYC* amplifications in positive controls, as *MYC* has only 3 targets on the PanSolid enrichment (@tbl-amplification-coordinates). The "fine" graining level was then used specifically for *MYC* to account for the lower number of QIAseq targets in this gene. *MYCN* was added to the project later, and was also analysed on the "fine" graining level. 

When the larger genes were analysed on the "fine" graining level, we frequently observed multiple intra-genic CNV regions with slightly different fold changes. Because of this, we decided to analyse the larger genes on the "coarse" graining level, rather than "fine".

### Fold change {#sec-methods-fold-change}

The CLC pipeline identifies CNVs according to the fold change of target regions. Fold change is defined in the following equation:

Fold change (gain) = locus coverage / baseline control coverage

A fold change threshold of 2.8 was used to classify CNVs as amplifications. The 2.8 threshold was set during the *ERBB2* amplification validation, following a limit of detection experiment ([DOC6260]{custom-style="Strong"}). 

### Signal-adjusted noise

The “signal-adjusted noise” metric is a quality control metric developed during the *ERBB2* amplifications validation. It is defined as the standard deviation of target log2ratios when regional fold-changes are excluded. This quality metric was adapted from work performed at the Royal Marsden NHS Foundation Trust (North Thames GLH).

### Visualisation

Results were visualised using an Excel output as before, and also using a new interactive HTML output (@fig-pansolid-visualisation-png).

![Visualisation of gene amplifications on PanSolid. The upper panel shows the Excel output for sample 24026871 which has a *MYC* amplification. The bottom panel shows the HTML output for the same sample, with tracks for CNV calls, log2 ratios and B-allele frequency.](`r paste0(data_folder, "images/", "pansolid_visualisation_output.png")`){#fig-pansolid-visualisation-png}

### Pipeline version

The version of the PanSolid CLC pipeline tested in this validation was PanSolid Workflow v2.2.

## Orthogonal testing {#sec-orthogonal-testing}

### Droplet digital PCR for *BRAF*, *EGFR*, *ERBB2*, *MET* and *MYC* {#sec-methods-ddpcr}

Amplification results for the *BRAF*, *EGFR*, *ERBB2*, *MET* and *MYC* genes were confirmed using ddPCR. ddPCR assays were designed using the workflow for confirming constitutional CNVs, which involves a universal forward primer and a reference assay for the *AP3B1* gene on chromosome 5 ([DOC4304 CNV Confirmation Using Droplet Digital PCR]{custom-style="Strong"}). ddPCR was performed using a BioRad QX200 system with 5ng DNA input per well. Each assay was validated for use and then used to test DNA from clinical FFPE samples and SeraCare controls. The results for the *ERBB2* ddPCR were previously reported in [DOC6260]{custom-style="Strong"}. Details of the primer and probe sequences (@tbl-ddpcr-primers, @tbl-ap3b1-ddpcr-primers and @tbl-ddpcr-probes), reaction mix (@tbl-ddpcr-mix) and thermocycling conditions (@tbl-ddpcr-thermocycler-programme) are given in the Supplementary Information.

### Whole genome sequencing {#sec-methods-wgs}

Samples which had been tested using whole genome sequencing (WGS) were selected for this validation, which included samples from the Tessa Jowell BRAIN MATRIX Platform Study (clinical trial identifier NCT04274283) [@watts2022]. WGS was performed on DNA extracted from fresh-frozen tissue by Illumina Laboratory Services at the Wellcome Trust Sanger Institute in Cambridge, as part of the NHS Genomics Medicine Service. FFPE tissue from the same tumour block as the fresh frozen tissue used for WGS was used as the sample source for PanSolid testing. Samples included in this validation were analysed by WGS between December 2022 to February 2024, using the "somatic variants and pertinent germline findings in cancer susceptibility genes" pipeline version 2.28 to version 3.6.2. WGS results were taken directly from the HTML reports generated by the Genomics England pipeline for domains 1, 2 and 3.

## Validation analysis {#sec-methods-validation-analysis}

The validation analysis was performed using the R programming language (version 4.4.1) [@rcore2024] relying mainly on packages from the tidyverse [@wickham2019]. This validation document is written and rendered using Quarto [@Allaire_Quarto_2024] and is publicly available on [Github](https://github.com/joeshaw824/pansolid_cnv_validation).

## Data locations {#sec-data-locations}

All data analysed in this validation is saved at this file location:

S:/central shared/Genetics/Mol_Shared/Development.Team/Pan Solid CLC Somatic Amplifications Validation/pansolid_cnv_r_files/data

{{< pagebreak >}}

# Results {#sec-results}

## Overall results {#sec-overall-results}

```{r}
#| label: good-quality-results
#| include: FALSE

good_quality_samples <- amp_validation_stdev_results_collated |> 
  filter(st_dev_signal_adjusted_log2_ratios < 0.7)

```

```{r}
#| label: amp-gene-count
#| include: FALSE

pos_cnv_results_normals_removed <- amp_validation_pos_cnv_results_collated |> 
  filter(gene != "no positive calls")

tbl_amp_gene_summary <- amp_validation_pos_cnv_results_collated |> 
  mutate(labno_gene = str_c(labno, "_", gene)) |> 
  filter(!duplicated(labno_gene)) |> 
  count(gene, .drop = FALSE) |> 
  filter(gene != "no positive calls") |> 
  mutate(`CLC setting` = case_when(
    gene %in% c("MYC", "MYCN") ~"Fine",
    TRUE ~"Coarse")) |> 
  rename(Amplifications = n,
         Gene = gene) |> 
  select(Gene, `CLC setting`, Amplifications)

min_fold_change_detected <- round(min(pos_cnv_results_normals_removed$fold_change), 1)

max_fold_change_detected <- round(max(pos_cnv_results_normals_removed$fold_change), 1)

```

Overall `r nrow(amp_validation_stdev_results_collated)` replicates from `r length(unique(amp_validation_stdev_results_collated$labno))` different samples were tested using the PanSolid NGS workflow. Of these, `r nrow(good_quality_samples)` had signal-adjusted noise metrics within the acceptable range of 0-0.7. There were 
`r sum(tbl_amp_gene_summary$Amplifications)` amplifications with fold changes above the threshold of 2.8 (@sec-methods-fold-change) detected in the 9 target genes (@tbl-amp-gene-summary). 
Amplification fold changes ranged from just above the threshold at `r min_fold_change_detected` to `r max_fold_change_detected`, and were detected across a range of different cancer types (@fig-pansolid-results-by-cancer-type-plot).

```{r}
#| label: tbl-amp-gene-summary
#| tbl-cap: "Amplifications detected by gene"
#| echo: FALSE

knitr::kable(tbl_amp_gene_summary |> 
  janitor::adorn_totals())

```

```{r}
#| label: pansolid-results-by-cancer-type
#| include: FALSE

amp_results_with_cancer_types <- amp_validation_all_amp_gene_results_collated |> 
  left_join(validation_sample_patient_info,
            by = "labno", 
            relationship = "many-to-one")

results_by_cancer_type <- ggplot(amp_results_with_cancer_types |> 
         filter(!cancer_tissue_source %in% c("reference material")) |> 
         mutate(cancer_tissue_source = case_when(
           cancer_tissue_source == "central nervous system" ~"CNS",
           cancer_tissue_source == "hepatocellular carcinoma" ~"liver",
           TRUE ~cancer_tissue_source
         ),
         max_region_fold_change = case_when(
           max_region_fold_change < 1 ~1,
           TRUE ~max_region_fold_change
         )), 
       aes(x = gene,
           y = max_region_fold_change)) +
  geom_jitter(shape = 21, aes(fill = pansolid_call), width = 0.2,
              alpha = 0.6) +
  scale_fill_manual(values = c( "#FF3333", "#FFFFFF")) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
        legend.position = "bottom") +
  scale_y_log10(breaks = c(1, 2.8, 10, 100)) +
  geom_hline(yintercept = 2.8, linetype = "dashed") +
  facet_wrap(~cancer_tissue_source, nrow = 3, axes = "all_x") +
  labs(x = "", y = "Fold change",
       title = "PanSolid NGS results by cancer type",
       fill = "")

```

```{r}
#| label: fig-pansolid-results-by-cancer-type-plot
#| fig-subcap: "Gene amplification results from PanSolid NGS arranged by cancer type. Results below a fold change of 1 are changed to 1 to allow log scale plotting. This plot does not include the results from the SeraCare reference materials. CNS: central nervous system."
#| fig-height: 8.6
#| fig-width: 6
#| echo: FALSE

results_by_cancer_type

```

## Coarse setting: *ALK*, *BRAF*, *EGFR*, *ERBB2*, *MET*, *MDM2* and *SMO* results {#sec-results-coarse-setting}

The CLC coarse setting detected amplifications in all the target genes except the *ALK* gene (@tbl-amp-gene-summary). The 1 amplification detected in the *SMO* gene was a false positive in a sample with a signal-adjusted noise value of 0.89 (DNA number 23032153) (@sec-results-quality-control; @tbl-noisy-amplification-calls). For the remaining genes, a range of amplifications were detected. For each gene, there was variation in the amplified region, which in some cases only included the gene of interest and in others expanded to include additional genomic regions. In nearly all cases, every exon in the canonical RefSeq gene transcript was contained within the amplified region. There were 3 samples where 2 separate amplified regions were detected in the *EGFR* gene, whilst for other samples only a single region call was made. Plots showing the range of amplification coordinates for each gene are included in the Supplementary Information (@fig-egfr-wide to @fig-mdm2-zoom).

## Fine setting: *MYC* and *MYCN* results {#sec-results-fine-setting}

```{r}
#| label: myc-amplifications
#| echo: FALSE

myc_samples <- amp_validation_pos_cnv_results_collated |> 
  filter(gene == "MYC" & !labno %in% seracare_details$`DNA number`)

mycn_samples <- amp_validation_pos_cnv_results_collated |> 
  filter(gene == "MYCN" & !labno %in% seracare_details$`DNA number`)

```

Due to their reduced size, the *MYC* and *MYCN* genes were analysed on a separate "fine" setting for CNV calling. Amplifications for the *MYC* gene were detected in `r length(unique(myc_samples$labno))` samples (excluding the SeraCare reference materials), with fold changes ranging from `r round(min(myc_samples$fold_change), 1)` to `r round(max(myc_samples$fold_change), 1)`, whilst a *MYCN* amplification was only detected in `r length(unique(mycn_samples$labno))` sample (excluding the SeraCare reference materials) with a fold change of `r round(mycn_samples$fold_change, 1)`. The full width of the *MYC* gene was covered in all calls except for sample 24031627, in which only the latter 2 exons of the gene had an amplification (@fig-myc-zoom). In one sample (24024116) a focal *MYC* amplification was detected on a background of increased fold change across all targets on 8q, indicating an 8q gain (@fig-sample-24024116-whole-genome). This was the only example of an amplification on a background of polysomy detected in the validation cohort. Coordinate plots for the *MYCN* gene are shown in the supplementary information (@fig-mycn-wide and @fig-mycn-zoom).

```{r}
#| label: myc-amplification-plots
#| echo: FALSE

myc_plot_wide <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MYC",
  interval = 1000000,
  buffer = 500000,
  title = expression(paste("Amplifications detected including the ", italic("MYC"),
                  " gene"))))

myc_labno_plot <- make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MYC",
  interval = 1000,
  buffer = 5000,
  title = expression(paste("Zoomed in view of amplifications involving ",
                           italic("MYC"))))
    
myc_plot_zoom <- myc_labno_plot[[4]] +
  coord_cartesian(xlim = c(127732000, 127746000))

myc_exon_plot <- make_exon_plot(plot_xmin = 127732000, 
                              plot_xmax = 127746000,
                              interval = 1000,
                              chromosome = "8")

myc_primer_plot <- make_primer_plot(plot_xmin = 127732000, 
                              plot_xmax = 127746000,
                              interval = 1000,
                              chromosome = "8")

myc_zoom_triptych <- (myc_plot_zoom / myc_primer_plot / myc_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-myc-wide
#| echo: FALSE
#| fig-cap: "PanSolid NGS amplification calls in the *MYC* gene. The plot scale is so wide that the *MYC* exons and some amplification calls are not visible. A zoomed-in view of this data is provided in @fig-myc-zoom."
#| fig-height: 7
#| fig-width: 6

myc_plot_wide

```

```{r}
#| label: fig-myc-zoom
#| echo: FALSE
#| fig-cap: "Zoomed-in view of PanSolid NGS amplification calls in the *MYC* gene, showing that all amplification calls, except sample 24031627, covered the full length of the gene."
#| fig-height: 7
#| fig-width: 6

myc_zoom_triptych

```

![*MYC* amplification with a chromosome 8q gain in sample 24024116. This demonstrates the pipeline's ability to detect focal amplifications against a background of raised copy number.](`r paste0(data_folder, "images/", "sample_24024116_myc_amp.png")`){#fig-sample-24024116-whole-genome}

{{< pagebreak >}}

## Comparison to ddPCR {#sec-results-ddpcr-comparison}

```{r}
#| label: getting-erbb2-labnos
#| include: FALSE

erbb2_pansolid_cobas_labnos <- read_csv(str_c(data_folder,
                                              "erbb2_pansolid_cobas_labnos.csv"),
                                        col_types = "ccc")

validation_ddpcr_collated_erbb2_fixed <- validation_ddpcr_collated |> 
  left_join(erbb2_pansolid_cobas_labnos |> 
              select(-nhsno),
            join_by("sample" == "labno_COBAS"),
            relationship = "many-to-many") |> 
  mutate(sample = case_when(
    !is.na(labno_QIAsymphony_DNA_FFPE) ~labno_QIAsymphony_DNA_FFPE,
    TRUE ~sample))

```

```{r}
#| label: ddpcr-copy-number-threshold
#| include: FALSE

ddpcr_cnv_amp_threshold <- 5

```

```{r}
#| label: pansolid-vs-ddpcr
#| include: FALSE

amp_validation_ddpcr <- validation_ddpcr_collated_erbb2_fixed |> 
  mutate(sample_experiment = str_c(sample, "_", experiment)) |> 
  # Remove assay optimisation worksheet
  filter(worksheet != "WS138419") |> 
  filter(target == "ch1_target" & 
           experiment %in% c("MYC Ex3_1",
                              "BRAF Ex10_1",
                              "MET Ex2_1",
                              "EGFR Ex6_1",
                             "ERBB2 Ex13_1")) |> 
  filter(!duplicated(sample_experiment)) |> 
  # Remove controls
  filter(grepl(pattern = "\\d{8}", x = sample))

pansolid_vs_ddpcr <- amp_validation_ddpcr |>  
  inner_join(amp_validation_all_amp_gene_results_collated |> 
               mutate(labno_suffix_gene = str_c(labno_suffix, "_", gene)) |> 
               # Some samples were run twice on PanSolid
               filter(!duplicated(labno_suffix_gene)),
             join_by(sample == labno, 
                     gene)) |> 
  mutate(ddpcr_result = case_when(
    cnv >= ddpcr_cnv_amp_threshold ~"amplification",
    cnv < ddpcr_cnv_amp_threshold ~"normal result"),
    
    outcome = case_when(
      
      ddpcr_result == "amplification" & pansolid_call == "amplification" 
      ~"true_positive",
      ddpcr_result == "normal result" & pansolid_call == "normal result" 
      ~"true_negative",
      ddpcr_result == "amplification" & pansolid_call == "normal result"
      ~"false_negative",
      ddpcr_result == "normal result" & pansolid_call == "amplification" 
      ~"false_positive"
    ),
    pansolid_copy_number = max_region_fold_change * 2)

```

```{r}
#| label: pansolid-vs-ddpcr-summary
#| include: FALSE

pansolid_vs_ddpcr_summary <- pansolid_vs_ddpcr |> 
  count(gene, outcome) |> 
  pivot_wider(id_cols = gene,
              names_from = outcome,
              values_from = n,
              values_fill = 0) |> 
  mutate("Samples" = true_positive + true_negative + false_negative +
                         false_positive) |> 
  rename(`Gene` = gene,
         `True negatives` = true_negative,
         `True positives` = true_positive,
         `False negatives` = false_negative,
         `False positives` = false_positive) |> 
  select(`Gene`, "Samples", `True negatives`, `True positives`, `False negatives`,
         `False positives`)

```

```{r}
#| label: ddpcr-vs-pansolid-metrics
#| include: FALSE

ddpcr_pansolid_metrics <- get_epir_metrics(outcome_vector = c(
  sum(pansolid_vs_ddpcr_summary$`True positives`),
  sum(pansolid_vs_ddpcr_summary$`False positives`),
  sum(pansolid_vs_ddpcr_summary$`False negatives`),
  sum(pansolid_vs_ddpcr_summary$`True negatives`)
))

ddpcr_pansolid_sensitivity <- filter(ddpcr_pansolid_metrics, Metric == "Sensitivity")$`Percentage (%)`

ddpcr_pansolid_specificity <- filter(ddpcr_pansolid_metrics, Metric == "Specificity")$`Percentage (%)`

ddpcr_pansolid_correct_proportion <- filter(ddpcr_pansolid_metrics, Metric == "Correctly classified proportion")$`Percentage (%)`

```

ddPCR was performed for a selection of samples for the *BRAF*, *EGFR*, *ERBB2*, *MET* and *MYC* genes. The *ERBB2* ddPCR work was performed as part of the separate validation of *ERBB2* amplification detection ([DOC6260]{custom-style="Strong"}), which included DNA extracted on the Cobas and QIAsymphony methods. 11 *ERBB2* samples extracted with the QIAsymphony method and tested on PanSolid version 2 are included in this validation analysis, and compared to the ddPCR results for their corresponding Cobas extractions. The QIAsymphony method was validated as the sole DNA extraction method for FFPE tissue at the Manchester GLH in April 2024. A copy number threshold of 5 was used to classify ddPCR results as "amplified" and "non-amplified". There was good agreement between ddPCR and PanSolid, with only 
`r sum(pansolid_vs_ddpcr_summary$"False negatives") + sum(pansolid_vs_ddpcr_summary$"False positives")`
discrepant results out of 
`r sum(pansolid_vs_ddpcr_summary$Samples)`
samples (@tbl-ddpcr-vs-pansolid) and an overall sensitivity of
`r ddpcr_pansolid_sensitivity`% (@tbl-ddpcr-vs-pansolid-metrics).

```{r}
#| label: tbl-ddpcr-vs-pansolid
#| tbl-cap: "PanSolid comparison to ddPCR"
#| echo: FALSE

kable(pansolid_vs_ddpcr_summary |> 
        adorn_totals())

```

```{r}
#| label: tbl-ddpcr-vs-pansolid-metrics
#| tbl-cap: "PanSolid NGS test metrics versus ddPCR"
#| echo: FALSE

kable(ddpcr_pansolid_metrics)

```

### ddPCR dosage correlation {#sec-ddpcr-dosage-correlation}

There was a good correlation in the dosage quantification between the two techniques for each gene, as measured using Pearson's coefficient (@fig-ddpcr-vs-pansolid-ngs). For the *MYC* gene, this correlation was consistent to copy numbers above 150.

```{r}
#| label: fig-ddpcr-vs-pansolid-ngs
#| fig-cap: "Correlation between ddPCR copy number and PanSolid copy number. PanSolid copy number is the PanSolid fold change multiplied by 2."
#| echo: FALSE
#| fig-height: 6.3
#| fig-width: 6

ddpcr_ngs_plot_1 <- ggplot(pansolid_vs_ddpcr |> 
                           filter(gene %in% c("BRAF", "EGFR", "MET")), aes(x = cnv, y = pansolid_copy_number)) +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "ddPCR copy number",
       y = "PanSolid copy number") +
  ggpubr::stat_cor(method = "pearson", label.x = 10, label.y = 0)  +
  facet_wrap(~gene, ncol = 2)

ddpcr_ngs_plot_2 <- ggplot(pansolid_vs_ddpcr |> 
                           filter(gene %in% c("ERBB2", "MYC")), 
                           aes(x = cnv, y = pansolid_copy_number)) +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "",
       y = "PanSolid copy number",
       title = "ddPCR vs PanSolid by gene") +
  ggpubr::stat_cor(method = "pearson", label.x = 50, label.y = 0)  +
  facet_wrap(~gene, ncol = 2)

ddpcr_ngs_plot <- ddpcr_ngs_plot_2 + ddpcr_ngs_plot_1 + 
  plot_layout(ncol = 1, heights = c(5, 11))

ddpcr_ngs_plot

```

### ddPCR discordant results {#sec-ddpcr-discordant-results}

`r sum(pansolid_vs_ddpcr_summary$"False negatives") + sum(pansolid_vs_ddpcr_summary$"False positives")`
samples had a discordant result from ddPCR when compared to the PanSolid NGS result. 
`r sum(pansolid_vs_ddpcr_summary$"False positives")` samples were false positives for *ERBB2* amplifications, which were already detected in the *ERBB2* validation ([DOC6260]{custom-style="Strong"}), and the remaining
`r sum(pansolid_vs_ddpcr_summary$"False negatives")`
samples were apparent false negatives. Two of these samples (24002064 and 23033921) had borderline results on both ddPCR and PanSolid NGS. The remaining sample (24037724) had a *MYC* copy number of 9 on ddPCR, with a fold change of only 2.2 detected on PanSolid NGS (@tbl-ddpcr-discordant-results). The whole genome plot for this sample showed a deletion at chromosome 5q, including the location of the *AP3B1* ddPCR reference gene (5q14.1), which was confirmed by checking the target-level fold change information. This loss impacting the *AP3B1* reference gene therefore caused an artificially high ddPCR copy number for *MYC* (@fig-sample-24037724-whole-genome).

{{< pagebreak >}}

```{r}
#| label: tbl-ddpcr-discordant-results
#| tbl-cap: "Discordant results between PanSolid NGS and ddPCR"
#| echo: FALSE

ddpcr_false_discordant_table <- pansolid_vs_ddpcr |> 
  filter(outcome %in% c("false_negative", "false_positive")) |> 
  mutate(`PanSolid fold change` = round(max_region_fold_change, 1),
         `ddPCR copy number` = round(cnv, 1)) |> 
  rename(`ddPCR result` = ddpcr_result,
         `Lab number` = sample,
         `Gene` = gene,
         `PanSolid result` = pansolid_call) |> 
  select(`Lab number`,  `Gene`, `ddPCR copy number`, 
         `PanSolid fold change`, `ddPCR result`, `PanSolid result`)

kable(ddpcr_false_discordant_table)

```

![Whole genome plot for sample 24037724. The black arrow indicates a large copy number loss on chromosome 5, where the *AP3B1* ddPCR reference gene is located. ](
`r paste0(data_folder, "images/", "sample_24037724_whole_genome.png")`){#fig-sample-24037724-whole-genome}

{{< pagebreak >}}

## Comparison to WGS {#sec-results-wgs-comparison}

```{r}
#| label: wgs-sample-extraction-types
#| include: FALSE

pansolid_wgs_samples <- validation_sample_patient_info |> 
  filter(nhsno %in% wgs_html_ids$nhsno) 

pansolid_wgs_samples_cobas <- pansolid_wgs_samples |> 
  filter(method_name == "COBAS")

pansolid_wgs_samples_qs <- pansolid_wgs_samples |> 
  filter(method_name == "QIAsymphony_DNA_FFPE")

pansolid_wgs_samples_ff <- pansolid_wgs_samples |> 
  filter(method_name == "Fresh tissue")

```

DNA from patient samples previously tested by WGS was also tested using PanSolid NGS. In total, there were `r length(unique(pansolid_wgs_samples$labno))` samples tested from `r length(unique(pansolid_wgs_samples$nhsno))` patients, using 3 different extraction methods: `r nrow(pansolid_wgs_samples_qs)` had DNA extracted from FFPE tissue via the QIAsymphony method, `r nrow(pansolid_wgs_samples_cobas)` had DNA extracted from FFPE tissue via the Cobas method and `r nrow(pansolid_wgs_samples_ff)` had DNA extracted from fresh frozen tissue.

The PanSolid NGS amplification results for the `r length(amp_genes$gene)` target genes (@tbl-amplification-coordinates) were compared against the results from WGS for the same genes where the variant type was listed as "DUP" or "GAIN". WGS did detect copy number losses and regions of loss of heterozygosity in some target genes, but these were excluded as the current aim of the PanSolid CLC pipeline is to detect gene amplifications.

```{r}
#| label: compare-pansolid-and-wgs
#| include: FALSE

all_amp_gene_results_with_ids <- amp_validation_all_amp_gene_results_collated |> 
  left_join(validation_sample_patient_info,
            by = "labno", relationship = "many-to-one") |> 
  select(worksheet, labno, suffix, patient_name, nhsno, pathno, tissue_type, method_name,
         filepath, gene, max_region_fold_change, min_region_fold_change, pansolid_call)

wgs_cnvs_with_ids <- wgs_html_cnvs |> 
  left_join(wgs_html_ids, by = "filepath", relationship = "many-to-one") |> 
  mutate(labno_gene = str_c(labno, "_", gene))

pansolid_vs_wgs_amps <- all_amp_gene_results_with_ids |> 
  # One WGS sample was repeated for repeatability studies on worksheets
  # WS144291 and WS144364, so I have removed these repeats for clarity
  filter(!worksheet %in% c("WS144291", "WS144364")) |> 
  filter(nhsno %in% wgs_html_ids$nhsno) |> 
  left_join(wgs_cnvs_with_ids |> 
              filter(cnv_class %in% c("DUP", "GAIN")) |> 
              # Remove additional calls for the EGFR vIII case
              filter(!duplicated(labno_gene)), 
            join_by(nhsno == nhsno, gene == gene),
            # Multiple PanSolid samples, only one WGS sample
            relationship = "many-to-one")

```

```{r}
#| label: wgs-calls-not-dup-or-gain
#| include: FALSE

non_dup_gain_wgs_results <- wgs_cnvs_with_ids |> 
              filter(!cnv_class %in% c("DUP", "GAIN") &
                       gene %in% amp_genes$gene)

non_dup_gain_wgs_results_summary <- non_dup_gain_wgs_results |> 
  count(gene, cnv_class)

```

```{r}
#| label: compare-pansolid-and-wgs-sample-selection
#| include: FALSE

pansolid_vs_wgs_amps_selection <- pansolid_vs_wgs_amps |> 
  filter(method_name == "QIAsymphony_DNA_FFPE") |> 
  filter(!labno.x %in% c(
    # This sample was extracted from the same pathology block as 24030946
    "24030945", 
    # This sample pathology block does not match the WGS
    "24018922",
    # This sample has a signal-adjusted noise above 1
    "24030364"))

```

Results were compared for samples extracted using the QIAsymphony method, as this is now the validated DNA extraction method for FFPE samples at the North West GLH (Manchester site). 

One sample (PanSolid NGS lab number: 24018922; WGS lab number: 24015386) was excluded from the comparison as the FFPE shavings used for QIAsymphony extraction had a different pathology block identifier to the fresh frozen samples used for WGS. Another sample (PanSolid NGS lab number: 24030364) was excluded from the comparison as it had a signal adjusted noise value above 1. There were two DNA samples (24030945 and 24030946) extracted by the QIAsymphony method from the same pathology block; the PanSolid results were the same for each and sample 24030946 was chosen for the comparison to WGS.

```{r}
#| label: wgs-cnv-gains-dups
#| include: FALSE

wgs_cnvs_gains_dups <- wgs_html_cnvs |> 
  filter(cnv_class %in% c("DUP", "GAIN") & gene %in% amp_genes$gene)

```

In the WGS results, there were `r nrow(wgs_cnvs_gains_dups)` copy number gains in the targeted genes, with copy numbers ranging from `r min(wgs_cnvs_gains_dups$cnv_copy_number)`-`r max(wgs_cnvs_gains_dups$cnv_copy_number)`. As with ddPCR, CNVs detected on WGS with copy numbers greater or equal to 5 were categorised as amplifications. The results from the PanSolid pipeline compared to the results from WGS are shown in @tbl-wgs-comparison, and the sensitivity and specificity metrics are shown in @tbl-wgs-comparison-metrics.

```{r}
#| label: wgs-comparison-for-qs-samples
#| include: FALSE

wgs_cnv_amp_threshold <- 5

pansolid_vs_wgs_amps_selection_cnvs_above_five <- pansolid_vs_wgs_amps_selection |> 
  mutate(wgs_result = case_when(
    cnv_copy_number >= wgs_cnv_amp_threshold ~"Gain detected",
    cnv_copy_number < wgs_cnv_amp_threshold | is.na(cnv_copy_number) ~"No gain detected"
  )) |> 
  select(worksheet, labno.x, labno.y, patient_name.x, nhsno, pathno, wgs_pathno, method_name, 
         gene, max_region_fold_change, min_region_fold_change, pansolid_call,
         wgs_result, cnv_class, cnv_copy_number, confidence_support) |> 
  mutate(outcome = case_when(
    (wgs_result == "Gain detected" & pansolid_call == "amplification") ~"true_positive",
    
    (wgs_result == "No gain detected" & pansolid_call == "normal result") ~"true_negative",
    
    (wgs_result == "Gain detected" & pansolid_call == "normal result") ~"false_negative",
    
    (wgs_result == "No gain detected" & pansolid_call == "amplification") ~"false_positive"),
  
    outcome = factor(outcome, levels = c("true_negative",
                                         "true_positive",
                                         "false_negative",
                                         "false_positive")))

pansolid_vs_wgs_summary <- pansolid_vs_wgs_amps_selection_cnvs_above_five |> 
  group_by(gene, outcome) |> 
  count() |> 
  pivot_wider(id_cols = c(gene),
              names_from = outcome,
              values_from = n,
              values_fill = 0,
            names_expand = TRUE) |> 
  mutate("Sample loci" = true_positive + true_negative + false_negative +
                         false_positive) |> 
  rename(`Gene` = gene,
         `True negatives` = true_negative,
         `True positives` = true_positive,
         `False negatives` = false_negative,
         `False positives` = false_positive) |> 
  select(`Gene`, "Sample loci", `True negatives`, `True positives`, `False negatives`,
         `False positives`)

```

```{r}
#| label: tbl-wgs-comparison
#| tbl-cap: "Comparison with WGS results"
#| echo: FALSE

kable(pansolid_vs_wgs_summary |> 
        adorn_totals())

```

```{r}
#| label: wgs-comparison-metrics
#| include: FALSE

wgs_pansolid_metrics <-get_epir_metrics(outcome_vector = c(
  sum(pansolid_vs_wgs_summary$`True positives`),
  sum(pansolid_vs_wgs_summary$`False positives`),
  sum(pansolid_vs_wgs_summary$`False negatives`),
  sum(pansolid_vs_wgs_summary$`True negatives`)
))

wgs_pansolid_sensitivity <- filter(wgs_pansolid_metrics, Metric == "Sensitivity")$`Percentage (%)`

wgs_pansolid_specificity <- filter(wgs_pansolid_metrics, Metric == "Specificity")$`Percentage (%)`

```

```{r}
#| label: tbl-wgs-comparison-metrics
#| tbl-cap: "WGS vs PanSolid Test metrics"
#| echo: FALSE

kable(wgs_pansolid_metrics)

```

### WGS discordant results and ploidy {#sec-wgs-discordant-results}

There were 8 apparent false negative results in the *BRAF*, *EGFR*, *MET* and *SMO* genes for 2 WGS samples. All 4 genes are on chromosome 7, and all but one CNV had a copy number of 6 on WGS (@tbl-wgs-false-negative-ploidy). Inspection of the WGS reports for these two samples revealed that both had been identified as tetraploid, with a copy number of 6 predicted for the entire length of chromosome 7 (@fig-tetraploid-genome-23018367 and @fig-tetraploid-genome-23033921). The current PanSolid NGS pipeline assumes that the sample is diploid and measures copy number relative to this baseline, which explains why these relative gains of 2 copies from a tetraploid genome were not identified as significant.

```{r}
#| label: tbl-wgs-false-negative-ploidy
#| tbl-cap: "WGS discordant results"
#| echo: FALSE

wgs_discordant_results <- pansolid_vs_wgs_amps_selection_cnvs_above_five |> 
  filter(outcome == "false_negative") |> 
  mutate(max_region_fold_change = round(max_region_fold_change, 1)) |> 
  select(labno.x, labno.y, gene, max_region_fold_change, cnv_copy_number) |> 
  rename("PanSolid lab number" = labno.x,
         "WGS lab number" = labno.y,
         "Gene" = gene,
         "PanSolid fold change" = max_region_fold_change,
         "WGS copy number" = cnv_copy_number)

kable(wgs_discordant_results)

```

![Comparison of results from WGS and PanSolid NGS for WGS sample 23018367. The WGS result (top) identified the base chromosome count as 4, with 90% tumour cell content, with chromosome 7 having a copy number of 6. Conversely, PanSolid NGS (bottom) does not currently detect different ploidy states, and the *BRAF*, *EGFR*, *MET* and *SMO* genes were not identified as having increased copy numbers.](`r paste0(data_folder, "images/", "tetraploid_genome_comparison_23018367.png")`){#fig-tetraploid-genome-23018367}

![Comparison of results from WGS and PanSolid NGS for WFS sample 23033921. The WGS result (top) identified the base chromosome count as 4, with 43.8% tumour cell content.](`r paste0(data_folder, "images/", "tetraploid_genome_comparison_23033921.png")`){#fig-tetraploid-genome-23033921}

There was a remaining apparent false negative result with a WGS copy number above 6: for sample 24030962, PanSolid NGS did not detect an amplification for *EGFR*, whilst WGS detected an *EGFR* amplification of 14 copies, 10 copies above the genome ploidy of 4. The same DNA from fresh-frozen tissue showed a borderline *EGFR* fold change of 2.7 when tested using PanSolid NGS. This fold change level is consistent with what would be expected, given the NCC value determined by WGS was 43.8%.

Both DNA samples were then tested by ddPCR for *EGFR*. The ddPCR showed similar results to PanSolid NGS, with the QIAsymphony-extracted DNA having a normal *EGFR* result whilst the DNA from fresh-frozen tissue had a borderline *EGFR* amplification. This indicates that the discrepancy between the PanSolid NGS result for QIAsymphony-extracted DNA and the WGS result is due to intra-tumour heterogeneity for *EGFR* copy number in the specimens used for DNA extraction.

```{r}
#| label: wgs-false-negative
#| include: FALSE

false_neg_labnos <- c("24030962", "23033921")

false_neg_extraction <- validation_sample_patient_info |> 
  filter(labno %in% false_neg_labnos) |> 
  select(pathno, tissue_type, labno, method_name) |> 
  mutate(method_name = ifelse(
    method_name == "QIAsymphony_DNA_FFPE", 
    "QIAsymphony",
    method_name
  ))

false_neg_pansolid <- amp_validation_all_amp_gene_results_collated |> 
  filter(labno %in% false_neg_labnos & gene == "EGFR") |> 
  mutate(pansolid_fold_change = round(max_region_fold_change, 1)) |> 
  select(labno, pansolid_fold_change)

false_neg_wgs <- wgs_cnvs_with_ids |> 
  filter(labno %in% false_neg_labnos & gene == "EGFR") |> 
  select(labno, cnv_copy_number) |> 
  rename(wgs_copy_number = cnv_copy_number)

false_neg_ddpcr <- validation_ddpcr_collated |> 
  filter(target_type == "Ch1Unknown" & sample %in% false_neg_labnos &
           experiment == "EGFR Ex6_1") |> 
  mutate(ddpcr_copy_number = round(cnv, 1)) |> 
  select(sample, ddpcr_copy_number) |> 
  rename(labno = sample)

false_neg_collated <- false_neg_extraction |> 
  left_join(false_neg_pansolid, by = "labno") |> 
  left_join(false_neg_wgs, by = "labno") |> 
  left_join(false_neg_ddpcr, by = "labno") |> 
  rename(`Lab number` = labno,
         `Pathology block` = pathno,
         `Tissue` = tissue_type,
         `DNA extraction` = method_name,
         `PanSolid fold change` = pansolid_fold_change,
         `WGS copy number` = wgs_copy_number,
         `ddPCR copy number` = ddpcr_copy_number)

```

```{r}
#| label: tbl-wgs-false-negative
#| tbl-cap: "EGFR results for discordant samples"
#| echo: FALSE

kable(false_neg_collated)

```

![Chromosome 7 for discordant sample viewed on HTML plot. The *EGFR* locus is circled in black, and is visibly different between the FFPE and the fresh tissue extraction.](`r paste0(data_folder, "images/", "egfr_discrepant_result_chr7_view.png")`){#fig-egfr-discrepant-result}

### Comparison to WGS without tetraploid samples {#sec-wgs-comparison-without-tetraploidy}

```{r}
#| label: wgs-comparison-metrics-false-negative-removed
#| include: FALSE

pansolid_vs_wgs_summary_tetraploid_removed <- pansolid_vs_wgs_amps_selection_cnvs_above_five |> 
  filter(!labno.y %in% c("23018367", "23033921")) |> 
  group_by(gene, outcome) |> 
  count() |> 
  pivot_wider(id_cols = c(gene),
              names_from = outcome,
              values_from = n,
              values_fill = 0,
            names_expand = TRUE) |> 
  mutate("Sample loci" = true_positive + true_negative + false_negative +
                         false_positive) |> 
  rename(`Gene` = gene,
         `True negatives` = true_negative,
         `True positives` = true_positive,
         `False negatives` = false_negative,
         `False positives` = false_positive) |> 
  select(`Gene`, "Sample loci", `True negatives`, `True positives`, `False negatives`,
         `False positives`)

adjusted_wgs_pansolid_metrics <-get_epir_metrics(outcome_vector = c(
  sum(pansolid_vs_wgs_summary_tetraploid_removed$`True positives`),
  sum(pansolid_vs_wgs_summary_tetraploid_removed$`False positives`),
  sum(pansolid_vs_wgs_summary_tetraploid_removed$`False negatives`),
  sum(pansolid_vs_wgs_summary_tetraploid_removed$`True negatives`)
))

adjusted_wgs_pansolid_sensitivity <- filter(adjusted_wgs_pansolid_metrics, Metric == "Sensitivity")$`Percentage (%)`

adjusted_wgs_pansolid_specificity <- filter(adjusted_wgs_pansolid_metrics, Metric == "Specificity")$`Percentage (%)`

```

When the 2 tetraploid samples were removed from the comparison analysis, the sensitivity then increased to 100%, albeit with wide 95% confidence intervals due to the lower number of samples.

```{r}
#| label: tbl-wgs-comparison-summary-2
#| tbl-cap: "PanSolid NGS test results versus WGS without tetraploid samples"
#| echo: FALSE

kable(pansolid_vs_wgs_summary_tetraploid_removed |> 
        adorn_totals())

```

```{r}
#| label: tbl-wgs-comparison-metrics-2
#| tbl-cap: "PanSolid NGS test metrics versus WGS without tetraploid samples"
#| echo: FALSE

kable(adjusted_wgs_pansolid_metrics)

```

### WGS coordinate correlation {#sec-wgs-coordinate-correlation}

There were 5 amplifications in the *EGFR* and *MDMD2* genes detected by both WGS and PanSolid. @fig-egfr-wgs-pansolid and @fig-mdm2-wgs-pansolid show that the PanSolid pipeline identified shorter amplified regions than WGS, which correspond to the regions targeted by PanSolid QIAseq primers.

```{r}
#| label: wgs-coordinate-accuracy
#| echo: FALSE

pos_cnv_results_with_ids <- amp_validation_pos_cnv_results_collated |> 
  left_join(validation_sample_patient_info, by = "labno",
            relationship = "many-to-one")

true_pos_df <- pansolid_vs_wgs_amps_selection_cnvs_above_five |> 
  filter(outcome == "true_positive")

true_pos_samples <- true_pos_df$labno.x

ps_egfr_mdmd2_calls <- pos_cnv_results_with_ids |> 
  # Remove EGFR vIII sample
  filter(labno != 24030966) |> 
  # Reformat pathology number to same format as for WGS samples
  # I'm using pathno because I don't want to show NHS numbers in a plot
  mutate(pathno_formatted = case_when(
    pathno == "N23/436 B1" ~"N.23.436",
    pathno == "N23/292 C1" ~"N.23.292",
    pathno == "N23/625 C1" ~"N.23.0625",
    pathno == "N23/607 A1" ~"N.23.0607"),
  pathno_test_extraction = paste0(pathno_formatted, "_Pansolid")) |> 
  rename(cnv_start = start,
         cnv_end = end) |> 
  filter(gene %in% c("EGFR", "MDM2") & labno %in% true_pos_samples) |> 
  select(nhsno, pathno_formatted, labno, gene,cnv_start, cnv_end, pathno_test_extraction)

wgs_egfr_mdm2_calls <- wgs_cnvs_with_ids |> 
  filter(gene %in% c("EGFR", "MDM2") & nhsno %in% ps_egfr_mdmd2_calls$nhsno) |> 
  mutate(pathno_formatted = case_when(
    wgs_pathno == "N23.000292" ~"N.23.292",
    wgs_pathno == "N,23.0625" ~"N.23.0625",
    wgs_pathno == "N,23.436" ~"N.23.436",
    wgs_pathno == "N,23.0607" ~"N.23.0607"),
  pathno_test_extraction = paste0(pathno_formatted, "_WGS")) |> 
  select(nhsno, pathno_formatted, labno, gene,cnv_start, cnv_end, pathno_test_extraction)

wgs_ps_egfr_mdmd2_calls <- rbind(ps_egfr_mdmd2_calls, wgs_egfr_mdm2_calls)

```

```{r}
#| label: fig-egfr-wgs-pansolid
#| fig-cap: "Comparison of coordinate calls for *EGFR* amplifications detected by WGS and PanSolid, organised by pathology block ID and test. This plot does not include sample 24030966 in which an *EGFR* version III amplification was detected."
#| echo: FALSE

egfr_wgs_pansolid_plot <- ggplot(wgs_ps_egfr_mdmd2_calls |> filter(gene == "EGFR" & 
                                           pathno_formatted %in% c("N.23.436", 
                                                                   "N.23.0625")), 
       aes(x = cnv_start, y = pathno_test_extraction)) +
  theme_bw() +
  theme(axis.text.x = element_blank()) +
  geom_segment(aes(x = cnv_start, xend = cnv_end, 
                     y = pathno_test_extraction, yend = pathno_test_extraction),
                 linewidth = 2)  +
  labs(x = "", y = "", title = "PanSolid and WGS results: EGFR") +
  coord_cartesian(xlim = c(54000000, 55600000))

egfr_wgs_exon_plot <- make_exon_plot(plot_xmin = 54000000, 
                              plot_xmax = 55600000,
                              interval = 500000,
                              chromosome = "7")

egfr_wgs_primer_plot <- make_primer_plot(plot_xmin = 54000000, 
                              plot_xmax = 55600000,
                              interval = 500000,
                              chromosome = "7")

egfr_wgs_triptych <- (egfr_wgs_pansolid_plot / egfr_wgs_primer_plot / egfr_wgs_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

egfr_wgs_triptych

```

```{r}
#| label: fig-mdm2-wgs-pansolid
#| fig-cap: "Comparison of coordinate calls for *MDM2* amplifications detected by WGS and PanSolid, organised by pathology block identifier and test."
#| echo: FALSE

mdm2_wgs_pansolid_plot <- ggplot(wgs_ps_egfr_mdmd2_calls |> 
          filter(gene == "MDM2" & pathno_formatted %in% c("N.23.292",
                                                          "N.23.0607")), 
       aes(x = cnv_start, y = pathno_test_extraction)) +
  geom_segment(aes(x = cnv_start, xend = cnv_end, 
                     y = pathno_test_extraction, yend = pathno_test_extraction),
                 linewidth = 2) +
  theme_bw() +
  theme(axis.text.x = element_blank()) +
  geom_segment(aes(x = cnv_start, xend = cnv_end, 
                     y = pathno_test_extraction, yend = pathno_test_extraction),
                 linewidth = 2)  +
  labs(x = "", y = "", title = "PanSolid and WGS results: MDM2") +
  coord_cartesian(xlim = c(68720000, 68900000))

mdm2_wgs_exon_plot <- make_exon_plot(plot_xmin = 68720000, 
                              plot_xmax = 68900000,
                              interval = 20000,
                              chromosome = "12")

mdm2_wgs_primer_plot <- make_primer_plot(plot_xmin = 68720000, 
                              plot_xmax = 68900000,
                              interval = 20000,
                              chromosome = "12")

mdm2_wgs_triptych <- (mdm2_wgs_pansolid_plot / mdm2_wgs_primer_plot / mdm2_wgs_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

mdm2_wgs_triptych

```

### *EGFR* version 3 {#sec-results-egfr-v3}

In a sample from pathology block N23.0626 (PanSolid NGS lab number: 24030966; WGS lab number: 23034780), PanSolid NGS showed 2 amplified regions in the *EGFR* gene, with a boundary at the end of *EGFR* exon 7. Inspection of the interactive HTML showed that this was caused by a loss of log2 ratios in the region between exons 2 to 7 (@fig-egfr-viii-html), indicating the presence of the *EGFR* version 3 transcript. This was confirmed by examining the PanSolid target level fold change results, and the *EGFR* version 3 transcript was confirmed by WGS.

![EGFR vIII visible in the interactive HTML whole genome plot generated for sample 24030966](`r paste0(data_folder, "images/", "egfr_viii_html.png")`){#fig-egfr-viii-html}

### WGS dosage correlation {#sec-wgs-dosage-correlation}

There were only 5 samples with amplifications detected on PanSolid and WGS, which is not enough to perform a robust correlation analysis on. However, there was a general agreement between the two methods on the dosage of each gene (Supplementary Information @fig-wgs-pansolid-dosage).

```{r}
#| label: wgs-dosage-accuracy
#| echo: FALSE

pansolid_wgs_dosage <- pos_cnv_results_with_ids |> 
  filter(gene %in% c("EGFR", "MDM2") &
           # Remove EGFR vIII call
           labno != "24030966" &
           method_name == "QIAsymphony_DNA_FFPE") |> 
  select(worksheet, labno, patient_name, nhsno, method_name, gene,
         fold_change, start, end) |>
   mutate(pansolid_copy_number = fold_change * 2) |> 
  left_join(wgs_cnvs_with_ids, join_by("nhsno" == "nhsno",
                                       "gene" == "gene")) |>  
  filter(!is.na(variant_type))

wgs_pansolid_dosage_plot <- ggplot(pansolid_wgs_dosage,
                                   aes(x = cnv_copy_number, y = pansolid_copy_number)) +
  geom_point(shape = 21, size = 3, alpha = 0.6) +
  theme_bw() +
  theme(legend.position = "bottom") +
  labs(x = "WGS copy number", y = "Pansolid fold change") +
  geom_abline(linetype = "dashed") +
  ylim(0, 400) +
  xlim(0, 400) +
  facet_wrap(~gene)

```

{{< pagebreak >}}

## Repeat testing {#sec-results-repeat-testing}

```{r}
#| label: repeat-schedule
#| include: FALSE

repeat_schedule <- tibble(
  "Worksheet" = c(1, 2, 2, 2, 3),
  "Sample replicate" = c(1, 2, 3, 4, 5),
  "Repeat category" = c("Inter-run", "Inter-run and intra-run", 
                        "Intra-run", "Intra-run", "Inter-run")
  )

```

Intra-run variation (repeatability) and inter-run variation (reproducibility) were investigated for 3 samples using the testing structure shown in @tbl-repeat-schedule. Sample 24017319 had no amplifications detected, whilst sample 24020998 had amplifications in *EGFR* and *MDM2*, and sample 24027774 had amplifications in *MYC* and *MET*. 

```{r}
#| label: tbl-repeat-schedule
#| tbl-cap: "Repeat testing"
#| echo: FALSE

kable(repeat_schedule)

```

```{r}
#| label: repeatability-filtering
#| include: FALSE

repeat_noise_data <- amp_validation_stdev_results_collated |> 
  filter(duplicated(labno, fromLast = TRUE) |
           duplicated(labno, fromLast = FALSE)) |> 
  # Excel file produced twice as sample is in 2 cohorts
  filter(labno != "24030966") |> 
  # This is the limit of detection sample
  filter(labno != "24039973") |> 
  filter(!grepl(pattern = "SERA", x = patient_name,
               ignore.case = TRUE)) |> 
  left_join(amp_validation_percent_138_collated |> 
    select(filepath, percent_whole_panel_covered_at_138x),
      by = "filepath")

inter_run_replicates <- c(
  # 24017319
  "24017319_WS141734", "24017319a_WS144291", "24017319_WS144364",
  # 24027774
  "24027774_WS142076", "24027774a_WS144291", "24027774_WS144364",
  # 24020998
  "24020998_WS141045", "24020998a_WS144291", "24020998_WS144364")

intra_run_replicates <- c(
  # 24017319
  "24017319a_WS144291", "24017319b_WS144291", 
  # 24027774
  "24027774a_WS144291", "24027774b_WS144291", "24027774c_WS144291",
  # 24020998
  "24020998a_WS144291", "24020998b_WS144291", "24020998c_WS144291"
)

repeat_all_amp_data <- amp_validation_all_amp_gene_results_collated |> 
  filter(labno %in% repeat_noise_data$labno) |> 
  mutate(intra_run = ifelse(labno_suffix_worksheet %in% intra_run_replicates, "Yes", "No"),
         inter_run = ifelse(labno_suffix_worksheet %in% inter_run_replicates, "Yes", "No"))

```

```{r}
#| label: repeat-worksheet-details
#| include: FALSE

tech_progress_excel <- read_excel(path = paste0(data_folder, 
                                                "excel_spreadsheets/",
                                                "NGS Technical Team Progress Sheet - 2024 August 2024.xlsx"),
                                  sheet = "QIAseq DNA PanSolid") |> 
  janitor::clean_names()

repeat_worksheet_details <- tech_progress_excel |> 
  filter(worksheet_number %in% repeat_all_amp_data$worksheet)

tbl_rpt_worksheets <- repeat_worksheet_details |> 
  mutate(date_started = str_extract(string = frag_er_a_tail_completed_date,
                                    pattern = "(^\\d{2}/\\d{2}/\\d{4}).+",
                                    group = 1),
         date_completed = str_extract(string = nova_seq_loading_completed_bioinformatics_alerted,
                                    pattern = "(^\\d{2}/\\d{2}/\\d{4}).+",
                                    group = 1),
         nova_seq = ifelse(nova_seq_a_or_b == "A\r\nA", "A", nova_seq_a_or_b)) |> 
  select(worksheet_number, date_started,
         date_completed, nova_seq) |>  
  rename("Worksheet" = worksheet_number,
         "Date started" = date_started,
         "Date completed" = date_completed,
         "NovaSeq" = nova_seq)

```

Samples were tested on `r length(unique(repeat_all_amp_data$worksheet))` worksheets over a period of 3 months, with 5 members of the technical team performing the setup and NGS libraries run on two different NovaSeq instruments (@tbl-repeat-worksheets).

```{r}
#| label: tbl-repeat-worksheets
#| tbl-cap: "Details of worksheets with repeat samples"
#| echo: FALSE

kable(tbl_rpt_worksheets)

```

```{r}
#| label: fig-repeatability-plot-24017319
#| fig-cap: "The results of repeat replicates for sample 24017319. Both maximum and minimum fold changes for each gene are plotted, and are connected by a vertical black line if they are different values. The solid line shows the fold change threshold of 2.8. The white region between 1 and -1, bordered by grey lines, shows the region which fold changes cannot have values within."
#| fig-height: 6
#| fig-width: 6
#| echo: FALSE

repeat_all_amp_data_long <- repeat_all_amp_data |> 
  pivot_longer(cols = c("max_region_fold_change", "min_region_fold_change"),
               names_to = "fold_change_type",
               values_to = "fold_change")

repeat_plot_24017319 <- repeat_all_amp_data_long |> 
  filter(labno == "24017319") |>
  ggplot(aes(x = labno_suffix_worksheet, y = fold_change)) +
  annotate('rect', xmin = 0, xmax = 5, ymin = -1, 
           ymax = 1, fill='white') +
  geom_hline(yintercept = 2.8) +
  geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_line() +
  geom_point(shape = 21, size = 2, fill = "white") +
  theme_bw() +
  coord_cartesian(ylim = c(-2, 4)) +
  scale_y_continuous(breaks = c(seq(-2,4, by = 2))) +
  facet_wrap(~gene) +
  theme(axis.text.x = element_blank()) +
  labs(x = "Replicate", y = "Fold change",
       title = "Repeat results for 24017319")

repeat_plot_24017319

```

```{r}
#| label: fig-repeatability-plot-24020998
#| fig-cap: "The results of repeat replicates for sample 24020998. Both maximum and minimum fold changes for each gene are plotted. The solid line shows the fold change threshold of 2.8."
#| fig-height: 6
#| fig-width: 6
#| echo: FALSE

repeat_plot_24020998 <- repeat_all_amp_data_long |> 
  filter(labno == "24020998") |>
  ggplot(aes(x = labno_suffix_worksheet, y = fold_change)) +
  geom_hline(yintercept = 2.8) +
  annotate('rect', xmin = 0, xmax = 6, ymin = -1, 
           ymax = 1, fill='white') +
  geom_hline(yintercept = 2.8) +
  geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_line() +
  geom_point(shape = 21, size = 2, fill = "white") +
  theme_bw() +
  coord_cartesian(ylim = c(-2, 6)) +
  scale_y_continuous(breaks = c(seq(-2,6, by = 2))) +
  facet_wrap(~gene) +
  theme(axis.text.x = element_blank()) +
  labs(x = "Replicate", y = "Fold change",
       title = "Repeat results for 24020998")

repeat_plot_24020998

```

```{r}
#| label: fig-repeatability-plot-24027774
#| fig-cap: "The results of repeat replicates for sample 24027774. Both maximum and minimum fold changes for each gene are plotted. The solid line shows the fold change threshold of 2.8. The Y axis varies between each facet due to the very high fold change values for the *MYC* amplification."
#| fig-height: 6
#| fig-width: 6
#| echo: FALSE

repeat_plot_24027774 <- repeat_all_amp_data_long |> 
  filter(labno == "24027774") |>
  ggplot(aes(x = labno_suffix_worksheet, y = fold_change)) +
  geom_hline(yintercept = 2.8) +
  annotate('rect', xmin = 0, xmax = 6, ymin = -1, 
           ymax = 1, fill='white') +
  geom_hline(yintercept = 2.8) +
  geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_line() +
  geom_point(shape = 21, size = 2, fill = "white") +
  theme_bw() +
  facet_wrap(~gene, scales = "free_y") +
  theme(axis.text.x = element_blank()) +
  labs(x = "Replicate", y = "Fold change",
       title = "Repeat results for 24027774")

repeat_plot_24027774

```

### Uncertainty of measurement

```{r}
#| label: repeatability-standard-deviation
#| include: FALSE

repeat_data_fold_change_range <- repeat_all_amp_data |> 
  filter(max_region_fold_change <= 10) |> 
  # Remove the "empty space" between 1 and -1
  mutate(fold_change_for_uom = case_when(
    max_region_fold_change < -1 ~max_region_fold_change +2,
    TRUE ~max_region_fold_change
  ))

intra_run_sd_table <- group_sd(df = repeat_data_fold_change_range |> 
  filter(labno_suffix_worksheet %in% intra_run_replicates),
                              group_variable1 = labno,
                              group_variable2 = gene,
                              measurement_variable = fold_change_for_uom)
  
intra_pooled_sd <- round(pool_sd(intra_run_sd_table), 3)

inter_run_sd_table <- group_sd(df = repeat_data_fold_change_range |> 
  filter(labno_suffix_worksheet %in% inter_run_replicates),
                              group_variable1 = labno,
                              group_variable2 = gene,
                              measurement_variable = fold_change_for_uom)
  
inter_pooled_sd <- round(pool_sd(inter_run_sd_table), 3)

all_results_sd_table <- group_sd(df = repeat_data_fold_change_range,
                              group_variable1 = labno,
                              group_variable2 = gene,
                              measurement_variable = fold_change_for_uom)

all_repeats_pooled_sd <- round(pool_sd(all_results_sd_table), 3)

```

```{r}
#| label: sd-fold-change-thresholds
#| include: FALSE

fold_change_threshold <- 2.8

theoretical_fold_change_threshold <- 3

fold_change_uom_upper <- theoretical_fold_change_threshold + (2 * inter_pooled_sd)

fold_change_uom_lower <- theoretical_fold_change_threshold - (2 * inter_pooled_sd)

```

There were `r nrow(repeat_noise_data)` replicates for inclusion in the repeat testing study. Sample replicate 24017319c on worksheet WS144291 failed due to poor coverage.

For the calculation of uncertainty of measurement, the data was altered in the following ways:

- The *MYC* results for sample 24027774 were excluded because the fold changes were all over 75 and there was much greater variability than for lower fold changes (@fig-repeatability-plot-24027774). 

- Any fold changes lower than -1 had 2 added. This is because the fold change for amplifications cannot have a value between 1 and -1. Adding 2 to fold changes below -1 was performed to avoid this mathematical constraint being misinterpreted as sample variation.

- The maximum fold change for each gene in each replicate was used.

This left `r nrow(repeat_data_fold_change_range)` data points. 
Fold changes between genes or samples were not compared, as each gene within each sample will have a different dosage. Instead, the standard deviation of fold change values was calculated for each gene within each sample. The pooled standard deviation for all genes across all samples was then calculated using the method from @harris2019 (Section 8.4, page 211). 

This method calculated the intra-run pooled standard deviation for fold changes below 10 as `r intra_pooled_sd`, and the inter-run pooled standard deviation as `r inter_pooled_sd`. When both intra-run and inter-run data was used, the pooled standard deviation was `r all_repeats_pooled_sd`. The inter-run standard deviation was chosen as the standard deviation value for the uncertainty of measurement, as it is the most conservative.

Taking the assumption that repeat variation in the measurement of fold change follows a normal distribution, 95% of repeat values would be expected to fall within ± 2 standard deviations of the mean. Consequently, the uncertainty of measurement for a fold change value below 10 can be taken as ± `r (2*inter_pooled_sd)` (± 2 x `r inter_pooled_sd`) at a confidence level of 95%. 

### Application of the uncertainty of measurement

At the beginning of the PanSolid CNV validation, the fold change threshold was set at 3. This value was the expected fold change of a sample with 50% NCC and 10 copies of the target gene per tumour cell (8 additional copies from a diploid copy number). The fold change threshold was reduced to 2.8 during the validation of *ERBB2* amplifications, following a limit of detection experiment. This experiment showed that a SeraCare control mixture, representing a sample with 25% NCC and 14 *ERBB2* copies per cell (12 additional copies), had a fold change of 2.81 ([DOC6260]{custom-style="Strong"}, section 5.6, page 21). This mixture had a predicted theoretical fold change of 2.5.

When the uncertainty of measurement calculated in this validation document (± `r (2*inter_pooled_sd)`) is added to the original theoretical fold change threshold of 3, the actual fold change threshold of 2.8 accommodates this uncertainty (@fig-fold-change-uom-plot).

```{r}
#| label: fig-fold-change-uom-plot
#| fig-cap: "All the fold change results for PanSolid NGS validation samples, coloured by their relation to the fold change threshold of 2.8. The dashed lines show the theoretical and actual fold change thresholds of 3 and 2.8, respectively, with the grey region shown the uncertainty of measurement around 3. The Y axis is -2 to 4 to make the plot clearer; amplifications with fold changes above 4 are not shown."
#| fig-width: 6
#| fig-height: 6.2
#| echo: FALSE

fold_change_uom_plot <- ggplot(amp_validation_all_amp_gene_results_collated, aes(x = gene,
                                                         y = max_region_fold_change)) +
   annotate('rect', xmin = 0, xmax = 6, ymin = -1, 
           ymax = 1, fill='white') +
   geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_hline(yintercept = fold_change_threshold, linetype = "dashed") +
  geom_hline(yintercept = theoretical_fold_change_threshold, linetype = "dashed") +
  annotate('rect', xmin = 0, xmax = 10, ymin = fold_change_uom_lower, 
           ymax = fold_change_uom_upper, 
           alpha = 0.5, fill='grey') +
  geom_jitter(shape = 21, aes(fill = pansolid_call), width = 0.2, alpha = 0.6) +
  scale_fill_manual(values = c("#CC6677", "#88CCEE")) +
  theme_bw() +
  theme(legend.position = "bottom",
        panel.grid = element_blank()) +
  coord_cartesian(ylim = c(-2, 4)) +
  scale_y_continuous(breaks = c(-2, -1, 0, 1, 2, 2.8, 3, 4),
                     labels = c(-2,-1, 0, 1, 2, "Actual threshold 2.8", "Theoretical threshold 3",
                                4)) +
  labs(fill = "", x = "", y = "") 

fold_change_uom_plot

```

```{r}
#| label: fig-fold-change-uom-plot-zoomed-out
#| fig-cap: "This figure shows the same plot as @fig-fold-change-uom-plot but includes the full range of fold changes detected."
#| fig-width: 6
#| echo: FALSE

fold_change_uom_plot_zoomed_out <- ggplot(amp_validation_all_amp_gene_results_collated, aes(x = gene,
                                                         y = max_region_fold_change)) +
  annotate('rect', xmin = 0, xmax = 6, ymin = -1, 
           ymax = 1, fill='white') +
   geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_hline(yintercept = fold_change_threshold, linetype = "dashed") +
  geom_hline(yintercept = theoretical_fold_change_threshold, linetype = "dashed") +
  annotate('rect', xmin = 0, xmax = 10, ymin = fold_change_uom_lower, 
           ymax = fold_change_uom_upper, 
           alpha = 0.5, fill='grey') +
  geom_jitter(shape = 21, aes(fill = pansolid_call), width = 0.2, alpha = 0.6) +
  scale_fill_manual(values = c("#CC6677", "#88CCEE")) +
  theme_bw() +
  theme(legend.position = "bottom",
        panel.grid = element_blank()) +
  labs(fill = "", x = "", y = "Fold change") 

fold_change_uom_plot_zoomed_out

```

### CNV region variation {#sec-cnv-region-variation}

For the *MET* and *MYC* amplifications detected, there was no change in the region defined as amplified in any of the repeat replicates (Supplementary Information @fig-24027774-MYC and @fig-24027774-MET). However the region for the *EGFR* amplification in sample 24020998 was reduced on worksheet WS141045 in comparison to other replicates, and two different fold change regions were identified in a pattern similar to *EGFR* vIII (@fig-24020998-EGFR). This sample replicate had the lowest signal-adjusted noise value of the replicates for this patient, and over 99% of the target regions had a coverage exceeding 138X, which could explain why two CNV regions were detected in comparison to the other replicates.

```{r}
#| label: fig-24020998-EGFR
#| fig-cap: "*EGFR* amplifications in repeated sample 24020998. Results were consistent except for the results from worksheet WS141045 in which two CNV regions of slightly different fold changes were identified with breakpoints within *EGFR*."
#| fig-cap-location: top
#| echo: FALSE

fig_24020998_EGFR <- make_cnv_triptych_plot(input_plot  = 
  make_labno_cnv_plot(df = amp_validation_pos_cnv_results_collated |> 
    filter(labno == "24020998"),
    gene = "EGFR",
    yaxis = labno_suffix_worksheet,
    interval = 500000,
    buffer = 100000,
    title = expression(paste("Repeated sample 24020998: ",
                             italic("EGFR")))))

fig_24020998_EGFR

```

{{< pagebreak >}}

## Limit of detection {#sec-results-lod}

### SeraCare reference materials {#sec-results-lod-seracare-neat}

The Seraseq® TNA (DNA) WT Mix was tested on the PanSolid v2 enrichment on worksheet WS144291 and the +3 copies, +6 copies and +12 copies reference materials were tested on worksheet WS139890. There were six genes of interest, *BRAF*, *EGFR*, *ERBB2*, *MET*, *MYC* and *MYCN*, which had artificial gene constructs spiked into the SeraCare reference materials. In the +12 copies and +6 copies materials, all 6 genes of interest were detected by the PanSolid pipeline (@fig-seracare-pansolid-results), with the amplification regions covering the full width of each gene. In the +3 copies reference material, *BRAF* and *MYC* were not detected, although they had fold changes close to the threshold and were visibly amplified on the generated whole genome plot (@fig-seracare-control-results-png).

```{r}
#| label: seracare-ngs-comparison
#| include: FALSE

seracare_gene_copies <- read_csv(file = paste0(data_folder, 
                                                 "seracare_reference_materials/",
                                                 "seracare_gene_copies.csv")) |> 
  mutate(total_copies_ddpcr_seracare = additional_copies_ddpcr + 2,
         total_copies_ngs_seracare = additional_copies_ngs + 2,
         reference_material_short = factor(x = reference_material_short,
                                           levels = c("2 copies (+0)", "5 copies (+3)",
                                           "8 copies (+6)", "14 copies (+12)")))

seracare_ids <- amp_validation_all_amp_gene_results_collated |> 
  filter(!duplicated(labno)) |>
  select(labno, patient_name) |> 
  inner_join(seracare_gene_copies |> 
               filter(!duplicated(reference_material)) |> 
               select(reference_material),
             join_by("patient_name" == "reference_material"))

seracare_ngs_comparison <- amp_validation_all_amp_gene_results_collated |> 
  # Remove limit of detection samples
  filter(!(worksheet == "WS144291" & labno ==  "24039973")) |> 
  # Remove samples run on PanSolid version 1
  filter(!worksheet == "WS138156") |> 
  inner_join(seracare_gene_copies, 
             join_by("patient_name" == "reference_material",
                     "gene" == "gene")) |> 
  mutate(
    total_copies_ngs_pansolid = max_region_fold_change * 2, 
    patient_name = factor(x = patient_name,
                               levels = c("CNVMix12CopiesSERASEQ",
                                          "CNVMix6CopiesSERASEQ",
                                          "CNVMix3copiesSERASEQ",
                                          "DNAWTmixSERASEQ")),
         
         predicted_fold_change = (expected_additional_copies + 2) / 2)

```

```{r}
#| label: fig-seracare-pansolid-results
#| fig-cap: "SeraCare reference material detection. Dashed line shows the PanSolid fold change threshold of 2.8."
#| fig-height: 6.3
#| fig-width: 6.1
#| echo: FALSE

seracare_colours <- c(
  "#009E73",
  "#F0E442",
  "#E69F00", 
  "#D55E00"
)

seracare_pansolid_results_plot <- ggplot(seracare_ngs_comparison, 
                                         aes(x = reference_material_short,
                                    y = max_region_fold_change)) +
  annotate('rect', xmin = 0, xmax = 5, ymin = fold_change_uom_lower, 
           ymax = fold_change_uom_upper, 
           alpha = 0.5, fill='grey') +
  geom_point(size = 3, shape = 21, aes(fill = reference_material_short)) +
  scale_fill_manual(values = seracare_colours) +
  theme_bw() +
  theme(legend.position = "none", axis.text.x = element_text(size = 8,
                                                             angle = 90)) +
  scale_y_continuous(limits = c(-5, 15), breaks = c(0, 5, 10, 15)) +
  facet_wrap(~gene, ncol = 2) +
  labs(x = "Total copies (additional copies)", y = "PanSolid NGS fold change", title = "SeraCare results by target gene") +
  geom_hline(yintercept = fold_change_threshold)

seracare_pansolid_results_plot

```

```{r}
#| label: tbl-seracare-pansolid-ngs
#| tbl-cap: "SeraCare reference material results"
#| eval: FALSE
#| include: FALSE

seracare_ngs_comparison_tbl <- seracare_ngs_comparison |>
  mutate(`Pansolid fold change` = round(max_region_fold_change, 1),
         `PanSolid total copies` = round(total_copies_ngs_pansolid, 1),
         `SeraCare NGS total copies` = round(total_copies_ngs_seracare, 1)) |> 
  rename(`Lab number` = labno,
         `Reference material` = patient_name,
         `Gene` = gene,
         `Predicted fold change` = predicted_fold_change) |> 
  select(`Lab number`, `Reference material`, `Gene`, `Predicted fold change`, 
         `Pansolid fold change`,
         `PanSolid total copies`, `SeraCare NGS total copies`)

kable(seracare_ngs_comparison_tbl)

```

![Results in the whole genome view for the SeraCare reference materials. The +12, +6 and +3 copies samples were run on worksheet WS139890 and the wild type sample (+0 copies) was run on worksheet WS144291. The +0 copies result is the same sample as the 0% spike-in dilution for the limit of detection dilution experiment.](
`r paste0(data_folder, "images/", "lod_seracare_controls.png")`){#fig-seracare-control-results-png}

The PanSolid pipeline results were consistently higher than the predicted fold change and the results provided by SeraCare for the *EGFR* and *ERBB2* genes for the +3 copies, +6 copies and +12 copies reference materials. Conversely, the PanSolid results for *MYC* were consistently lower than the predicted fold change and SeraCare results (@fig-seracare-ngs-pansolid). This relationship was also observed when the ddPCR results for each reference material were compared to the ddPCR copy numbers provided by SeraCare (@fig-seracare-ddpcr-pansolid). Notably, the PanSolid NGS results for *MET* were closely consistent with the NGS results for *MET* provided by SeraCare, but when the ddPCR and NGS results provided by SeraCare were directly compared, there was a clear overestimation of *MET* copy number (@fig-seracare-ddpcr-ngs). This is explained by the overlap region of the 2 synthetic *MET* constructs used in the SeraCare control: this region is present at higher quantities and hence the reported quantity for the entire gene region is higher on both the Illumina TruSight assay used by SeraCare and on PanSolid NGS. Although *BRAF* and *EGFR* also have 2 synthetic constructs in the SeraCare reference materials, the proportion of the overlap region relative to the gene length is much lower (@tbl-seracare-gene-constructs), resulting in these genes not being impacted. The increased quantity of these gene regions is also visible on the HTML whole genome view (@fig-seracare-overlap-regions-png). 

```{r}
#| label: fig-seracare-ngs-pansolid
#| fig-cap: "Correlation of copy numbers detected for SeraCare reference materials on PanSolid NGS and the copy numbers provided by SeraCare using an NGS method. The copy numbers for PanSolid NGS are calculated as the fold change multiplied by 2. Copy numbers for the wild type (+0) sample were not provided by SeraCare on the technical product report, so a copy number of 2 is used for creating this plot."
#| fig-width: 6
#| echo: FALSE

ngs_comparison_plot <- ggplot(seracare_ngs_comparison, 
                              aes(x = total_copies_ngs_pansolid,
                                    y = total_copies_ngs_seracare )) +
  geom_abline(linetype = "dashed") +
  geom_point(shape = 21, size = 3, alpha = 0.6, aes(fill = reference_material_short)) +
  scale_fill_manual(values = seracare_colours) +
  ggpubr::stat_cor(method = "pearson", label.x = 0, label.y = 30) +
  theme_bw() +
  theme(legend.position = "bottom") +
  scale_x_continuous(limits = c(-5, 35), 
                     breaks = c(0, 10, 20, 30)) +
  scale_y_continuous(limits = c(-5, 35), 
                    breaks = c(0, 10, 20, 30)) +
  facet_wrap(~gene) +
  labs(title = "PanSolid NGS vs SeraCare NGS",
       x = "Total copies PanSolid NGS (Manchester)",
       y = "Total copies TruSight NGS (SeraCare)",
       fill = "")

ngs_comparison_plot

```

```{r}
#| label: seracare-ddpcr-comparison
#| include: FALSE

seracare_details <- read_csv(file = paste0(data_folder,
                                             "seracare_reference_materials/",
                                             "seracare_sample_details.csv"),
                             col_types = c("ccccccc")) |> 
  clean_names()

seracare_ddpcr_comparison <- validation_ddpcr_collated |> 
  filter(target_type == "Ch1Unknown") |> 
  inner_join(seracare_details, join_by("sample" == "dna_number")) |> 
  inner_join(seracare_gene_copies, join_by("patient_name" == "reference_material",
                                            "gene" == "gene")) |> 
  mutate(patient_name = factor(x = patient_name,
                               levels = c("CNVMix12CopiesSERASEQ",
                                          "CNVMix6CopiesSERASEQ",
                                          "CNVMix3copiesSERASEQ",
                                          "DNAWTmixSERASEQ")))

```

```{r}
#| label: fig-seracare-ddpcr-pansolid
#| fig-cap: "Correlation of copy numbers detected for SeraCare reference materials on ddPCR and copy numbers determined by SeraCare using a ddPCR method. Pearson's coefficient is not calculated for *BRAF*, *EGFR* and *MET* with only 2 data points. Not all SeraCare reference materials were tested with each ddPCR assay due to limited DNA volumes. Copy numbers for the wild type (+0) sample were not provided by SeraCare on the technical product report, so a copy number of 2 is used for creating this plot."
#| fig-width: 6
#| echo: FALSE
#| warning: FALSE

ddpcr_comparison_plot <- ggplot(seracare_ddpcr_comparison, 
                              aes(x = cnv,
                                  y = total_copies_ddpcr_seracare )) +
  geom_abline(linetype = "dashed") +
  geom_point(shape = 21, size = 3, alpha = 0.6, aes(fill = reference_material_short)) +
  scale_fill_manual(values = seracare_colours) +
  facet_wrap(~gene) +
  ggpubr::stat_cor(method = "pearson", label.x = 0, label.y = 20) +
  theme_bw() +
  theme(legend.position = "bottom") +
  scale_x_continuous(limits = c(0, 25), 
                     breaks = c(0, 10, 20)) +
  scale_y_continuous(limits = c(0, 25), 
                     breaks = c(0, 10, 20)) +
  labs(x = "Total copies ddPCR (Manchester)",
       y = "Total copies ddPCR (SeraCare)",
       title = "Manchester ddPCR vs SeraCare ddPCR",
       fill = "")

ddpcr_comparison_plot

```

```{r}
#| label: fig-seracare-ddpcr-ngs
#| fig-cap: "Correlation of copy numbers provided by SeraCare for SeraCare reference materials on ddPCR and NGS, showign *MET* as a clear outlier. This information is taken from the SeraCare reference material technical product reports. Copy numbers for the wild type reference material are not shown as these were not provided on the technical product report."
#| fig-width: 6
#| echo: FALSE

seracare_ddpcr_ngs_plot <- seracare_gene_copies |> 
  filter(reference_material_short != "2 copies (+0)") |> 
  filter(!is.na(total_copies_ngs_seracare)) |> 
  ggplot(aes(x = total_copies_ddpcr_seracare, y = total_copies_ngs_seracare)) +
  geom_abline(linetype = "dashed") +
  geom_point(shape = 21, size = 3, alpha = 0.6, aes(fill = reference_material_short)) +
  scale_fill_manual(values = c("#F0E442","#E69F00", "#D55E00")) +
  facet_wrap(~gene) +
  theme_bw() +
  theme(legend.position = "bottom") +
  scale_x_continuous(limits = c(0, 30), 
                     breaks = c(0, 10, 20, 30)) +
  scale_y_continuous(limits = c(0, 30), 
                     breaks = c(0, 10, 20, 30)) +
  labs(fill = "",
       x = "Total copies ddPCR (SeraCare)",
       y = "Total copies TruSight NGS (SeraCare)",
       title = "SeraCare ddPCR vs SeraCare NGS")


seracare_ddpcr_ngs_plot

```

![The overlap regions (circled in black) of the *BRAF*, *EGFR* and *MET* genes in the +12 copies SeraCare reference material are visible when viewed on the HTML whole genome view. The raw target-level outputs of the PanSolid CLC pipeline were checked to confirm that these targets were within the synthetic construct overlap regions shown in @tbl-seracare-gene-constructs.](`r paste0(data_folder, "images/", "braf_egfr_met_overlap_regions.png")`){#fig-seracare-overlap-regions-png}

{{< pagebreak >}}

### SeraCare dilution mixes {#sec-results-lod-seracare-mixes}

Dilution mixes were prepared to simulate a sample with 14 gene copies and neoplastic cell contents of 30%, 20%, 10% and 0%, and were tested on the PanSolid v2 enrichment on worksheet WS144291. All genes except *MYC* were detected at a simulated NCC of 30%, whilst below this level no genes exceeded the fold change threshold of 2.8 (@fig-seracare-dilution-mix-results), although indications of the amplifications could were evident on the whole genome plots (@fig-seracare-dilution-mixes-png). In the 30% NCC sample, *MYC* (fold change: 2.48) was the only gene with a lower fold change than predicted, whilst *MET* had the highest measured fold change (4.46) (@tbl-thirty-percent-fold-change-values).

```{r}
#| label: fig-seracare-dilution-mix-results
#| fig-cap: "SeraCare dilution mix results. The dashed line shows the PanSolid fold change detection threshold of 2.8, and the grey region shows the uncertainty of measurement from a theoretical fold change threshold of 3."
#| echo: FALSE
#| fig-wdith: 6
#| fig-height: 6.2

lod_dilution_mix_results <- amp_validation_all_amp_gene_results_collated |> 
  filter(labno %in% c("24039973", "24039975") & worksheet == "WS144291") |> 
  filter(gene %in% c("ERBB2", "EGFR", "BRAF", "MET", "MYC", "MYCN")) |> 
  mutate(lod_percent = case_when(
    suffix == "a" ~30,
    suffix == "b" ~20,
    suffix == "c" ~10,
    suffix == "d" ~0
  ),
  lod_proportion = lod_percent/ 100,
  lod_percent_char = str_c(lod_percent, "%"),
  max_region_fold_change = round(max_region_fold_change, 2),
  predicted_fold_change = ((14 * lod_proportion) + (2 * (1 - lod_proportion))) / 2 ) 

seracare_dilution_mix_plot <- ggplot(lod_dilution_mix_results, aes(x = lod_percent_char,
                                    y = max_region_fold_change)) +
  annotate('rect', xmin = 0, xmax = 5, ymin = -1, 
           ymax = 1, fill='white') +
   geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_hline(yintercept = fold_change_threshold) +
  annotate('rect', xmin = 0, xmax = 5, ymin = fold_change_uom_lower, 
           ymax = fold_change_uom_upper, 
           alpha = 0.5, fill='grey') +
  geom_point(size = 3, shape = 21, fill = "white") +
  theme_bw() +
  theme(legend.position = "none") +
  facet_wrap(~gene, ncol = 2) +
  labs(x = "Simulated NCC", y = "PanSolid fold change",
       title = "PanSolid NGS SeraCare dilution mix results")
  
seracare_dilution_mix_plot

```

```{r}
#| label: tbl-thirty-percent-fold-change-values
#| tbl-cap: "Predicted and measured gene fold changes 30% limit of detection experiment"
#| echo: FALSE

lod_30_fold_change_values <- lod_dilution_mix_results |> 
  filter(lod_percent == 30) |> 
  select(lod_percent, gene, max_region_fold_change, predicted_fold_change) |> 
  rename("Tumour percent" = lod_percent,
         "Gene" = gene,
         "Measured fold change" = max_region_fold_change,
         "Predicted fold change" = predicted_fold_change)

kable(lod_30_fold_change_values)

```


![Results for limit of detection dilution mixes: SeraCare +12 copies (24039973) spiked into SeraCare WT (24039975) at decreasing percentages on worksheet WS144291.](`r paste0(data_folder, "images/", "lod_dilution_mixes.png")`){#fig-seracare-dilution-mixes-png}

{{< pagebreak >}}

## Quality control {#sec-results-quality-control}

```{r}
#| label: poor-quality-samples
#| echo: FALSE

poor_quality_samples <- amp_validation_stdev_results_collated |> 
  filter(st_dev_signal_adjusted_log2_ratios >= 0.7)

```

Overall, the amount of signal-adjusted noise within the cohort ranged from `r round(min(amp_validation_stdev_results_collated$st_dev_signal_adjusted_log2_ratios), 1)` - `r round(max(amp_validation_stdev_results_collated$st_dev_signal_adjusted_log2_ratios), 1)` with a median of `r round(median(amp_validation_stdev_results_collated$st_dev_signal_adjusted_log2_ratios), 1)`. There were `r nrow(poor_quality_samples)` samples which had signal-adjusted noise values above 0.7 and were hence considered poor quality.

```{r}
#| label: fig-noise-results
#| fig-cap: "Signal-adjusted noise distribution for all samples tested"
#| echo: FALSE

overall_noise_plot <- ggplot(amp_validation_stdev_results_collated, aes(x = st_dev_signal_adjusted_log2_ratios,
                                              y = )) +
  geom_histogram(binwidth = 0.05) + 
  scale_x_continuous(breaks = seq(0, 3, by = 0.2)) +
  theme_bw() +
  labs(x = "Signal-adjusted noise", 
       y = "Number of sample replicates")

overall_noise_plot

```

```{r}
#| label: noisy-amplification-calls
#| include: FALSE

poor_quality_results <- amp_validation_pos_cnv_results_collated |> 
  left_join(amp_validation_stdev_results_collated |> 
              mutate(st_dev_signal_adjusted_log2_ratios = round(st_dev_signal_adjusted_log2_ratios, 1)) |> 
              select(filepath, st_dev_signal_adjusted_log2_ratios), by = "filepath",
            relationship = "many-to-one") |> 
  filter(st_dev_signal_adjusted_log2_ratios > 0.7 &
           gene != "no positive calls") |> 
  left_join(validation_sample_patient_info,
            by = "labno", relationship = "many-to-one") |> 
  select(labno, gene, st_dev_signal_adjusted_log2_ratios, fold_change, method_name) |> 
  rename(`Lab number` = labno,
         `Gene` = gene,
         `Signal-adjusted noise` = st_dev_signal_adjusted_log2_ratios,
         `Fold change` = fold_change,
         `Extraction method` = method_name)

number_of_poor_quality_cobas_samples <- nrow(poor_quality_results[poor_quality_results$`Extraction method` == "COBAS",])

```

Within the poor-quality samples, there were 
`r nrow(poor_quality_results)`
gene amplification calls (@tbl-noisy-amplification-calls). The calls in the *ERBB2* and *MDM2* genes had very high fold changes, and result was confirmed on ddPCR and WGS, respectively. In contrast, the remaining calls had low fold change values; inspection of the whole genome plots showed that gene targets were not significantly elevated above their surrounding targets (@fig-sample-23032153-whole-genome). This indicated that these were false positive calls, caused by the high noise in the samples. Notably, `r number_of_poor_quality_cobas_samples` samples were extracted by the Cobas extraction method, which is no longer used due to the QIAsymphony method providing higher quality DNA ([DOC6255]{custom-style="Strong"}).

```{r}
#| label: tbl-noisy-amplification-calls
#| tbl-cap: "Amplification calls in low quality samples."
#| echo: FALSE

kable(poor_quality_results)

```

![Whole genome view of sample 23032153, including a true positive call for *MDM2* which was confirmed on WGS, and 3 false positive calls for *MET*, *SMO* and *BRAF* which are all due to increased noise and a slightly elevated copy number of chromosome 7.](`r paste0(data_folder, "images/", "sample_23032153_whole_genome.png")`){#fig-sample-23032153-whole-genome}

{{< pagebreak >}}

# Discussion {#sec-discussion}

## Comparison to WGS {#sec-discussion-wgs}

In the NHS Genomic Medicine Service, WGS is performed by Illumina Laboratory Solutions and analysed using a bioinformatics pipeline developed by Genomics England. The Genomics England cancer pipeline performs analysis for somatic CNVs and structural variants [@genomicsengland2023], using the Canvas [@roller2016] and Manta [@chen2016] algorithms, respectively. The Genomics England cancer pipeline has been validated to have a sensitivity of 79.3% for CNV detection and 88.8% for structural variant detection, when compared to results from FISH [@genomicsengland2019]. There were several discrepancies between the PanSolid NGS results and WGS for 2 glioblastoma samples which showed evidence of tetraploidy. Tetraploidy caused by whole genome duplication is frequently reported in glioblastoma, with @boisselier2018 reporting that 11% of glioblastoma cases have whole genome duplication. In the Genomics England WGS pipeline, tumour ploidy is calculated by the Canvas tool using a machine learning approach comparing the results for tumour and germline DNA samples [@roller2016]. The version of the PanSolid NGS workflow described in this validation document does not include the detection of ploidy status, and the gene copy number calculator includes the assumption that the tumour is diploid. Consequently, the dosage of chromosome 7, which includes *BRAF*, *EGFR*, *MET* and *SMO*, was underestimated by the PanSolid pipeline in the 2 tetraploid samples. 

A further discrepant result was identified for the *EGFR* gene in one of the tetraploid samples, which WGS showed to be amplified against a background of both chromosome 7 polysomy and tetraploidy: 14 copies in total were detected, 8 more than the chromosome number, and 10 more than the overall ploidy level. Additional ddPCR testing showed that this inconsistent result likely reflects intra-tumour heterogeneity between the fresh frozen sample being tested by WGS and the FFPE material used for PanSolid NGS. This is a limitation of using WGS as an orthogonal test, as only DNA from fresh frozen tissue is accepted for WGS for somatic cancer testing.

## Comparison to ddPCR {#sec-discussion-ddpcr}

By comparison, ddPCR did not have this limitation as it was performed on the same DNA as PanSolid NGS. Out of 
`r sum(pansolid_vs_ddpcr_summary$Samples)`
samples tested across
`r nrow(pansolid_vs_ddpcr_summary)`
genes there were only 
`r sum(pansolid_vs_ddpcr_summary$"False positives") + sum(pansolid_vs_ddpcr_summary$"False negatives")`
discordant results, 4 of which were borderline by both methods; the remaining result was due to a copy number change at the locus of the ddPCR reference gene, *AP3B1*. Overall, PanSolid NGS and ddPCR agreed on 
`r ddpcr_pansolid_correct_proportion`%
of amplification statuses, which is equivalent to reports in the literature. For example, @yang2020 reported a concordance of 94% between ddPCR and targeted NGS for detection of *ERBB2* amplifications in FFPE samples.

## Reference material quantification {#sec-discussion-quantification}

The ability of the PanSolid pipeline to quantify gene dosage was assessed using reference materials from the company SeraCare, which were provided along with the gene dosages quantified by SeraCare using the TruSight Oncology 500 assay (Illumina) and ddPCR with a BioRad QX200 system. There was close agreement between the quantification of gene dosage for both PanSolid NGS and ddPCR compared to the results provided by SeraCare, although a consistent overestimation of dosage for *EGFR* and *ERBB2* was observed (@fig-seracare-ngs-pansolid and @fig-seracare-ddpcr-pansolid). 

## Copy number and uncertainty of measurement {#sec-discussion-copy-number}

It is important to note that there is no consistent definition of gene copy number in somatic amplifications, and the definition of gene dosage also reflects the method used. For FISH, which has single-cell resolution, gene copy number may be defined as the overall number of copies per cell [@qin2023]; or it may be defined relative to the chromosome the gene is located on [@french2019; @boldrin2022], to a different chromosome [@bontoux2023], or to the overall ploidy of the sample [@ross2018]. For molecular methods including NGS and ddPCR, dosage can be expressed as relative gene copy number [@robinson2021], fold change [@ross2018] or log2 ratios [@yang2020], which makes comparisons between methods difficult. There is also a lack of consensus over how many copies of a gene are required to be classified as an "amplification" [@wang2019]. For example, in publications describing detection of *ERBB2* copy number by NGS, thresholds from 3 to 6 copies have been described [@nakamura2021; @cenaj2019].

In the PanSolid workflow described, gene dosage is quantified by fold change and amplifications are defined by a clear fold change threshold of 2.8. Whilst the threshold was originally set at 3 at the beginning of the validation process, it was reduced to 2.8 during the *ERBB2* amplifications validation due to the results of a limit of detection experiment. The rationale was that lowering the threshold slightly below the theoretical threshold value would account for technical variation.

In this validation, the uncertainty of measurement was shown to be ± `r (2*inter_pooled_sd)`, demonstrating that the fold change threshold of 2.8 does account for technical variation. This means that any combination of NCC and gene copy values with a predicted fold change of 3, such as 50% NCC with 10 gene copies, should be detected with the fold change threshold of 2.8 (see @sec-discussion-lod).

There are caveats to this prediction. As the sample is sequenced in bulk, the true number of gene copies present within individual cells cannot be quantified, and instead are estimated based on the fold change value and the NCC value provided for the sample. However this calculation assumes that the NCC value is entirely accurate to the area of sample from which DNA was extracted, and that each cancer cell is diploid and has the same number of gene copies. The PanSolid workflow is therefore semi-quantitative: it is able to provide clear indication of increased gene dosage, but the exact quantification of gene copies is limited by multiple factors, including ploidy.

## Limit of detection {#sec-discussion-lod}

```{r}
#| label: fold-change-predicted-lod
#| include: FALSE

lod_fold_change_df <- data.frame(ncc = seq(0, 100, by = 0.1)) |> 
  mutate(target_copies_3 = calculate_target_copies(fold_change = 3,
                                                 tcc_percent = ncc),
         target_copies_2_8 = calculate_target_copies(fold_change = 2.8,
                                                 tcc_percent = ncc))

theoretical_lod_df <- lod_fold_change_df |> 
  filter(ncc %in% seq(10, 100, by = 10)) |> 
  arrange(desc(ncc)) |> 
  mutate(theoretical_additional_copies_3 = target_copies_3 - 2,
         theoretical_additional_copies_2_8 = target_copies_2_8 - 2,
         theoretical_lod_target_copies_3 = str_c(round(target_copies_3, 0), " (+", 
                                                 round(theoretical_additional_copies_3, 0), ")"),
         theoretical_lod_target_copies_2_8 = str_c(round(target_copies_2_8, 0), " (+", 
                                                 round(theoretical_additional_copies_2_8, 0), ")"))

measured_lod_df <- data.frame(
  ncc = c(100, 30),
  measured_lod_target_copies = 
    c("5 (+3) for EGFR, ERBB2, MET and MYCN; 8 (+6) for MYC and BRAF",
      "14 (+12) for BRAF, EGFR, ERBB2, MET and MYCN, but not MYC")
)

lod_df_joined <- theoretical_lod_df |> 
  select(ncc, theoretical_lod_target_copies_3, theoretical_lod_target_copies_2_8) |> 
  left_join(measured_lod_df, by = "ncc") |> 
  rename(
    "Neoplastic cell content (%)" = ncc,
    "Predicted limit of detection in gene copies per cell with a fold change threshold of 3" = theoretical_lod_target_copies_3,
    "Predicted limit of detection in gene copies per cell with a fold change threshold of 2.8" = 
      theoretical_lod_target_copies_2_8,
    "Measured limit of detection in gene copies per cell with threshold of 3 (±0.174)" = measured_lod_target_copies
  )

```

The limit of detection is an important test metric, but is influenced by several factors. To comprehensively assess the limit of detection through experimentation would require the testing of samples simulating every possible copy number state of every gene at every possible NCC level. This is clearly impractical. Instead, we tested undiluted SeraCare reference materials with known quantities of target genes added, which simulated clinical samples at 100% NCC, and we also tested diluted mixtures of these controls to simulate clinical samples at 30%, 20%, 10% and 0% NCC.

The results from these experiments can be viewed alongside the theoretical predictions of limit of detection for different NCC states (@tbl-lod-theoretical-actual). These results show that the theoretical predicted limit of detection is broadly similar to the limit of detection from experimentation, but there are some key differences. 3 additional copies were detected for *EGFR*, *ERBB2*, *MET* and *MYCN* in the undiluted SeraCare +3 copies control, despite this being below the theoretical limit of detection for fold changes of 3 and 2.8. And at a simulated 30% NCC, *MYC* was not detected at +12 copies despite this being predicted when using a fold change threshold of 2.8. These findings are not unusual; for example, @chandramohan2022 also report slight discrepancies between theoretical and experimental limits of detection for somatic copy number analysis with NGS, and @dehghani2019 report gene-specific variation in their limit of detection series.

```{r}
#| label: tbl-lod-theoretical-actual
#| tbl-cap: "Theoretical and measured limits of detection"
#| echo: FALSE

kable(lod_df_joined)

```

@tbl-lod-theoretical-actual: All values are rounded to 0 decimal places. Gene copies per cell are given as total copies, with additional copies in brackets, assuming a diploid genome.

This shows that there is variation in detection and dosage accuracy between genes. Despite this limitation, communicating a clear limit of detection is important for those using and delivering a clinical service, particularly for NCC levels which are commonly used on local pathology reports and referral forms, such as 20% and 50%. With this in mind, we can conclude the following:

The theoretical limit of detection for gene amplification by PanSolid NGS is 8 additional gene copies at 50% NCC, and 20 additional gene copies at 20% NCC. This is supported by data from limit of detection experiments, however there can be variation between genes and the true limit of detection is impacted by the exact NCC of the sample, the number of amplified gene copies in the tumour, the coverage across the locus of interest, the quantity of DNA available, the size and sequence content of the gene, intra-genic CNVs, the ploidy of the sample, the uncertainty of measurement, and the presence of intra-tumoral heterogeneity in gene copy number.

The limit of detection work in this validation supersedes the limit of detection threshold decided in the *ERBB2* validation ([DOC6260]{custom-style="Strong"}).

## Extrapolation to other genes {#sec-extrapolation-to-other-genes}

### "Coarse" setting {#sec-discussion-coarse-setting}

The CLC "coarse" setting was able to detect amplifications in 5 different genes, all containing over 10 target regions. Whilst no confirmed amplifications were detected in either the *ALK* or *SMO* genes, amplifications were detected in smaller genes with fewer targets. For example, amplifications were detected in the *MDM2* gene, which is smaller, has fewer primers and has fewer targets than both the *ALK* and *SMO* genes (@tbl-amplification-coordinates). This indicates that amplifications in *ALK* and *SMO* would be detected by the "coarse" setting.

Given the assumption that amplification dynamics are not radically different between target genes and genomic regions, the sensitivity and specificity for gene amplification detection on the CLC "coarse" setting in this validation dataset could be extrapolated to additional genes of similar sizes in future. This is a standard approach that is used to validate somatic CNV detection for large gene panels [@chandramohan2022], whole exome sequencing [@saldivar2023] and whole genome sequencing [@roepman2021; @genomicsengland2019].

### "Fine" setting {#sec-discussion-fine-setting}

*MYC* and *MYCN* are paralogous in their protein motifs and structures, but not nucleotide sequences [@jha2023] and are located on different chromosomes. Both genes are frequently mutated in cancer, with gene amplification being a major oncogenic mechanism [@meyer2008]. Both *MYC* and *MYCN* are shorter than 7 kilobases in length, and, due to their small size, amplifications were not initially detected in these genes on the "coarse" setting. The "fine" setting was then used, and was able to detect amplifications in both genes in the SeraCare reference materials, and *MYC* amplifications which were confirmed by ddPCR. Due to the small size of each gene, we do not advise extrapolating the sensitivity and specificity of the "fine" setting to other genes of similar sizes without testing controls with confirmed amplifications.

## *EGFR* version 3 and intra-genic CNVs {#sec-discussion-egfr-v3}

In a single sample, an exonic *EGFR* deletion was detected by PanSolid NGS, consistent with the result from WGS. This is a recurrent in-frame deletion of 801 *EGFR* coding base pairs, representing exons 2 to 7, which is referred to as *EGFR* version 3, Δ801EGFR, *EGFR* vIII or de2-7 *EGFR* [@sugawa1990; @pedersen2001]. *EGFR* version 3 is found in roughly 11% of glioblastoma cases [@brennan2013], but its prognostic significance is controversial [@rutkowska2019].

In this validation, the exonic deletion was visible when the individual QIAseq targets were inspected in the interactive HTML view. The CLC "coarse" setting identified two regions within *EGFR* with different fold changes, but did not identify the deleted region. This indicates that intra-genic CNVs within target genes can cause the CLC pipeline to return multiple intra-genic fold-changes, although these may not match the coordinates of the underlying CNV. However, this pattern was also observed in the repeatability study (@sec-results-repeat-testing) for a single replicate of sample 24020998, indicating that the detection of multiple CNV regions per gene is influenced by quality metrics such as signal-adjusted noise which vary between replicates.

## Quality control {#sec-discussion-quality-control}

False positive calls were observed for 2 samples extracted on the Cobas method with high signal-adjusted noise values. This demonstrates that visual inspection of the whole genome plots is required, and that amplification calls in samples with high signal-adjusted noise values should be treated with caution.

## Limitations {#sec-discussion-limitations}

This validation has the following limitations:

- FISH is considered the gold standard test for many amplifications, but FISH data were not available for comparison with PanSolid NGS results.

- Positive control samples were not available for the *ALK* and *SMO* genes.

- All SeraCare reference materials were not tested by each ddPCR assay due to limited DNA volumes.

- *In silico* limit of detection studies using down-sampling were not performed.

- ddPCR was not performed for *MYCN* or *MDM2* as these genes were added later in the validation.

- Limit of detection studies were performed using SeraCare controls, which include artificial gene construct spike-ins and may not perfectly mimic the behaviour of clinical FFPE samples.

The test has the following limitations:

- Multiple CNV regions may be identified within the same gene. These may reflect underlying biological variation, such as *EGFR* version 3 (@sec-results-egfr-v3), or may not be replicable indicating that they are caused by technical variation such as coverage (@sec-cnv-region-variation).

- Short-read NGS is not able to distinguish the different cellular contexts of gene amplifications, which may be present on chromosomes or extra-chromosomal DNA.

- Fold change values below 10 have an uncertainty of measurement of ± `r (2*inter_pooled_sd)` at 95% confidence.

- The test does not detect tetraploidy when present (@sec-wgs-discordant-results), which can impact copy number calculations performed using NCC, as these calculations assume a diploid copy number.

- The CNV regions identified by the test may be narrower than the true region of underlying variation: this is a known limitation of performing CNV detection using an NGS enrichment method (@sec-wgs-coordinate-correlation). 

# Review of test requirements {#sec-discussion-test-requirements-review}

The test requirements specified in @sec-requirements have been met:

**1. Clinical utility: the test should provide clear results for the 9 listed amplification markers.**

The PanSolid Excel output provides a clear result of the amplification status for all 9 genes.

**2. Clinical validity: the test should have a defined sensitivity and specificity for these markers, calculated by comparison with an orthogonal test.**

The amplification detection has a sensitivity and specificity of 
`r ddpcr_pansolid_sensitivity`% 
and 
`r ddpcr_pansolid_specificity`% 
when compared to ddPCR (@sec-results-ddpcr-comparison). When compared to WGS on diploid samples,
the sensitivity is `r adjusted_wgs_pansolid_sensitivity`% and the specificity is `r adjusted_wgs_pansolid_specificity`% (@sec-wgs-comparison-without-tetraploidy).

**3. Dosage accuracy: it should be shown how accurate the test is at detecting amplifications of different copy number states, expressed as a correlation between the test and copy numbers from an orthogonal test.**

There is a strong correlation between the dosages determined by PanSolid NGS and ddPCR for the genes investigated, with R values ranging from 0.78 to 1.0 (@sec-ddpcr-dosage-correlation).

**4. Quality control: the test should have clear quality control thresholds for deciding when the test results should be reported and when the test has failed.**

Low-level false positive calls were seen when the signal-adjusted noise value exceeded 0.7, although confirmed amplifications were also detected above this threshold (@sec-results-quality-control).

**5. Variability: the test should have defined intra-run variation (repeatability) and inter-run variation (repeatability) for these amplifications.**

Intra-run pooled standard deviation for fold changes below 10 was `r intra_pooled_sd` and inter-run pooled standard deviation for fold changes below 10 was  `r inter_pooled_sd`.  The uncertainty of measurement is defined as ± `r (2*inter_pooled_sd)` at 95% confidence (@sec-results-repeat-testing). 

**6. Visualisation: the results should be presented in a clear and visual manner.**

The results are displayed in graphical format in the output Excels with gene, CNV and whole genome views. There is also an interactive HTML whole-genome view which can assist genotyping complex cases.

**7. Analysis: there should be a clear procedure for analysis of copy number variants by laboratory staff.**

[DOC6261 (Somatic Copy Number Variant Analysis on the PanSolid Cancer Panel)]{custom-style="Strong"} will be updated with new screenshots and instructions for how to analyse the PanSolid CLC output for these additional genes.

# Requirements for clinical implementation {#sec-requirements-for-clinical-implementation}

The detection of gene amplifications has been validated on DNA extracted by the QIAsymphony method from FFPE material for *ALK*, *BRAF*, *EGFR*, *ERBB2*, *MET*, *MDM2* *MYC*, *MYCN* and *SMO*. The validation has identified the following requirements for clinical implementation:

- Samples with signal-adjusted noise values above 0.7 should be analysed carefully. Confirmed amplifications have been detected in samples with high levels of noise, but low-level gene gains may in fact be false positives.

- Visual inspection of the whole genome plots is required to avoid false positive calls (@sec-results-quality-control).

- Visual inspection of the interactive HTML plots should be performed when there are multiple CNV regions called within the same gene, as this may indicate intra-genic CNVs.

- The information provided on reports for this test should be updated to include the limit of detection, and the limitation that the method cannot distinguish between all ploidy states.

- In future, amplification detection may be required for additional genes on the PanSolid v2 enrichment (CDHS-48608Z-11752). If these genes have greater than 11 targets, they can be added to the analysis pipeline with the "coarse" graining level without the requirement for additional validation work. The pipeline sensitivity and specificity for these new genes can be assumed to be the same as the sensitivity and specificity values provided in this validation document (@sec-discussion-coarse-setting).  

- Longitudinal monitoring of test metrics, including the the signal-adjusted noise quality metric and the gene amplifications detected, should be initiated and regularly reviewed to allow auditing of test performance over time.

- The laboratory should participate in relevant external quality assessment schemes for the target genes, if available.

- This validation has primarily used DNA from FFPE material. The conclusions of this validation may not be valid for other sample types.

# Conclusion {#ref-conclusion}

The PanSolid NGS workflow and CLC pipeline has been validated for the detection of gene amplifications in *ALK*, *BRAF*, *EGFR*, *ERBB2*, *MET*, *MDM2* *MYC*, *MYCN* and *SMO* at the North West GLH.

```{r}
#| label: export-pansolid-data-for-qpulse
#| include: FALSE

# Export data for addition to the QPulse record

sample_ids_for_qpulse <- validation_sample_patient_info |> 
  select(labno, pathno, neoplastic_cell_content, cancer_tissue_source,
         method_name) |> 
  rename(dna_extraction_method = method_name)

# Table 1 - amp results with sample and quality information
all_amp_gene_results_for_qpulse <- amp_validation_all_amp_gene_results_collated |> 
  left_join(sample_ids_for_qpulse, by = "labno", 
            relationship = "many-to-one") |> 
  left_join(amp_validation_percent_138_collated |> 
              select(filepath, percent_whole_panel_covered_at_138x),
            by = "filepath", relationship = "many-to-one") |> 
  left_join(amp_validation_stdev_results_collated |> 
              select(filepath, st_dev_signal_adjusted_log2_ratios), 
            by = "filepath",
            relationship = "many-to-one") |> 
  select(-patient_name) |> 
  relocate(filepath, .after = last_col())

colnames(all_amp_gene_results_for_qpulse)

if(any(all_amp_gene_results_for_qpulse$neoplastic_cell_content == "Error") |
   any(all_amp_gene_results_for_qpulse$dna_extraction_method == "Error") |
   any(all_amp_gene_results_for_qpulse$cancer_tissue_source == "Error")){
  stop("Error values in the QPulse table")
}

# Table 2 - positive CNV results with sample and quality information
pos_cnv_results_for_qpulse <- amp_validation_pos_cnv_results_collated |> 
  left_join(sample_ids_for_qpulse, by = "labno", 
            relationship = "many-to-one") |> 
  left_join(amp_validation_percent_138_collated |> 
              select(filepath, percent_whole_panel_covered_at_138x),
            by = "filepath", relationship = "many-to-one") |> 
  left_join(amp_validation_stdev_results_collated |> 
              select(filepath, st_dev_signal_adjusted_log2_ratios), 
            by = "filepath",
            relationship = "many-to-one") |> 
  select(-patient_name) |> 
  relocate(filepath, .after = last_col())

if(any(pos_cnv_results_for_qpulse$neoplastic_cell_content == "Error") |
   any(pos_cnv_results_for_qpulse$dna_extraction_method == "Error") |
   any(pos_cnv_results_for_qpulse$cancer_tissue_source == "Error")){
  stop("Error values in the QPulse table")
}

write.csv(x = all_amp_gene_results_for_qpulse, file = paste0(outputs_folder,
                                                             "all_amp_gene_results_for_qpulse.csv"),
          row.names = FALSE)

write.csv(x = pos_cnv_results_for_qpulse, file = paste0(outputs_folder,
                                                        "pos_cnv_results_for_qpulse.csv"),
          row.names = FALSE)

```

```{r}
#| label: export-wgs-data-for-qpulse
#| include: FALSE

wgs_ids_for_qpulse <- wgs_html_ids |> 
  select(filepath, labno, wgs_pathno, wgs_r_no, wgs_p_no, 
         calculated_overall_ploidy, calculated_tumour_content)

wgs_domain_1_cnvs_for_qpulse <- wgs_html_cnvs |> 
  left_join(wgs_ids_for_qpulse, by = "filepath",
            relationship = "many-to-one") |> 
  select(-category) |> 
  relocate(labno, wgs_pathno, wgs_r_no, wgs_p_no) |> 
  relocate(filepath, .after = last_col()) |> 
  # Including all domains creates a 40MB csv file, which is too large for QPulse
  filter(domain == 1)

write.csv(x = wgs_domain_1_cnvs_for_qpulse, file = paste0(outputs_folder,
                                                          "wgs_domain_1_cnvs_for_qpulse.csv"),
          row.names = FALSE)

```

```{r}
#| label: export-ddpcr-data-for-qpulse
#| include: FALSE

write.csv(x = amp_validation_ddpcr |> 
            relocate(worksheet, gene), file = paste0(outputs_folder,
                                                     "ddpcr_results_for_qpulse.csv"),
          row.names = FALSE)

```

{{< pagebreak >}}

# References

::: {#refs}
:::

{{< pagebreak >}}

# Supplementary Information

## Sample details

```{r}
#| label: tbl-tissue-types
#| tbl-cap: "Tissue types for samples tested on the PanSolid v2 enrichment"
#| echo: FALSE

tissue_type_summary <- validation_sample_patient_info |> 
    filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
    mutate("Tissue type" = case_when(
      tissue_type == "Shavings" ~"FFPE shavings",
      tissue_type %in% c("Slides", "Positively-charged slides") ~"FFPE slides",
      TRUE ~tissue_type
    )) |> 
    count(`Tissue type`) |> 
    rename("Samples" = n) |> 
    arrange(desc(Samples)) |> 
    adorn_totals()

kable(tissue_type_summary)

```

```{r}
#| label: tbl-cancer-types
#| tbl-cap: "Cancer types for samples tested on the PanSolid v2 enrichment"
#| echo: FALSE

cancer_type_summary <- validation_sample_patient_info |> 
  filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
  count(cancer_tissue_source) |> 
  rename("Samples" = n,
         "Cancer" = cancer_tissue_source) |> 
  arrange(desc(Samples)) |> 
  adorn_totals()

kable(cancer_type_summary)

```

```{r}
#| label: tbl-extraction-types
#| tbl-cap: "DNA extraction methods for samples tested on the PanSolid v2 enrichment"
#| echo: FALSE

extraction_type_summary <- validation_sample_patient_info |> 
  filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
  count(method_name) |> 
  rename("DNA extraction method" = method_name,
         "Samples" = n) |> 
  arrange(desc(Samples)) |> 
  adorn_totals()

kable(extraction_type_summary)

```

@tbl-extraction-types: No DNA extraction was performed for the 5 SeraCare controls.

```{r}
#| label: tbl-ncc
#| tbl-cap: "Neoplastic cell contents for samples tested on the PanSolid v2 enrichment"
#| echo: FALSE

ncc_summary <- validation_sample_patient_info |> 
    filter(labno %in% amp_validation_stdev_results_collated$labno) |> 
    filter(neoplastic_cell_content != "Reference material") |> 
    mutate(ncc_class = case_when(
      neoplastic_cell_content %in% c(">10", "10-20%") ~">10%",
      neoplastic_cell_content %in% c("20-50", "20-30%", ">20%", ">20", "20") ~">20%",
      neoplastic_cell_content %in% c(">30%", ">30") ~">30%",
      neoplastic_cell_content %in% c("50-75") ~">50%",
      neoplastic_cell_content %in% c( ">75", "80") ~">75%",
      TRUE ~neoplastic_cell_content
    ),
    ncc_class = factor(ncc_class, levels = c(">75%",
                                             ">50%",
                                             ">30%",
                                             ">20%",
                                             ">10%",
                                             "No NCC provided"))) |> 
    count(ncc_class) |> 
    rename("Neoplastic cell content" = ncc_class,
           "Samples" = n) |> 
    adorn_totals()

kable(ncc_summary)

```

@tbl-ncc: this table does not include the SeraCare reference materials.

## Control details

```{r}
#| label: tbl-seracare-reference-material-details
#| tbl-cap: "SeraCare reference material details"
#| echo: FALSE
#| warning: FALSE

kable(seracare_details |> 
        filter(dna_number != "24002060"))

```

(@tbl-seracare-reference-material-details): details of the SeraCare controls. Note that there were two tubes of both the Seraseq® TNA (DNA) WT Mix and the Seraseq® Solid Tumor CNV Mix, +12 copies mix.

## ddPCR details

```{r}
#| label: tbl-ddpcr-primers
#| tbl-cap: "ddPCR primer sequences"
#| echo: FALSE
#| warning: FALSE

ddpcr_primers_probes <- read_csv(file = paste0(data_folder,
                                               "method_tables/",
                                               "ddpcr_primers.csv"))

ap3b1_primers <- c("Tailed_AP3B1_F", "AP3B1_R", "Universal F primer")

ddpcr_primer_tbl <- ddpcr_primers_probes |> 
  filter(category == "primer" & !name %in% ap3b1_primers) |> 
  select(-c(category, `5_label`, `3_label`)) |> 
  rename(`Primer name` = name,
         `Sequence` = sequence)

kable(ddpcr_primer_tbl)

```

```{r}
#| label: tbl-ap3b1-ddpcr-primers
#| tbl-cap: "AP3B1 universal reference primer sequences"
#| echo: FALSE
#| warning: FALSE

ap3b1_primers <- ddpcr_primers_probes |> 
  filter(category == "primer" & name %in% ap3b1_primers) |> 
  select(-c(category, `5_label`, `3_label`)) |> 
  rename(`Primer name` = name,
         `Sequence` = sequence)

kable(ap3b1_primers)

```

```{r}
#| label: tbl-ddpcr-probes
#| tbl-cap: "ddPCR probe sequences"
#| echo: FALSE
#| warning: FALSE

ddpcr_probe_tbl <- ddpcr_primers_probes |> 
  filter(category == "probe") |> 
  select(-category) |> 
  rename(`Primer name` = name,
         `Sequence` = sequence,
         `5 prime label` = `5_label`,
         `3 primer label` = `3_label`)

kable(ddpcr_probe_tbl)

```

```{r}
#| label: tbl-ddpcr-mix
#| tbl-cap: "ddPCR mix"
#| echo: FALSE
#| warning: FALSE

ddpcr_mix <- read_csv(file = paste0(data_folder, 
                                    "method_tables/",
                                    "ddpcr_mix.csv"))

kable(ddpcr_mix)

```

```{r}
#| label: tbl-ddpcr-universal-primer-mix
#| tbl-cap: "ddPCR universal primer mix"
#| echo: FALSE
#| warning: FALSE

ddpcr_universal_primer_mix <- read_csv(file = paste0(data_folder,
                                                     "method_tables/",
                                                     "ddpcr_universal_primer_mix.csv"))

kable(ddpcr_universal_primer_mix)

```

```{r}
#| label: tbl-ddpcr-thermocycler-programme
#| tbl-cap: "ddPCR thermocycler programme"
#| echo: FALSE
#| warning: FALSE

ddpcr_thermocycler_programme <- read_csv(file = paste0(data_folder,
                                                       "method_tables/",
                                                       "ddpcr_thermocycler_programme.csv"))

kable(ddpcr_thermocycler_programme)

```

![*MYC* exon 3 ddPCR results viewed on Quantasoft. Data source: wells G08, A07, E09, C10 and H01 from WS143747.](`r paste0(data_folder, "images/", "myc_exon3_ddpcr.png")`){#fig-myc-ddpcr-quantasoft}

![*EGFR* exon 6 ddPCR results viewed on Quantasoft. Data source: wells C01, E01, F01, G01 and H01 from worksheet WS144202.](`r paste0(data_folder, "images/", "egfr_exon6_dppcr.png")`){#fig-egfr-ddpcr-quantasoft}

![*MET* exon 2 ddPCR results viewed on Quantasoft. Data source: wells B02, D02, F02, G02 and H02 from worksheet WS144202](`r paste0(data_folder, "images/", "met_exon2_ddpcr.png")`){#fig-met-ddpcr-quantasoft}

![*BRAF* exon 10 ddPCR results viewed on Quantasoft. Data source: wells A03, C03, F03, G03 and H03 from worksheet WS144202.](`r paste0(data_folder, "images/", "braf_exon10_ddpcr.png")`){#fig-braf-ddpcr-quantasoft}

{{< pagebreak >}}

## Supplementary Plots

```{r}
#| label: egfr-coordinate-plots
#| include: FALSE

egfr_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "EGFR",
  interval = 500000,
  title = expression(paste("Amplifications involving the ",
                           italic("EGFR"),
                           " gene"))))

egfr_labno_plot <- make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "EGFR",
  interval = 10000,
  buffer = 10000,
  title = expression(paste("Zoomed in view: ",
                           italic("EGFR"))))

egfr_plot_zoom <- egfr_labno_plot[[4]] +
  coord_cartesian(xlim = c(55019017 - 10000, 55211628 + 10000))

egfr_exon_plot <- make_exon_plot(plot_xmin = 55019017 - 10000, 
                              plot_xmax = 55211628 + 10000,
                              interval = 10000,
                              chromosome = "7")

egfr_primer_plot <- make_primer_plot(plot_xmin = 55019017 - 10000, 
                              plot_xmax = 55211628 + 10000,
                              interval = 10000,
                              chromosome = "7")

egfr_zoom_triptych <- (egfr_plot_zoom / egfr_primer_plot / egfr_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-egfr-wide
#| echo: FALSE
#| fig-cap: "All amplification calls in the *EGFR* gene from PanSolid NGS."
#| fig-height: 6.3
#| fig-width: 6

egfr_plot

```

```{r}
#| label: fig-egfr-zoom
#| echo: FALSE
#| fig-cap: "A zoomed in view of the *EGFR* amplification calls, showing that all calls cover the full length of the gene, except for 24030966 and 24030946, which do not include the 5' untranslated region."
#| fig-height: 6.3
#| fig-width: 6

egfr_zoom_triptych

```

```{r}
#| label: fig-erbb2
#| echo: FALSE
#| fig-cap: "PanSolid NGS amplification calls in the *ERBB2* gene."

erbb2_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "ERBB2",
  interval = 500000,
  title = expression(paste("Amplifications involving the ",
                           italic("ERBB2"),
                           " gene"))))

erbb2_plot

```

```{r}
#| label: met-coordinate-plots
#| include: FALSE

met_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MET",
  interval = 1000000,
  buffer = 50000,
  title = expression(paste("Amplifications involving the ",
                           italic("MET"),
                           " gene"))))

met_labno_plot <- make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MET",
  interval = 10000,
  buffer = 5000,
  title = expression(paste("Zoomed in view: ",
                           italic("MET"))))

met_plot_zoom <- met_labno_plot[[4]] +
  coord_cartesian(xlim = c(116672196 - 10000, 116798377 + 10000))

met_exon_plot <- make_exon_plot(plot_xmin = 116672196 - 10000, 
                              plot_xmax = 116798377 + 10000,
                              interval = 10000,
                              chromosome = "7")

met_primer_plot <- make_primer_plot(plot_xmin = 116672196 - 10000, 
                              plot_xmax = 116798377 + 10000,
                              interval = 10000,
                              chromosome = "7")

met_zoom_triptych <- (met_plot_zoom / met_primer_plot / met_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-met-wide
#| echo: FALSE
#| fig-cap: "PanSolid NGS amplification calls in the *MET* gene."
#| fig-height: 6.3
#| fig-width: 6

met_plot

```

```{r}
#| label: fig-met-zoom
#| echo: FALSE
#| fig-cap: "Zoomed-in view of PanSolid NGS calls in the *MET* gene showing that all calls cover the full width of the gene, except for the calls in sample 24023312 and sample 24002064 which do not include the first exon."
#| fig-height: 6.3
#| fig-width: 6

met_zoom_triptych

```

{{< pagebreak >}}

```{r}
#| label: braf-coordinate-plots
#| include: FALSE

braf_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "BRAF",
  interval = 1000000,
  buffer = 50000,
  title = expression(paste("Amplifications involving the ",
                           italic("BRAF"),
                           " gene"))))

braf_labno_plot <- make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "BRAF",
  interval = 50000,
  title = expression(paste("Zoomed in view: ",
                           italic("BRAF")))
)

braf_plot_zoom <- braf_labno_plot[[4]] +
  coord_cartesian(xlim = c(140730665 - 20000, 140924929 + 20000))

braf_exon_plot <- make_exon_plot(plot_xmin = 140730665 - 20000, 
                              plot_xmax = 140924929 + 20000,
                              interval = 50000,
                              chromosome = "7")

braf_primer_plot <- make_primer_plot(plot_xmin = 140730665 - 20000, 
                              plot_xmax = 140924929 + 20000,
                              interval = 50000,
                              chromosome = "7")

braf_zoom_triptych <- (braf_plot_zoom / braf_primer_plot / braf_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-braf-wide
#| echo: FALSE
#| fig-cap: "PanSolid NGS amplification calls in the *BRAF* gene."
#| fig-width: 6

braf_plot

```

```{r}
#| label: fig-braf-zoom
#| echo: FALSE
#| fig-cap: "Zoomed-in view of PanSolid NGS amplification calls in the *BRAF* gene, showing that all calls cover the full width of the gene, except for sample 23011114 which oes not include the final exon."
#| fig-width: 6

braf_zoom_triptych

```

```{r}
#| label: mdm2-coordinate-plots
#| include: FALSE

mdm2_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MDM2",
  interval = 500000,
  title = expression(paste("Amplifications involving the ",
                           italic("MDM2"),
                           " gene"))))

mdm2_labno_plot <- make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MDM2",
  interval = 10000,
  title = expression(paste("Zoomed in view: ",
                           italic("MDM2")))
)

mdm2_plot_zoom <- mdm2_labno_plot[[4]] +
  coord_cartesian(xlim = c(68808177 - 20000, 68845544 + 20000))

mdm2_exon_plot <- make_exon_plot(plot_xmin = 68808177 - 20000, 
                              plot_xmax = 68845544 + 20000,
                              interval = 10000,
                              chromosome = "12")

mdm2_primer_plot <- make_primer_plot(plot_xmin = 68808177 - 20000, 
                              plot_xmax = 68845544 + 20000,
                              interval = 10000,
                              chromosome = "12")

mdm2_zoom_triptych <- (mdm2_plot_zoom / mdm2_primer_plot / mdm2_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-mdm2-wide
#| fig-cap: "PanSolid NGS amplifications in the *MDM2* gene."
#| echo: FALSE

mdm2_plot

```

```{r}
#| label: fig-mdm2-zoom
#| fig-cap: "Zoomed-in view of PanSolid NGS amplifications in the *MDM2* gene, showing that all calls cover the full width of the gene."
#| echo: FALSE

mdm2_zoom_triptych

```

```{r}
#| label: mycn-coordinate-plots
#| include: FALSE

mycn_plot <- make_cnv_triptych_plot(input_plot = make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MYCN",
  interval = 500000,
  title = expression(paste("Amplifications involving the ",
                           italic("MYCN"),
                           " gene"))))

mycn_labno_plot <- make_labno_cnv_plot(
  df = amp_validation_pos_cnv_results_collated,
  gene = "MYCN",
  interval = 10000,
  title = expression(paste("Zoomed in view: ",
                           italic("MYCN")))
)

mycn_plot_zoom <- mycn_labno_plot[[4]] +
  coord_cartesian(xlim = c(15940550 - 60000, 15947007 + 20000))

mycn_exon_plot <- make_exon_plot(plot_xmin = 15940550 - 60000, 
                              plot_xmax = 15947007 + 20000,
                              interval = 10000,
                              chromosome = "2")

mycn_primer_plot <- make_primer_plot(plot_xmin = 15940550 - 60000, 
                              plot_xmax = 15947007 + 20000,
                              interval = 10000,
                              chromosome = "2")

mycn_zoom_triptych <- (mycn_plot_zoom / mycn_primer_plot / mycn_exon_plot) +
    plot_layout(
      heights = c(6, 1, 2)
    )

```

```{r}
#| label: fig-mycn-wide
#| fig-cap: "PanSolid NGS amplifications in the *MYCN* gene."
#| echo: FALSE

mycn_plot

```

```{r}
#| label: fig-mycn-zoom
#| fig-cap: "Zoomed-in view of PanSolid NGS amplifications in the *MYCN* gene, showing that all calls cover the full width of the gene."
#| echo: FALSE

mycn_zoom_triptych

```

{{< pagebreak >}}

```{r}
#| label: fig-wgs-pansolid-dosage
#| echo: FALSE
#| fig-cap: "Comparison of copy numbers of *EGFR* and *MDM2* amplifications detected in pathology blocks N.23.292 and N.23.0607 by PanSolid NGS and WGS."

wgs_pansolid_dosage_plot

```

```{r}
#| label: fig-24027774-MYC
#| fig-cap: "*MYC* amplifications in repeated sample 24027774, showing no change in amplification coordinates."
#| echo: FALSE

fig_24027774_MYC <- make_cnv_triptych_plot(input_plot  = 
  make_labno_cnv_plot(df = amp_validation_pos_cnv_results_collated |> 
    filter(labno == "24027774"),
    gene = "MYC",
    yaxis = labno_suffix_worksheet,
    interval = 500000,
    buffer = 50000,
    title = expression(paste("Repeated sample 24027774: ",
                             italic("MYC")))))

fig_24027774_MYC

```

```{r}
#| label: fig-24027774-MET
#| fig-cap: "*MET* amplifications in repeated sample 24027774, showing no change in amplification coordinates."
#| echo: FALSE

fig_24027774_MET <- make_cnv_triptych_plot(input_plot  = 
  make_labno_cnv_plot(df = amp_validation_pos_cnv_results_collated |> 
    filter(labno == "24027774"),
    gene = "MET",
    yaxis = labno_suffix_worksheet,
    interval = 500000,
    buffer = 50000,
    title = expression(paste("Repeated sample 24027774: ",
                             italic("MET")))))

fig_24027774_MET

```
