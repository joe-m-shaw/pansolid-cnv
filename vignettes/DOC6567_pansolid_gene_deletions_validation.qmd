---
title: "DOC6567: Validation of Detecting Deletions with the PanSolid CLC pipeline"
format: 
  docx:
    reference-doc: north_west_glh_document_template.docx
    link-citations: true
toc: true
toc-title: "Table of Contents"
bibliography: pansolid_cnv_references.bib
csl: vancouver.csl
fig-align: "left"
---

{{< pagebreak >}}

# Authors

Author: Joe Shaw

Project Lead(s): Joe Shaw, Elizabeth Sollars, Eleanor Baker, Helene Schlecht,
George Burghel

Date: `r Sys.Date()`

Author contact: joseph.shaw2\@mft.nhs.uk; joseph.shaw3\@nhs.net

{{< pagebreak >}}

# Acronyms

**BAF:** B Allele Frequency

**CDKN2A**: Cyclin Dependent Kinase iNhibitor 2A

**CDKN2B**: Cyclin Dependent Kinase iNhibitor 2B

**CGH:** Comparative Genome Hybridisation

**CIN:** Chromosomal Instability

**CLC**: Acronym unknown. CLC Bio was acquired by Qiagen in 2013.

**CNA:** Copy Number Alteration

**CNV**: Copy Number Variant

**COSMIC:** Catalogue of Somatic Mutations in Cancer

**ddPCR**: droplet digital Polymerase Chain Reaction

**DNA**: DeoxyriboNucleic Acid

**FFPE**: Formalin-Fixed Paraffin Embedded

**FISH**: Fluorescent In-Situ Hybridisation

**GLH**: Genomic Laboratory Hub

**HMM**: Hidden Markov Model

**IHC**: Immuno-HistoChemistry

**LOH**: Loss Of Heterozygosity

**MMR**: MisMatch Repair

**NCC**: Neoplastic Cell Content

**NGS**: Next Generation Sequencing

**NHS**: National Health Service

**p14ARF**: protein 14 kilo Daltons Alternate Reading Frame

**p15INK4B**: protein 15 kilo Daltons Inhibitor of CDK4 B

**p16INK4A**: protein 16 kilo Daltons Inhibitor of CDK4 A

**PTEN**: Phosphatase and tensin homolog deleted on chromosome ten

**TSG:** Tumour Suppressor Gene

**WGS**: Whole Genome Sequencing

**WHO**: World Health Organisation

{{< pagebreak >}}

```{r}
#| label: packages-and-functions
#| warning: FALSE
#| include: FALSE

library(tidyverse)
library(knitr)
library(here)
library(janitor)
library(readxl)
library(patchwork)
library(foldchanger)

source(here("functions/gene_table_functions.R"))
source(here("functions/test_metric_functions.R"))
source(here("functions/extract_pansolid_cnv_coordinates.R"))

data_folderpath <- config::get("data_folderpath")

```

```{r}
#| label: source-scripts
#| warning: FALSE
#| include: FALSE

#source(here("scripts/del_val_collate_wgs_htmls.R"))

#source(here("scripts/del_val_collate_ddpcr_csvs.R"))

# source(here("scripts/del_val_collate_pansolid_results.R"))

# source(here("scripts/del_val_get_patient_info.R"))

# source(here("scripts/dev/nf2_loh_samples.R"))

source(here("scripts/del_val_load_processed_data.R"))

```

```{r}
#| label: targets
#| include: FALSE
#| warning: FALSE

target_df <- read_csv(paste0(data_folderpath,
                             "validation/DOC6283_amplifications/bed_files/",
                             "PanSolidv2_GRCh38_noalt_BED.csv")) |> 
  clean_names() |> 
  mutate(target_type = case_when(
    
    grepl(x = name, 
          pattern =  "chr(\\d{1,2}|X):\\d{1,3}.+") == TRUE ~"genomic backbone",
    TRUE ~"gene target"
  ))

target_df_with_coordinates <- extract_pansolid_cnv_coordinates(target_df, 
                                                               region) |> 
  mutate(target_size_bp = abs(end-start))

del_genes <- read_excel(paste0(
  data_folderpath,
  "validation/DOC6567_deletions/gene_lists/",
  "2024_12_20_deletion_gene_list.xlsx"
)) |> 
  janitor::clean_names() |> 
  select(priority, gene)

pansolid_target_loci <- target_df |> 
  mutate(single_locus = str_split(name, pattern = ";")) |> 
  unnest(single_locus) 

gene_target_counts <- pansolid_target_loci |> 
  filter(single_locus %in% del_genes$gene) |> 
  count(single_locus) |>
  mutate("CLC setting" = case_when(
    n < 10 ~"Fine",
    n >= 10 ~"Coarse"
  )) |> 
  rename("Number of PanSolid targets" = n,
         "Gene" = single_locus) 

```

# Purpose

The purpose of this document is to describe the validation of detection of
somatic gene deletions on the PanSolid v2 QIAseq panel using the PanSolid CLC
pipeline at the North West Genomic Laboratory Hub (GLH).

# Introduction

This validation is part of the continuing project to validate copy number
variants (CNVs) on the PanSolid enrichment panel.

```{r}
#| label: tbl-previous-validations
#| tbl-cap: "Previous validations of the PanSolid enrichment and pipeline"
#| echo: FALSE

prev_validation_table <- tribble(
  ~`Description`, ~`Document number`, ~`Date`,
  "Detection of single nucleotide variants and indel variants", "DOC6024 v1", "July 2023",
  "Verification of PanSolid enrichment version 2", "DOC6024 v3", "April 2024",
  "Detection of amplifications in *ERBB2*", "DOC6260", "April 2024",
  "Detection of amplifications in 8 additional genes", "DOC6283", "November 2024"
)

kable(prev_validation_table)

```

## Gene deletions

Somatic copy number changes are a common pathogenic mechanism in cancers [@li2020],
leading to the amplification of expression from proto-oncogenes (addressed in
[DOC6283]{custom-style="Strong"}) and the reduction or ablation of expression
from tumour suppressor genes (TSGs) (addressed in this validation document).
Inactivation of TSGs can occur by multiple methods including sequence variants,
gene deletion, copy-neutral loss of heterozygosity and epigenetic silencing.
The physical loss of a TSG copy from the genome can occur via a focal deletion
of the gene locus, or as part of a much larger chromosomal change, such as
aneuploidy for a whole chromosome or chromosome arm. The loss of expression
from a TSG leads to cancer development via a recessive mechanism, requiring two
events to inactivate both TSG alleles [@knudson1971]. One example is the highly
conserved *TP53* gene [@levine2020], which is most commonly inactivated by a
missense variant on one allele and a loss of the other allele through loss of
chromosome 17p [@bendavid2020].

## Target genes

The aim of this validation is to detect deletions in `r length(del_genes$gene)`
genes on the PanSolid enrichment (Supplementary Information, @tbl-deletion-gene-targets). These genes were
selected due to the presence on the NHS Genomic Test Directory.
There was a
particular focus on *CDKN2A*, *CDKN2B* and *PTEN*, as these deletions are
frequently found in glioblastoma samples, which comprised the main tumour type
in the testing cohort.

### *CDKN2A* and *CDKN2B*

The *CDKN2A* and *CDKN2B* genes are adjacent to each other on chromosome 9,
separated by roughly 20 kilobases (kb). The p14ARF protein product of *CDKN2A*
plays an important role in cell growth regulation, and deletion of *CDKN2A* 
contributes to tumour proliferation [@appay2019]. 

Due to their proximity, *CDKN2A* and *CDKN2B* are frequently deleted together,
and this co-deletion of these loci may be abbreviated to *CDKN2A/B*. However
there are less common cases where only one gene is deleted. For example, 
@gonzÃ¡lezgil2021 reported that in 20% of acute lymphoblastic leukaemia only 
one of *CDKN2A* or *CDKN2B* was lost. Homozygous *CDKN2A/B* deletion is
included in the fifth edition of the World Health Organisation Classification
of Tumours of the Central Nervous System [@louis2021]. Homozygous deletion of
*CDKN2A* is also associated with poor prognosis in meningiomas [@sievers2020]
and astrocytomas [@yuile2023]. 

The size of deletions at the *CDKN2A/B* locus vary. @vieler2023 used optical
genome mapping to characterise *CDKN2A/B* deletions in acute lymphoblastic
leukaemia, showing deletions ranging from 24 kb to 34 Megabases (Mb). 
@hamid2019 analysed *CDKN2A* deletions reported on the COSMIC
database and calculated a median deletion length of 1.2 Mb.

Germline *CDKN2A* mutations increase predisposition to melanoma [@toussi2020], 
whilst a single publication links germline mutations in *CDKN2B* to renal cell
carcinoma [@jafri2015]. Germline deletions of both *CDKN2A* and *CDKN2B* have
been reported [@jensen2022].

### *PTEN*

The *PTEN* gene is deleted in many different cancer types [@alvarezgarcia2019].
Germline mutations in *PTEN* cause PTEN hamartoma tumor syndrome [@yehia2020].
Germline deletions in PTEN can either encompass the whole gene or include only
certain exons [@zhou2003]. 

## Detection of gene deletions

Somatic deletions were originally characterised using karyotyping and
fluorescence in-situ hybridisation (FISH). These cytogenetic techniques can
view cancers at a single-cell resolution. Over the last 25 years, there has
been increasing development of molecular methods for detection of somatic CNVs,
including deletions, beginning with array comparative genome hybridisation
(CGH) and SNP-microarrays [@das2013], before progressing to Illumina short-read
next generation sequencing (NGS) of gene-panels [@conroy2021; glodzik2023], 
exomes [@zare2017] and genomes [@yi2023; sonsinsky2024]. The majority of NGS 
approaches use a depth-of-coverage approach:
the number of sequencing reads mapping to a locus is used to infer the copy
number of that locus within the sample. This approach was based on initial
array approaches, in which the signal intensity from a probe was used to infer
the locus copy number [@teo2012].

### Challenges

Whilst array and NGS approaches can define genomic losses more precisely than
previous cytogenetic techniques, they do not allow single-cell resolution.
Instead, DNA from millions of cancer and stromal cells is homogenised and
analysed simultaneously within the same experiment. As a result, identifying
somatic CNVs by these methods is confounded by three biological factors:

- **Neoplastic cell content (NCC):** the neoplastic cell content is the 
proportion of tumour cells within a sample. NCC may also be referred to as 
tumour purity or cancer cell fraction. The NCC can vary significantly and this 
impacts the sensitivity  of any copy-number technique. In addition, the normal 
tissue may contain  germline genetic variation which may mask or alter the
signal of somatic variation.

- **Ploidy:** cancer cells frequently deviate from a standard diploid
chromosome complement to become polyploid. Polyploidy arises across many
different cancer types, usually arising after mitotic replication without
cytokinesis, known as endoreplication, which multiplies the genome within a
single cell [@conway2024]. Assuming that the tumour has a diploid chromosome
complement can lead to incorrect copy number prediction when polyploidy is
present. For example @gardina2008 report several tetraploid glioblastoma
samples with chromosome 10 trisomy. When ploidy was not accounted for,
SNP-array analysis mistakenly reported a loss of chromosome 10, due to 
the relative dosage of chromosome 10 versus the rest the polyploid genome.

- **Intra-tumoural heterogeneity:** cancers are composed  of diverse
populations of cells, in which copy number changes may only found in specific
sub-clones [@dagogojack2018]. Analysing the homogenised DNA of tumours risks
missing or misinterpreting the contributions from low-level, but
clinically significant, cell populations.

In addition, depth-of-coverage methods for CNV detection are also impacted by
technical variation within samples:

- **GC content:** the GC content of DNA fragments can alter the read count
in short-read NGS in a non-linear fashion, with both high and low GC contents
associated with reduced sequencing depth [@benjamini2012]. Various statistical
methods have been developed to attempt to correct for this bias [@teo2012].

- **Formalin fixation:** the process of fixing tumour samples in formalin
chemically modifies DNA, leading to shorter DNA fragments and non-uniform 
sequencing coverage [@stiert2024]. 

### Approaches

Purity, ploidy and intratumoural heterogeneity create a problem: the analysis 
method must take data from a bulk-sequenced sample and attempt to separate out 
the underlying genomic complexity [@gao2020; @chandramohan2022]. A pragmatic 
approach is to combine sequence dosage (log2 ratio) and allele-frequency 
analysis (allelic ratio or B-allele frequency), which was 
first introduced by combining array CGH and SNP-arrays [@zhao2004; @vanloo2010; 
@gardina2008] and has since been adopted for NGS approaches [@carter2012]. These
approaches frequently employ Hidden Markov Models (HMMs): statistical models
which use raw data to select the most likely copy number state from a series of
possible states [@seiser2014].

NGS analysis can be performed on a tumour sample ("tumour-only") or paired tumour 
and germline samples, with paired analysis having the advantage of being able 
to distinguish between somatic and germline variants [@jones2015]. Paired 
analysis also differs in its approach to ploidy calculations. One example is the
Canvas algorithm developed by Illumina for paired tumour-normal CNV calling
[@roller2016]. Canvas takes the coverage and MAF values for a tumour sample and
compares them to the predicted coverage and MAF values for multiple combinations
of tumour purity, ploidy and heterogeneity. The combination with the smallest 
deviation from the actual results is accepted as the likely purity, ploidy and
heterogeneity state of the tumour, and then used for calculating copy number.
The process of comparing the actual to predicted results was optimised using
a cohort of tumour-normal samples with known ploidy and purity values
(@roller2016, supplementary information, page 17).

Other approaches which have shown promise for solving the challenges of purity, 
ploidy and heterogeneity deconvolution include multiple tumour sequencing 
[@zaccaria2020] and single-cell genome sequencing [@baslan2020]. However, these 
techniques are expensive and experimental, and consequently have not yet been
clinically implemented. 

Notably, the WHO does not specify a technology for CNV detection in their
guidelines, which reflects the diversity of approaches used in clinical 
laboratories [@neill2020].

## Loss of heterozygosity

Loss of heterozygosity (LOH) at mismatch repair (MMR) gene loci has been 
identified as a pathogenic mechanism in colorectal cancer (@melcher2007). 
This LOH is frequently copy-neutral, with the allele containing a pathogenic
sequence variant being copied in the repair of the damaged wild-type allele. 
LOH in colorectal cancer may be identified using SNP arrays 
(@melcher2007, @melcher2011), PCR fragment analysis (@guerts-giele2014) and 
next generation sequencing.

LOH detection was required for the following genes: *MSH2*, *MSH6*, *MLH1*,
*PMS2*, *LZTR1*, *SMARCB1* and *NF2*.

## Requirements

The requirements for this new method are as follows:

1. **Results:** the test should provide clear results for the 
`r length(del_genes$gene)` deletion genes.

2. **Analytical validity:** the test should have a defined sensitivity and 
specificity for these genes, calculated by comparison with orthogonal methods.

3. **Dosage accuracy:** it should be show how accurate the test is at detecting 
heterozygous and homozygous deletions, in samples with a range of NCC values.

4. **Quality control:** the test should have clear quality control thresholds
for deciding when the test results should be reported and when the test has 
failed.

5. **Variability:** the test should have defined intra-run variation 
(repeatability) and inter-run variability (reproducibility) for detection of 
deletions. Analysis of this variation should then be used to derive the 
uncertainty of measurement for the test.

6 **Visualisation:** the results should be presented in a clear and visual 
manner.

7 **Analysis:** there should be a clear procedure for analysis for gene 
deletions by laboratory staff.

{{< pagebreak >}}

# Methodology

## Samples

7 WGS samples from amplifications validation
10 WGS samples newly run
29 samples to be tested with ddPCR

Only 1 sample had a germline finding in a targeted gene on WGS.

Ploidy ranged from x to y and NCC ranged from a to b.

## DNA extraction

## Next generation sequencing

Samples were processed on the PanSolid version 2 enrichment and sequenced on an
Illumina Novaseq.

### PanSolid panel

The PanSolid panel is a QIAseq enrichment containing primers for
`r nrow(target_df)` genomic targets. 
`r nrow(target_df[target_df$target_type == "gene target",])` targets lie within
specific genes related to cancer, and a further 
 `r nrow(target_df[target_df$target_type == "genomic backbone",])`
targets provide a genomic backbone for LOH and ploidy calling.

## Bioinformatics Pipeline

A bioinformatics pipeline was built in the CLC Genomics Workbench v23 (Qiagen).

### Control cohort

### Graining level

### Fold change {#sec-methods-fold-change}

$$
FCgain = CNsample / CNnormal
$$ {#eq-fold-change-gain}

$$
FCloss = - (CNnormal / CNsample)
$$ {#eq-fold-change-loss}

```{r}
#| label: fold-change
#| include: FALSE

fold_change_df <- data.frame(ncc = seq(0, 100, by = 0.1)) |> 
  mutate(fold_change_normal = pred_fc(tumour_cpc = 2,
                                      ncc = ncc,
                                      dir = "loss",
                                      digits = 3),
         fold_change_het_del = pred_fc(tumour_cpc = 1,
                                       ncc = ncc,
                                       dir = "loss",
                                       digits = 3),
         fold_change_hom_del = pred_fc(tumour_cpc = 0,
                                       ncc = ncc,
                                       dir = "loss",
                                       digits = 3)) |> 
  pivot_longer(cols = -ncc,
               names_to = "del_state",
               values_to = "fold_change")

```

```{r}
#| label: fold-change-threshold
#| include: FALSE

deletion_fc_threshold <- pred_fc(tumour_cpc = 1, ncc = 50, dir = "loss",
                                 digits = 3)

```

The threshold was set at `r round(deletion_fc_threshold,2)`, which is the fold 
change for a sample with a heterozygous deletion at 50% neoplastic cell content. 
This would be an overall copy number of 1.5.

```{r}
#| label: fold-change-plot
#| echo: FALSE

fold_change_plot <- ggplot(fold_change_df, aes(x = ncc, y = fold_change)) +
  geom_line(aes(colour = del_state), linewidth = 1) +
  scale_colour_manual(values = c( "#999999", "#999999", "#999999")) +
  coord_cartesian(ylim = c(-5, 0)) +
  scale_y_continuous(breaks = c(0, -1, round(deletion_fc_threshold, 2),
                                -2, -3, -4, -5),
                     minor_breaks = NULL) +
  scale_x_continuous(breaks = seq(0, 100, by = 10)) +
  theme_bw() +
  theme(legend.position = "blank") +
  labs(y = "Fold change", x = "Neoplastic cell content",
       colour = "") +
  geom_hline(yintercept = round(deletion_fc_threshold,2), linetype = "dashed") +
  annotate("text", x = 65, y = -4.5, label = "Homozyous \n deletion") +
  annotate("text", x = 90, y = -2.5, label = "Heterozygous \n deletion") +
  annotate("text", x = 90, y = -0.5, label = "Normal")

fold_change_plot

copy_number_df <- data.frame(ncc = seq(0, 100, by = 1)) |> 
  # Imagine for 100 cells
  mutate(copy_number_norm = 2,
         copy_number_het_del = ((ncc*1) + ((100-ncc)*2)) / 100,
         copy_number_hom_del = ((ncc*0) + ((100-ncc)*2)) / 100) |> 
  pivot_longer(cols = -ncc,
               names_to = "del_state",
               values_to = "copy_number")

copy_number_plot <- ggplot(copy_number_df, aes(x = ncc, y = copy_number)) +
  geom_line(aes(colour = del_state), linewidth = 1) +
  scale_colour_manual(values = c( "#999999", "#999999", "#999999")) +
  scale_x_continuous(breaks = seq(0, 100, by = 10)) +
  theme_bw() +
  theme(legend.position = "blank") +
  labs(y = "Copy number", x = "Neoplastic cell content",
       colour = "") +
  annotate("text", x = 75, y = 0.2, label = "Homozyous \n deletion") +
  annotate("text", x = 90, y = 0.8, label = "Heterozygous \n deletion") +
  annotate("text", x = 90, y = 1.8, label = "Normal") +
  geom_hline(yintercept = 1.5, linetype = "dashed") 

copy_number_plot

```

### Signal-adjusted noise

The signal-adjusted noise metric was developed during the *ERBB2* validation and
is described in detail in DOCxxxx.

### Variant frequency

To produce a visualisation of allele frequency across the genome, the read depth
frequencies of variants in the sequenced sample were used. The variants were
filtered according to the following criteria:

1) The variant was in a Genome In A Bottle high-confidence region
2) The variant had a frequency greater than 4%

This variant frequency is different to the B allele frequency (BAF) which is
used in WGS analysis. The BAF shows the frequency of the allele present in
the reference genome versus the alternate allele. Bases are given an arbitrary 
hierarchy: A < T < G < C.

When the reference base is higher in the hierarchy to the alternate base, BAF
is defined as:

$$
BAF = (AltCount / (RefCount + AltCount))
$$ {#eq-baf-1}

When the reference bases is lower in the hierarchy to the alternate base, BAF
is defined as:

$$
BAF = 1 - (AltCount / (RefCount + AltCount))
$$ {#eq-baf-2}

Equations taken from [Illumina website](https://help.dragen.illumina.com/product-guides/dragen-v4.3/dragen-dna-pipeline/small-variant-calling/baf-output)

### Ploidy

Ploidy status was predicted using the "Detect Regional Ploidy" tool with the
"Region-level Ploidy Track". This uses
a Hidden Markov Model to predict ploidy based on SNP and coverage data, which 
is influenced by @beroukhim2006.

### Pipeline version

The version of the PanSolid CLC pipeline tested in this validation was PanSolid 
Workflow v2.4.

### Visualisation

A new visualisation was developed to include deletions and LOH.

## Whole genome sequencing

Additional samples were added to the existing cohort reported in 
[DOC6283]{custom-style="Strong"}. 

Samples were tested by whole genome sequencing (WGS) within the NHS Genomic
Medicine Service [@sosinsky2024]. WGS was performed by Illumina Laboratory 
Services in Cambridge
on paired blood and fresh frozen tumour samples. Bioinformatic analysis was
performed by Genomics England, and HTML reports were downloaded from the 
Genomics
England [clinical interpretation portal](https://cipapi.genomicsengland.nhs.uk/interpretationportal/gms/).

### Genomics England Pipeline

Within the pipeline, tumour ploidy and chromosome count are calculated by the
Canvas algorithm [@roller2016]. Canvas also
detects somatic CNVs and LOH using sample read-depth and allele ratios, and reports
them as GAIN, LOSS or LOH in the HTML report. Structural variants are detected
using the Manta algorithm [@chen2016] and included as DEL or DUP in the HTML
report. 

Whilst Canvas predicts tumour purity, the tumour purity stated on the 
final HTML report is predicted using the Ccube package [@yuan2018]. Ccube 
predicts NCC from variant fractions, using a probabilistic model to account for 
two important challenges: not all cancer cells may contain a variant, and cancer
cells may not be diploid.

```{r}
#| label: pipeline-metrics
#| echo: FALSE

pipeline_metric_tbl <- tribble(
  ~"",         ~"PanSolid NGS", ~"Whole genome sequencing",
  "Sample(s)",   "FFPE tumour sample",   "Paired fresh frozen tumour sample and blood sample for germline DNA",
  "Library preparation", "QIAseq panel enrichment", "Whole genome amplification",
  "CNV caller",  "QIAgen CLC Genomics Workbench", "Germline CNVs: DRAGEN CNV; Somatic CNVs: Canvas and Manta",
  "NCC calculated", "No", "Yes - by Canvas and Ccube"
)

knitr::kable(pipeline_metric_tbl)

```

## Droplet digital PCR

ddPCR assays were designed for the *CDKN2A* and *PTEN* genes. ddPCR was 
performed on a BioRad QX200 system with 20ng DNA input. The ddPCR
assays were validated on WS146103 and samples were tested on WS146462 and 
WS146463. The ddPCR assays for *CDKN2A* exon 3 and *PTEN* exon 1 were used.
The same ddPCR mix volumes and thermocycling conditions were used as for the 
previous amplifications validation, and are detailed in the Supplementary 
Information of [DOC6283]{custom-style="Strong"}.

## Loss of heterozgosity

```{r}
#| label: nf2-markers
#| include: FALSE

nf2_loh_markers <- tribble(
  ~marker,      ~chromosome, ~grch38_start,    ~grch38_end,
  "D22S275",    "22",        28718848,         28719015,
  "NF2CA3",     "22",        29628082,         29628219,
  "NF2intron10", "22",       29670415,         29670600,
  "D22S268",     "22",       30162212,         30162464
) |> 
  mutate(amplicon_size_bp = abs(grch38_start - grch38_end))

nf2_marker_mb <- round((max(nf2_loh_markers$grch38_end) - min(nf2_loh_markers$grch38_start)) / 10^6, 1)

nf2_loh_targets <- target_df_with_coordinates |> 
  filter(chromosome == "22") |> 
  filter(start >= min(nf2_loh_markers$grch38_start) &
           end <= max(nf2_loh_markers$grch38_end))

```

4 dinucleotide microsatellite repeat markers (D22S275, NF2CA3, NF2intron10 and
D22S268) on chromosome 22 are used to assess loss of heterozygosity (LOH) for 
the *NF2* gene with fluorescence-PCR analysed on an ABI-3130 analyser 
([LP 000 069: Neurofibromatosis type 2 (NF2): Standard Operating
Procedure]{custom-style="Strong"}). Testing was performed on paired tumour and
blood DNA. A relative loss of peak height greater than 30% between tumour DNA
and blood DNA is used to classify "significant LOH" [@wallace2004].

These markers span `r nf2_marker_mb` Mb of chromosome 22, the same region 
contains `r nrow(nf2_loh_targets)` targets on PanSolid v2.

We used these samples as proof-of-concept that the PanSolid pipeline can 
identify regions of LOH.

```{r}
#| label: tbl-nf2-markers
#| echo: FALSE

kable(nf2_loh_markers)

```

## Validation analysis

Analysis was performed in R version 4.4.1. This validation document is written in
Quarto [@allaire2024] and is saved in a public Github repository:
[https://github.com/joe-m-shaw/pansolid_cnv_validation/tree/main/vignettes](https://github.com/joe-m-shaw/pansolid_cnv_validation/tree/main/vignettes)

## Data locations

All data analysed in this validation is saved at this file location:

S:/central shared/Genetics/Mol_Shared/Development.Team/PanSolid CNV/data/validation/DOC6567_deletions/

{{< pagebreak >}}

# Results

## Overall results

```{r}
#| label: overall-results
#| include: FALSE

```

## Comparison to whole genome sequencing


### Homozygous losses

Every example of a CDKN2A/B CN0 loss detected on WGS was detected on PanSolid, 
with one exception (24033015) although this was low confidence (LC-9) on WGS, 
with 50% NCC and a tetraploid tumour.

Every example of a PTEN CN0 loss detected on WGS was detected on PanSolid.

### Heterozygous losses

### Germline loss



### Ploidy

Comparison plot of ploidy estimates from PanSolid and WGS.



```{r}
#| label: wgs-deletions
#| eval: FALSE
#| include: FALSE

del_genes <- read_csv(file = paste0(data_folderpath,
                                   "validation/DOC6567_deletions/gene_lists/",
                                   "pansolid_deletion_gene_list.csv"))

wgs_cnvs_with_ids <- del_val_wgs_html_cnvs |> 
  left_join(del_val_wgs_html_ids, by = "filepath",
            relationship = "many-to-one")

pansolid_with_ids <- del_val_pansolid_ngs_collated |> 
  left_join(del_val_sample_patient_info |> 
              select(labno, firstname, surname, nhsno, pathno), by = "labno")

wgs_pansolid_nhs_nos <- intersect(wgs_cnvs_with_ids$nhsno,
                                  pansolid_with_ids$nhsno)

wgs_del_cnvs <- wgs_cnvs_with_ids |> 
  filter(cnv_class %in% c("LOSS", "DEL")) |> 
  filter(gene %in% del_genes$gene)

coarse_pansolid_vs_wgs <- pansolid_with_ids |> 
  filter(graining == "coarse" & nhsno %in% wgs_pansolid_nhs_nos) |> 
  full_join(wgs_del_cnvs, by = c("nhsno", "gene")) |> 
  select(labno.x, labno.y, firstname, surname, pathno, wgs_pathno,
         gene, cnv_region, fold_change_adjusted, cnv_class, cnv_copy_number)

fine_pansolid_vs_wgs <- pansolid_with_ids |> 
  filter(graining == "fine" & nhsno %in% wgs_pansolid_nhs_nos) |> 
  full_join(wgs_del_cnvs, by = c("nhsno", "gene")) |> 
  select(labno.x, labno.y, firstname, surname, pathno, wgs_pathno,
         gene, cnv_region, fold_change_adjusted, cnv_class, cnv_copy_number)

```

```{r}
#| label: tbl-wgs-deletions
#| eval: FALSE
#| include: FALSE

kable(wgs_del_cnvs_summary)

```


## Comparison to ddPCR

ddPCR was performed for the *PTEN* and *CDKN2A* genes for all 25 normal control 
samples and 29 patient samples.

*PTEN* has a pseudogene, *PTENP1*, on chromosome 9, which could have influenced
the results.

```{r}
#| label: load-ddpcr-data
#| eval: FALSE
#| include: FALSE

qs_normals <- read_csv(file = paste0(data_folderpath,
                                     "validation/DOC6283_amplifications/",
                                     "controls/qiasymphony_controls.csv"),
                       col_types = "c")

ps_results <- read_csv(file = paste0(data_folderpath,
                                     "validation/DOC6567_deletions/",
                                     "processed/",
                                     "pansolid_ngs_cnvs.csv"))

ddpcr_copy_number_threshold <- 1.5

pansolid_fold_change_threshold <- -1.33

```

```{r}
#| label: cdkn2a-results
#| eval: FALSE
#| include: FALSE

cdkn2a_ddpcr_results <- ddpcr_data |> 
  filter(worksheet == "WS146462") |> 
  filter(sample != "NTC") |> 
  filter(target_type == "Ch1Unknown") |> 
  mutate(category = case_when(
    sample %in% qs_normals$labno ~"normal control",
    TRUE ~"patient"
  )) |> 
  left_join(ps_results, join_by("sample" == "labno",
                                "")) |> 
  mutate(ddpcr_result = case_when(
    cnv < ddpcr_copy_number_threshold ~"deletion",
    cnv >= ddpcr_copy_number_threshold ~"normal"
  ),
  pansolid_result = case_when(
    cdkn2a_fold_change <= pansolid_fold_change_threshold ~"deletion",
    cdkn2a_fold_change > pansolid_fold_change_threshold ~"normal"),
  outcome = case_when(
    ddpcr_result == "deletion" & pansolid_result == "deletion" ~"PanSolid deletion; ddPCR deletion",
    ddpcr_result == "normal" & pansolid_result == "deletion" ~"PanSolid deletion; ddPCR normal",
    ddpcr_result == "normal" & pansolid_result == "normal" ~"PanSolid normal; ddPCR normal",
    ddpcr_result == "deletion" & pansolid_result == "normal" ~"PanSolid normal; ddPCR deletion"))

cdkn2a_patient_results <- cdkn2a_ddpcr_results |> 
  filter(category != "normal control") |> 
  filter(!is.na(outcome))

cdkn2a_result_summary <- cdkn2a_patient_results |> 
  count(outcome) |> 
  arrange(desc(n)) |> 
  rename(samples = n)

cdkn2a_metrics <- get_epir_metrics(outcome_vector = c(17, 0, 2, 10))

discrepant_strings <- c("PanSolid deletion; ddPCR normal", "PanSolid normal; ddPCR deletion")

discrepant_cdkn2a <- cdkn2a_ddpcr_results |> 
  filter(outcome %in% discrepant_strings) |> 
  select(sample, cnv, ch1_ch2_2, ch1_ch2_3, cdkn2a_fold_change, pansolid_result)

```


```{r}
#| label: pten-results
#| eval: FALSE
#| include: FALSE

pten_ddpcr_results <- ddpcr_data |>
  filter(worksheet == "WS146463") |> 
  filter(sample != "NTC") |> 
  filter(target_type == "Ch1Unknown") |> 
  mutate(category = case_when(
    sample %in% qs_normals$labno ~"normal control",
    TRUE ~"patient"
  )) |> 
  left_join(ps_results, join_by("sample" == "labno")) |> 
  mutate(ddpcr_result = case_when(
    cnv < ddpcr_copy_number_threshold ~"deletion",
    cnv >= ddpcr_copy_number_threshold ~"normal"
  ),
  pansolid_result = case_when(
    pten_fold_change <= pansolid_fold_change_threshold ~"deletion",
    pten_fold_change > pansolid_fold_change_threshold ~"normal"),
  outcome = case_when(
    ddpcr_result == "deletion" & pansolid_result == "deletion" ~"PanSolid deletion; ddPCR deletion",
    ddpcr_result == "normal" & pansolid_result == "deletion" ~"PanSolid deletion; ddPCR normal",
    ddpcr_result == "normal" & pansolid_result == "normal" ~"PanSolid normal; ddPCR normal",
    ddpcr_result == "deletion" & pansolid_result == "normal" ~"PanSolid normal; ddPCR deletion"))

pten_patient_results <- pten_ddpcr_results |> 
  filter(category != "normal control") |> 
  filter(!is.na(outcome))

pten_result_summary <- pten_patient_results |> 
  count(outcome) |> 
  arrange(desc(n)) |> 
  rename(samples = n)

pten_metrics <- get_epir_metrics(outcome_vector = c(8, 5, 2, 12))

discrepant_pten <- pten_ddpcr_results |> 
  filter(outcome %in% discrepant_strings) |> 
  select(sample, cnv, ch1_ch2_2, ch1_ch2_3, pten_fold_change, pansolid_result)

```

```{r}
#| label: fig-cdkn2a-ddpcr-results
#| eval: FALSE
#| include: FALSE
#| fig-width: 6

cdkn2a_normal_plot <- cdkn2a_ddpcr_results |> 
  filter(category == "normal control") |> 
  ggplot(aes(x = reorder(sample, desc(cnv)), y = cnv)) +
  geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
  geom_point(shape = 21, fill = "white") +
  theme_bw() +
  theme(axis.text.x = element_text(angle= 90),
        legend.position = "bottom") +
  labs(x = "", y = "ddPCR copy number",
       title = "CDKN2A normal control results") +
  ylim(0, 6) +
  geom_hline(yintercept = 1.5, linetype = "dashed")

cdkn2a_patient_plot <- cdkn2a_ddpcr_results |> 
  filter(category == "patient") |> 
  ggplot(aes(x = reorder(sample, desc(cnv)), y = cnv)) +
  geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
  geom_point(shape = 21, fill = "white") +
  theme_bw() +
  theme(axis.text.x = element_text(angle= 90),
        legend.position = "bottom") +
  labs(x = "", y = "",
       title = "CDKN2A patient results") +
  ylim(0, 6) +
  geom_hline(yintercept = 1.5, linetype = "dashed")

cdkn2a_comb_plot <- cdkn2a_normal_plot + cdkn2a_patient_plot +
  plot_layout(nrow = 1)

cdkn2a_comb_plot

```

```{r}
#| label: fig-pten-ddpcr-results
#| eval: FALSE
#| include: FALSE
#| fig-width: 6

pten_normal_plot <- pten_ddpcr_results |> 
  filter(category == "normal control") |> 
  ggplot(aes(x = reorder(sample, desc(cnv)), y = cnv)) +
  geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
  geom_point(shape = 21, fill = "white") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom") +
  labs(x = "", y = "ddPCR copy number",
       title = "PTEN normal control results") +
  ylim(0, 5) +
  geom_hline(yintercept = 1.5, linetype = "dashed")

pten_patient_plot <- pten_ddpcr_results |> 
  filter(category == "patient") |> 
  ggplot(aes(x = reorder(sample, desc(cnv)), y = cnv)) +
  geom_errorbar(aes(ymin = poisson_cnv_min, ymax = poisson_cnv_max)) +
  geom_point(shape = 21, fill = "white") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90),
        legend.position = "bottom") +
  labs(x = "", y = "",
       title = "PTEN patient results") +
  ylim(0, 5) +
  geom_hline(yintercept = 1.5, linetype = "dashed")

pten_comb_plot <- pten_normal_plot + pten_patient_plot +
  plot_layout(nrow = 1)

pten_comb_plot

```

{{< pagebreak >}}

```{r}
#| label: tbl-cdkn2a-results
#| tbl-cap: "CDKN2A results"
#| eval: FALSE
#| include: FALSE

kable(cdkn2a_result_summary)

```

```{r}
#| label: tbl-cdkn2a-metrics
#| tbl-cap: "CDKN2A metrics"
#| eval: FALSE
#| include: FALSE

kable(cdkn2a_metrics)

```

{{< pagebreak >}}

```{r}
#| label: tbl-pten-results
#| tbl-cap: "PTEN results"
#| eval: FALSE
#| include: FALSE

kable(pten_result_summary)

```

```{r}
#| label: tbl-pten-metrics
#| tbl-cap: "PTEN metrics"
#| eval: FALSE
#| include: FALSE

kable(pten_metrics)

```

```{r}
#| label: fig-ddpcr-vs-pansolid
#| fig-height: 7
#| eval: FALSE
#| include: FALSE

cdkn2a_ps_plot <- cdkn2a_ddpcr_results |> 
    filter(!is.na(cdkn2a_ddpcr_results$cdkn2a_fold_change)) |> 
  ggplot(aes(x = cnv, y = cdkn2a_fold_change)) +
  geom_hline(yintercept = pansolid_fold_change_threshold, linetype = "dashed") +
  geom_vline(xintercept = ddpcr_copy_number_threshold, linetype = "dashed") +
    annotate('rect', xmin = -1, xmax = 3, ymin = -1, 
           ymax = 1, fill='white') +
  geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "ddPCR copy number", y = "PanSolid fold change",
       title = "CDK2NA results") +
  scale_y_continuous(breaks = c(seq(-22, 2, by = 1))) +
  coord_cartesian(xlim = c(0, 2))

pten_ps_plot <- pten_ddpcr_results |> 
    filter(!is.na(pten_ddpcr_results$pten_fold_change)) |> 
  ggplot(aes(x = cnv, y = pten_fold_change)) +
  geom_hline(yintercept = pansolid_fold_change_threshold, linetype = "dashed") +
  geom_vline(xintercept = ddpcr_copy_number_threshold, linetype = "dashed") +
    annotate('rect', xmin = -1, xmax = 3, ymin = -1, 
           ymax = 1, fill='white') +
  geom_hline(yintercept = 1, colour = "grey") +
  geom_hline(yintercept = -1, colour = "grey") +
  geom_point(shape = 21) +
  theme_bw() +
  labs(x = "ddPCR copy number", y = "PanSolid fold change",
       title = "PTEN results") +
  scale_y_continuous(breaks = c(seq(-30, 2, by = 1))) +
  coord_cartesian(xlim = c(0, 2))

cdkn2a_ps_plot

pten_ps_plot

```

{{< pagebreak >}}

## Comparison to LOH testing

```{r}
#| label: loh-pcr-data
#| include: FALSE

nf2_fragpcr_results <- read_csv(file = paste0(data_folderpath,
                                              "validation/DOC6567_deletions/",
                                              "raw/nf2_loh/",
                                              "nf2_loh_dna_db_results.csv"),
                                col_types = "ccccccdddddcd") |> 
  rename(pcr_median_loh = median_loh,
         pcr_loh = loh_outcome)

nf2_loh_comparison <- del_val_collated_loh |> 
  filter(gene == "NF2") |> 
  inner_join(nf2_fragpcr_results, by = "labno") |> 
  left_join(del_val_collated_stdev |> 
              select(labno, stdev_noise), by = "labno",
            relationship = "one-to-one") |> 
  left_join(del_val_collated_138x |> 
              select(labno, percent_138x), by = "labno",
            relationship = "one-to-one") |> 
  left_join(del_val_collated_del_genes |> 
              filter(gene == "NF2") |> 
              select(labno, min_region_fold_change, 
                     max_region_fold_change),
            by = "labno",
            relationship = "one-to-one") |> 
  mutate(
    category = case_when(
      loh_status %in% c("Yes", "Yes, No") &
        pcr_loh == "Significant LOH" ~"true_pos",
      loh_status == "No" &
        pcr_loh == "No significant LOH" ~"true_neg",
      loh_status %in% c("Yes", "Yes, No") &
        pcr_loh == "No significant LOH" ~"false_pos",
      loh_status == "No" &
        pcr_loh == "Significant LOH" ~"false_neg"),
    
    outcome = case_when(
      category %in% c("true_pos", "true_neg") ~"Agree",
      category %in% c("false_pos", "false_neg") ~"Disagree"
    ))

```

The outputs of the PanSolid CLC ploidy caller for the *NF2* gene were
compared to the results from *NF2* dinucleotide marker PCR LOH testing for
`rnrow(nf2_loh_comparison)` samples. The results for the initial comparison are
shown in @tbl-nf2-initial-results and @tbl-nf2-initial-metrics.

```{r}
#| label: tbl-nf2-initial-results
#| tbl-cap: "PanSolid NGS vs NF2 LOH PCR results"
#| echo: FALSE

tbl_nf2_initial_results <- nf2_loh_comparison |> 
  group_by(ploidy_state, loh_status, pcr_loh, outcome) |> 
  count() |> 
  arrange(desc(n)) |> 
  janitor::adorn_totals() |> 
  rename("CLC ploidy state" = ploidy_state,
         "CLC LOH status" = loh_status,
         "NF2 PCR result" = pcr_loh,
         "Outcome" = outcome,
         "Samples" = n)

knitr::kable(tbl_nf2_initial_results)

```

```{r}
#| label: tbl-nf2-initial-metrics
#| tbl-cap: "PanSolid NGS vs NF2 LOH PCR metrics"
#| echo: FALSE

tbl_nf2_initial_metrics <- get_epir_metrics(c(
  nrow(nf2_loh_comparison[nf2_loh_comparison$category == "true_pos", ]),
  nrow(nf2_loh_comparison[nf2_loh_comparison$category == "false_pos", ]),
  nrow(nf2_loh_comparison[nf2_loh_comparison$category == "false_neg", ]),
  nrow(nf2_loh_comparison[nf2_loh_comparison$category == "true_neg", ])))

knitr::kable(tbl_nf2_initial_metrics)

```

```{r}
#| label: tbl-nf2-results-with-qc
#| tbl-cap: "PanSolid NGS vs NF2 LOH PCR results with quality filters"
#| echo: FALSE

nf2_loh_comparison_with_qc <- nf2_loh_comparison |> 
  filter(percent_138x >= 75 & stdev_noise <= 0.7)

tbl_nf2_results_with_qc <- nf2_loh_comparison_with_qc |> 
  group_by(ploidy_state, loh_status, pcr_loh, outcome) |> 
  count() |> 
  arrange(desc(n)) |> 
  janitor::adorn_totals() |> 
  rename("CLC ploidy state" = ploidy_state,
         "CLC LOH status" = loh_status,
         "NF2 PCR result" = pcr_loh,
         "Outcome" = outcome,
         "Samples" = n)

knitr::kable(tbl_nf2_results_with_qc)

```

```{r}
#| label: tbl-nf2-metrics-with-qc
#| tbl-cap: "PanSolid NGS vs NF2 LOH PCR metrics with quality filters"
#| echo: FALSE

tbl_nf2_metrics_with_qc <- get_epir_metrics(c(
  nrow(nf2_loh_comparison_with_qc[nf2_loh_comparison_with_qc$category == "true_pos", ]),
  nrow(nf2_loh_comparison_with_qc[nf2_loh_comparison_with_qc$category == "false_pos", ]),
  nrow(nf2_loh_comparison_with_qc[nf2_loh_comparison_with_qc$category == "false_neg", ]),
  nrow(nf2_loh_comparison_with_qc[nf2_loh_comparison_with_qc$category == "true_neg", ])))

knitr::kable(tbl_nf2_metrics_with_qc)

```

## Repeat testing

```{r}
#| label: repeat-schedule
#| include: FALSE

repeat_schedule <- tibble(
  "Worksheet" = c(1, 2, 2, 2, 3),
  "Sample replicate" = c(1, 2, 3, 4, 5),
  "Repeat category" = c("Inter-run", "Inter-run and intra-run", 
                        "Intra-run", "Intra-run", "Inter-run")
  )

```

Intra-run variation (repeatability) and inter-run variation (reproducibility) 
were investigated for 3 samples using the testing structure shown in. 

Sample 24017319 had a homozygous *CDKN2A* deletion and a heterozygous *PTEN* deletion, whilst sample 24020998 and sample 24027774 did not have deletions.

```{r}
#| label: tbl-repeat-schedule
#| tbl-cap: "Repeat testing"
#| include: FALSE

knitr::kable(repeat_schedule)

```

```{r}
#| include: FALSE
#| eval: FALSE

inter_run_replicates <- c(
  # 24017319
  "24017319_WS141734", "24017319a_WS144291", "24017319_WS144364",
  # 24027774
  "24027774_WS142076", "24027774a_WS144291", "24027774_WS144364",
  # 24020998
  "24020998_WS141045", "24020998a_WS144291", "24020998_WS144364")

intra_run_replicates <- c(
  # 24017319
  "24017319a_WS144291", "24017319b_WS144291", "24017319c_WS144291",
  # 24027774
  "24027774a_WS144291", "24027774b_WS144291", "24027774c_WS144291",
  # 24020998
  "24020998a_WS144291", "24020998b_WS144291", "24020998c_WS144291"
)

all_replicates <- c(inter_run_replicates, intra_run_replicates)

repeat_data <- del_val_pansolid_ngs_collated |> 
  mutate(labno_suffix_worksheet = paste0(labno, suffix, "_", worksheet)) |> 
  filter(labno_suffix_worksheet %in% all_replicates) |> 
  select(graining, labno, worksheet, labno_suffix_worksheet, gene, fold_change_adjusted) 

repeat_data |> 
  filter(labno == "24020998") |> 
  ggplot(aes(x = labno_suffix_worksheet, y = fold_change_adjusted)) +
  geom_col(aes(fill = gene), position = "dodge") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(x = "", y = "Fold Change") +
  facet_wrap(~graining)



```


### Uncertainty of measurement

The uncertainty of measurement will be greater for fold changes detected for 
deletions rather than amplifications because the two equations differ. The 
deletions equation is more sensitive to variation

"The fact that the same percent-wise change in coverage (copy number) leads 
to a higher fold change for deletions than for amplifications means that given 
the same amplification and deletion fold change cutoff there is a higher risk 
of calling false positive deletions than amplifications - it takes less 
coverage fluctuation to pass the fold change cutoff for deletions." 
[@qiagen2023]

## Limit of detection

The theoretical limit of detection for a heterozygous deletion is 50%, and 
for a homozygous deletion it is 25% (@sec-methods-fold-change).

## Quality control

Signal-adjusted noise above 0.7 leads to false positive deletion calls on both 
coarse and fine settings (examples: 23011114, 24030364, 23032153).

There are also cases where PanSolid detects a copy number of 1 not present 
on WGS (24043023, 23013975), which is particularly apparent when the percentage 
coverage at 138X is low (24042074).

{{< pagebreak >}}

# Discussion

Whole genome duplication is often followed by loss of genomic material, 
leading to tetraploid tumours having overall ploidy states of 3.5-4 rather 
than exactly 4 [@zack2013].

Aneuploidy is observed in many cancer types, with some cancers having specific 
recurrent aneuploidies. For example, gain of chromosome 7 and loss of 
chromosome 10 [@bostrÃ¶m1998] are frequently observed in glioblastoma. 

TSGs aren't always hit by deletions, they could have tandem duplications of
certain sections of the gene which render the gene transcript non functional 
[@li2020]

Loss of chromosome 22 is commonly seen in meningiomas [@neill2020]

## Comparison to WGS

@glodzik2023 compared FFPE tumour-only analysis to WGS and reported sensitivity
and specificity of 95% and 91%.

It should be noted that the WGS user guide states "The sensitivity for
detection of SVs and CNVs is yet to be determined."

WGS uses far more data than PanSolid - try to find the number of SNPs used for
both.

## Ploidy estimation

A key weakness is that different combinations of purity, ploidy and 
heterogeneity could produce the same levels of dosage and allelic imbalance - 
there will always be unknown quantities.

For example, a tetraploid genome will show the same Log2 ratios and BAF profile
on tumour-only analysis as a diploid genome. Paired tumour-normal analysis is 
required to distinguish that whole genome duplication has occurred, and the 
average chromosome number is 4, not 2.

The problem of heterogeneity. Consider the hypothetical scenario where NGS
has predicted a tumour to have a ploidy of 4, with an aneuploidy of chromosome 
10 which has a copy number of 3. If we assume the tumour to be homogenous, each 
cell will have 3 copies of chromosome 10, so there is no PTEN deficiency. 
However, the tumour may be heterogenous and include 2 clones, both at 50% 
purity. One clone is tetraploid, with 4 copies of chromosome 10. The other 
clone is diploid, with 1 copy of chromosome 10. Merged together in the 
sequencing and bioinformatic analysis, the ratio of chromosome 10 to the rest 
of the genome will be 3:4.

Many different bioinformatic tools have been developed, each with strengths and
weaknesses, and the choice of tool can have a significant impact on accuracy 
[@zare2017]. 

For example, @masood2024 demonstrated that prediction of tumour ploidy can vary
between bioinformatic tools, and showed that the ControlFREEC tool gave 
different ploidy predictions on different replicates of the same sample.

Haploidy in gliomas has been reported and often includes chromosome 7 at 
normal levels [@baker2020; ahrendsen2022].

## Resolution

Not all CNVs will impact the whole gene.

## Quality control

Compare to waviness and MAPD metrics used for microarrays.

## Comparison to commercial kits

Compare to FoundationOne, TruSight 500 and other tumour-only NGS assays.

Foundation One [milbury2022]
Bespoke [chandramohan2022]
GenomicsEngland [genomicsengland2019]
Tempus beaubier2018

## Extrapolation to other genes


## Limitations

Ultimately, due to the bulk-sequencing approach which has ploidy, purity and
heterogeneity as unknown variables, somatic NGS results are fundamentally
probabilistic in nature.

```{r}
#| label: pansolid-bed-bp
#| include: FALSE

pansolid_bed_bp <- sum(target_df_with_coordinates$target_size_bp)

haploid_genome_bp <- (3.2*10^9)

```

The limited genomic backbone of PanSolid vs WGS means that the resolution of
LOH calls will be limited.

The total target regions specified in the PanSolid BED file sum to 
`r round(pansolid_bed_bp/1000, 1)` kilobases, which is 
`r round((pansolid_bed_bp / haploid_genome_bp)*100, 2)`% of the human genome.

# Review of test requirements

1. **Results:** the test should provide clear results for the 
`r length(del_genes$gene)` deletion genes.



2. **Analytical validity:** the test should have a defined sensitivity and 
specificity for these genes, calculated by comparison with orthogonal methods.


3. **Dosage accuracy:** it should be show how accurate the test is at detecting 
heterozygous and homozygous deletions, in samples with a range of NCC values.



4. **Quality control:** the test should have clear quality control thresholds
for deciding when the test results should be reported and when the test has 
failed.



5. **Variability:** the test should have defined intra-run variation 
(repeatability) and inter-run variability (reproducibility) for detection of 
deletions. Analysis of this variation should then be used to derive the 
uncertainty of measurement for the test.



6 **Visualisation:** the results should be presented in a clear and visual 
manner.



7 **Analysis:** there should be a clear procedure for analysis for gene 
deletions by laboratory staff.




# Requirements for clinical implementation

# Conclusion

{{< pagebreak >}}

# References

::: {#refs}
:::

# Supplementary Information

## Panel details

```{r}
#| label: tbl-deletion-gene-targets
#| tbl-cap: "Genes on the deletion list"
#| echo: FALSE

kable(gene_target_counts)

```

## Sample details


## ddPCR details

```{r}
#| label: tbl-ddpcr-primers
#| tbl-cap: "ddPCR primer sequences"
#| echo: FALSE

ddpcr_primer_tbl <- tribble(
  ~`Primer name`, ~`Sequence (5'-3')`,
  "dCDKN2A_Ex3_1F", "TGTAAAACGACGGCCAGTCACTTCACACGGTCTCGCACTGGGTCCTACAGGGCCACAACTG",
  "dCDKN2A_Ex3_1R", "AAACTACGAAAGCGGGGTGG",
  "dPTEN_Ex1_2F", "TGTAAAACGACGGCCAGTCACTTCACACGGTCTCGCACTGGCCATTTCCATCCTGCAGAAGAAGC",
  "dPTEN_Ex1_2R", "GATGATGGCTGTCATGTCTGGG"
)

knitr::kable(ddpcr_primer_tbl)

```


## Supplementary plots


